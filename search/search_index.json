{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>v2025.3.2</p> <p></p> <p> The ACME CSE is a compliant subset implementation of the oneM2M IoT standard. It is an easy to install, run and extensible oneM2M CSE for educational purposes and small trials. </p> <ul> <li> <p> Install and set up in less than 5 minutes </p> <p>Run the following commands in a terminal to install and run the ACME oneM2M CSE:</p> <pre><code>python -m pip install acmecse\nacmecse\n</code></pre> <p> Detailed Instructions  Docker</p> </li> <li> <p> Compliant</p> <p>This compliant oneM2M Common Services Entity (CSE) implements a growing subset of the oneM2M standard. This includes many ressource types, functionalities, and protocols.  </p> <p> Supported Features</p> </li> <li> <p> It's just Python</p> <p>The intention is to provide an easy to install and use, extensible, and maintainable oneM2M CSE.</p> <p> Development Documentation  HowTos  FAQ</p> </li> <li> <p> Open Source | BSD 3-Clause</p> <p>The ACME oneM2M CSE is an open source project licensed under the BSD 3-Clause license. </p> <p> ACME CSE @ GitHub  License</p> </li> </ul>"},{"location":"#acme-onem2m-cse","title":"ACME oneM2M CSE","text":""},{"location":"#an-open-source-cse-middleware-for-education","title":"An open source CSE Middleware for Education","text":""},{"location":"development/ACMEScript-functions/","title":"ACMEScript - Functions","text":"<p>This section provides an overview of the functions that are available in ACMEScript. </p>"},{"location":"development/ACMEScript-functions/#basic-functions","title":"Basic Functions","text":""},{"location":"development/ACMEScript-functions/#concat","title":". (concat)","text":"<p><code>(. [&lt;symbol&gt;]+)</code></p> <p>Concatenate and return the stringified versions of the symbol arguments.</p> <p>Note</p> <p>This function will not add spaces between the symbols. One can use the nl and sp functions to add newlines and spaces.</p> <p>See also</p> <p>nl, sp, to-string</p> Example<pre><code>(. \"Time:\" sp (datetime))  ;; Returns \"Time: 20230308T231049.934630\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#all","title":"all","text":"<p><code>(all &lt;boolean&gt;+ | &lt;list of &lt;boolean&gt;+ &gt;)</code></p> <p>The <code>all</code> function returns true if all of the boolean expressions evaluate to true. If a list of boolean expressions is provided then the function returns true if all of the expressions in the list evaluate to true.</p> <p>See also</p> <p>any</p> Examples<pre><code>(all (&lt; 1 2) (&lt; 2 3))    ;; Returns true\n(all (&lt; 1 2) (&lt; 2 1))    ;; Returns false\n(all ((&lt; 1 2) (&lt; 2 3)))  ;; Returns true\n</code></pre>"},{"location":"development/ACMEScript-functions/#any","title":"any","text":"<p><code>(any &lt;boolean&gt;+ | &lt;list of &lt;boolean&gt;+ &gt;)</code></p> <p>The <code>any</code> function returns true if at least one of the boolean expression evaluates to true. If a list of boolean expressions is provided then the function returns true if at least one of the expressions in the list evaluates to true.</p> <p>See also</p> <p>all</p> Examples<pre><code>(any (&lt; 1 2) (&lt; 2 1))    ;; Returns true\n(any (&lt; 1 2) (&lt; 2 3))    ;; Returns true\n(any (&lt; 2 1) (&lt; 3 2))    ;; Returns false\n(any ((&lt; 1 2) (&lt; 2 1)))  ;; Returns true\n</code></pre>"},{"location":"development/ACMEScript-functions/#argv","title":"argv","text":"<p><code>(argv [&lt;n:integer&gt;]*)</code> </p> <p>Evaluates to the n-th argument of the script. The index starts a <code>0</code>, where the 0-th argument is the name  of the script. If the <code>argv</code> function is called without an argument or stand-alone then a string including  the name of the function and the arguments is returned. </p> <p>The number of arguments available is stored in the variable argc.</p> <p>See also</p> <p>argc</p> Example<pre><code>;; Print the script name\n(print \"The name of the script is:\" (argv 0))\n\n;; Print the first argument\n(print \"The first argument is:\" (argv 1))\n\n;; Print script name and all arguments\n(print \"All arguments:\" argv)\n</code></pre>"},{"location":"development/ACMEScript-functions/#assert","title":"assert","text":"<p><code>(assert &lt;boolean&gt;)</code></p> <p>The <code>assert</code> function terminates the script if its argument evaluates to false.</p> Example<pre><code>(assert (== (get-configuration \"cse.type\") \n            \"IN\"))  ;; Terminates when the setting is different from \"IN\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#base64-decode","title":"base64-decode","text":"<p><code>(base64-decode &lt;string&gt;)</code></p> <p>This function decodes a base64-encoded string.</p> <p>See also</p> <p>base64-encode, url-encode</p> Example<pre><code>(base64-decode \"SGVsbG8sIFdvcmxk\")  ;; Returns \"Hello, World\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#base64-encode","title":"base64-encode","text":"<p><code>(base64-encode &lt;string&gt;)</code></p> <p>This function encodes a string as base64.</p> <p>See also</p> <p>base64-decode, url-encode</p> Example<pre><code>(base64-encode \"Hello, World\")  ;; Returns \"SGVsbG8sIFdvcmxk\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#block","title":"block","text":"<p><code>(block &lt;name:string&gt; &lt;s-expression&gt;+)</code></p> <p>The <code>block</code> function executes a number of expressions in a named context. The first argument is a string that specifies the block's name.  The following arguments are s-expressions that are executed in the block.</p> <p>The result of the last expression is returned. A block can be exited early with the return-from function.</p> <p>See also</p> <p>return-from</p> Examples<pre><code>(block \"myBlock\" 1 2 3)  ;; Returns 3\n(block \"myBlock\" 1 (return-from \"myBlock\" 2) 3)  ;; Returns 2\n</code></pre> <p>One can use the <code>block</code> function to implement break and continue functionality in loops:</p> Examples<pre><code>;; Example for a break block\n;; The following example breaks the loop when the value of \"i\" is 5\n(block break\n    (dotimes (i 10)\n        ((print i) \n        (if (== i 5) \n            (return-from break)))))\n\n;; Example for a continue block\n;; The following example skips the value of \"i\" when it is 5\n(dotimes (i 10)\n    (block continue\n        (if (== i 5) \n            (return-from continue))\n        (print i)))\n</code></pre>"},{"location":"development/ACMEScript-functions/#car","title":"car","text":"<p><code>(car &lt;list&gt;)</code></p> <p>The <code>car</code> function returns the first symbol from a list. It doesn't change the original list.</p> <p>Note</p> <p>A list needs to be quoted when used directly.</p> <p>See also</p> <p>cdr, nth</p> Example<pre><code>(car '(1 2 3))  ;; Returns 1\n</code></pre>"},{"location":"development/ACMEScript-functions/#case","title":"case","text":"<p><code>(case &lt;key:string&gt; (&lt;condition&gt; &lt;s-expression&gt;)*)</code></p> <p>The <code>case</code> function implements the functionality of a <code>switch...case</code> statement in other programming languages.</p> <p>The key s-expression is evaluated and its value taken for the following comparisons. After this expression a number of lists may be given. </p> <p>Each of these list contains two symbols that are handled in order: </p> <ul> <li>The first symbol evaluates to a value that is compared to the result of the key s-expression. </li> <li>If there is a match then the second s-expression is evaluated, and then the comparisons are stopped and the case function returns.</li> </ul> <p>The special symbol <code>otherwise</code> for a condition s-expression always matches and can be used as a default or fallback case .</p> Example<pre><code>(case aSymbol\n    ( 1 (print \"Result: 1\"))\n    ( (+ 1 1) (print \"Result: 2\"))\n    (otherwise (print \"Result: something else\")))\n</code></pre>"},{"location":"development/ACMEScript-functions/#cdr","title":"cdr","text":"<p><code>(cdr &lt;list&gt;)</code></p> <p>The <code>cdr</code> function returns a list with all symbols from a list except the first symbol. It doesn't change the original list.</p> <p>Note</p> <p>A list needs to be quoted when used directly.</p> <p>See also</p> <p>car,  nth</p> Example<pre><code>(cdr '(1 2 3))  ;; Returns (2 3)\n</code></pre>"},{"location":"development/ACMEScript-functions/#cons","title":"cons","text":"<p><code>(cons &lt;symbol&gt; &lt;list&gt;)</code></p> <p>The <code>cons</code> function adds a new symbol to the front of a list and returns it. It doesn't change the original list.</p> <p>Note</p> <p>A list needs to be quoted when used directly.</p> Examples<pre><code>(cons 1 2)            ;; Returns (1 2)\n(cons 1 '(2 3))       ;; Returns (1 2 3)\n(cons '(1 2) '(3 4))  ;; Returns ((1 2) 3 4)\n</code></pre>"},{"location":"development/ACMEScript-functions/#datetime","title":"datetime","text":"<p><code>(datetime [&lt;format:string&gt;])</code></p> <p>The <code>datetime</code> function returns the current date and time. As a default, if not argument is provided, the function returns an ISO8901 timestamp. An optional format string can be provided. With this format string one can define the format for the output based on the format defined by Python's strftime() function.</p> <p>All timestamps are UTC-based.</p> Examples<pre><code>(datetime)          ;; Returns a timestamp, e.g. 20230302T221625.771604\n(datetime \"%H:%M\")  ;; Returns, for example, \"22:16\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#defun","title":"defun","text":"<p><code>(defun &lt;function name&gt; &lt;parameter list&gt; &lt;function body&gt;)</code></p> <p>The <code>defun</code> function defines a new function. </p> <p>The first argument to this function is a string and specifies the new function's name. A function definition overrides already user-defined or built-in functions with the same name.</p> <p>The second argument is a symbol list with argument names for the function. Arguments act as function-local variables that can be used in the function body.</p> <p>The third argument is an s-expression that is evaluated as the function body. </p> <p>The result of a function is the result of the expression that is evaluated last in a function evaluation.</p> <p>See also</p> <p>lambda, return</p> Example<pre><code>(defun greeting (name)  ;; define the function\n    (print \"hello\" name)) \n(greeting \"Arthur\")     ;; call the function\n\n;; Fibonacci\n(defun fib (n)          ;; Define the function\n    (if (&lt; n 2)\n        n\n        (+ (fib (- n 1)) \n           (fib (- n 2)))\n    ))\n(fib 10)                ;; Returns 55\n</code></pre>"},{"location":"development/ACMEScript-functions/#dec","title":"dec","text":"<p><code>(dec &lt;variable&gt; [&lt;value:number&gt;])</code></p> <p>The <code>dec</code> function decrements a variable. The default for the increment is 1, but can be given as an optional second argument. If this argument is  provided then the variable is decremented by this value. The value can be an integer or a float.</p> <p>The function returns the variable's new value.</p> <p>See also</p> <p>inc</p> Examples<pre><code>(setq a 1)   ;; Set variable \"a\" to 1\n(dec a)      ;; Decrement variable \"a\" by 1\n(dec a 2.5)  ;; Decrement variable \"a\" by 2.5\n</code></pre>"},{"location":"development/ACMEScript-functions/#dolist","title":"dolist","text":"<p><code>(dolist (&lt;loop variable&gt; &lt;list:list or quoted list&gt; [&lt;result variable&gt;]) (&lt;s-expression&gt;+))</code></p> <p>The <code>dolist</code> function loops over a list. The first arguments is a list that contains a loop variable, a list to iterate over, and an optional <code>result</code> variable. The second argument is a list that contains one or more s-expressions that are executed in the loop.</p> <p>If the <code>result variable</code> is specified then the loop returns the value of that variable, otherwise <code>nil</code>.</p> <p>See also</p> <p>dotimes, while</p> Examples<pre><code>(dolist (i '(1 2 3 4 5 6 7 8 9 10))\n    (print i)                   ;; print 1..10\n\n(setq result 0)\n(dolist (i '(1 2 3 4 5 6 7 8 9 10) result)\n    (setq result (+ result i)))  ;; sum 1..10\n(print result)                   ;; 55\n</code></pre>"},{"location":"development/ACMEScript-functions/#dotimes","title":"dotimes","text":"<p><code>(dotimes (&lt;loop variable&gt; &lt;count:number&gt; [&lt;result variable&gt;]) (&lt;s-expression&gt;+))</code></p> <p>The <code>dotimes</code> function provides a simple numeric loop functionality. The first arguments is a list that contains a loop variable that starts at 0, the loop <code>count</code> (which must be a non-negative number), and an optional <code>result</code> variable. The second argument is a list that contains one or more s-expressions that are executed in the loop.</p> <p>If the <code>result variable</code> is specified then the loop returns the value of that variable, otherwise <code>nil</code>.</p> <p>See also</p> <p>dolist, while</p> Examples<pre><code>(dotimes (i 10)\n    (print i)                   ;; print 0..9\n\n(setq result 0)\n(dotimes (i 10 result)\n    (setq result (+ result i)))  ;; sum 0..9\n(print result)                   ;; 45\n</code></pre>"},{"location":"development/ACMEScript-functions/#eval","title":"eval","text":"<p><code>(eval &lt;quoted list&gt;)</code></p> <p>The <code>eval</code> function evaluates and executes a quoted list or symbol.</p> <p>See also</p> <p>parse-string, progn, to-symbol</p> Example<pre><code>(eval '(print \"Hello, World\"))  ;; Prints \"Hello, World\" \n</code></pre>"},{"location":"development/ACMEScript-functions/#evaluate-inline","title":"evaluate-inline","text":"<p><code>(evaluate-inline &lt;boolean&gt;)</code></p> <p>With this function one can disable or enable the evaluation of s-expressions in strings.</p> Example<pre><code>(evaluate-inline false)      ;; Disables inline evaluation\n(print \"1 + 2 = [(+ 1 2)]\")  ;; Prints \"1 + 2 = [(+ 1 2)]\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#filter","title":"filter","text":"<p><code>(filter &lt;function&gt; &lt;list&gt;)</code></p> <p>The <code>filter</code> function filters a list based on a function. The function is applied to each element of the list, and it must return a boolean value. If it returns true then the element is included in the result list, otherwise the element is excluded.</p> <p>See also</p> <p>map, reduce</p> Example<pre><code>(filter (lambda (x) (&lt; x 3)) '(1 2 3 4 5))  ;; Returns (1 2)\n</code></pre>"},{"location":"development/ACMEScript-functions/#fset","title":"fset","text":"<p><code>(fset &lt;function name&gt; &lt;function name or lambda&gt;)</code></p> <p>The <code>fset</code> function sets an alias for a function or a lambda function.</p> <p>The first argument is a quoted symbol that specifies the new function's name. The second argument is a quoted symbol that specifies the function to be aliased. The alias can also be a lambda function.</p> <p>Warning</p> <p>With the <code>fset</code> function one can override already user-defined or built-in functions with the same name.</p> <p>See also</p> <p>defun, lambda</p> Example<pre><code>(defun greeting (name)  ;; define the function\n    (print \"hello\" name))\n\n(fset 'hi 'greeting)    ;; set an alias\n(hi \"Arthur\")           ;; call the alias\n\n(fset 'hi (lambda (name) (print \"hi\" name)))  ;; set an alias with a lambda function\n(hi \"Arthur\")                                 ;; call the alias\n</code></pre>"},{"location":"development/ACMEScript-functions/#get-json-attribute","title":"get-json-attribute","text":"<p><code>(get-json-attribute &lt;JSON&gt; &lt;key:string&gt;)</code></p> <p>The <code>get-json-attribute</code> function retrieves an attribute from a JSON structure via a key path. This key may be a structured path to access elements deeper down in the JSON structure. There are the following extra elements to access more complex structures:</p> <ul> <li>It is possible to address a specific element in a list. This is done be  specifying the element as <code>{n}</code>.</li> <li>If an element is specified as <code>{}</code> then all elements in that list are returned in a list.</li> <li>If an element is specified as <code>{*}</code> and is targeting a dictionary then a single unknown key is skipped in the path. This can be used to skip, for example, unknown first elements in a structure. This is similar but not the same as <code>{0}</code> that works on lists.</li> </ul> <p>See also</p> <p>has-json-attribute, remove-json-attribute, set-json-attribute</p> Examples<pre><code>(get-json-attribute { \"a\" : { \"b\" : \"c\" }} \"a/b\" )     ;; Returns \"c\"\n(get-json-attribute { \"a\" : [ \"b\", \"c\" ]} \"a/{0}\" )    ;; Returns \"b\"\n(get-json-attribute { \"a\" : [ \"b\", \"c\" ]} \"a/{}\" )     ;; Returns ( \"b\" \"c\" )\n(get-json-attribute { \"a\" : [ \"b\", \"c\" ]} \"{*}/{0}\" )  ;; Returns \"b\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#has-json-attribute","title":"has-json-attribute","text":"<p><code>(has-json-attribute &lt;JSON&gt; &lt;key:string&gt;)</code></p> <p>The <code>has-json-attribute</code> function determines  whether an attribute exists in a JSON structure for a key path.  This key may be a structured path to access elements deeper down in the JSON structure. </p> <p>See also</p> <p>get-json-attribute, remove-json-attribute, [set-json-attribute]    (#set-json-attribute)</p> <p>See get-json-attribute for further details on how to access JSON attributes.</p> Examples<pre><code>(has-json-attribute { \"a\" : { \"b\" : \"c\" }} \"a/b\" )  ;; Returns true\n(has-json-attribute { \"a\" : { \"b\" : \"c\" }} \"a/c\" )  ;; Returns false\n</code></pre>"},{"location":"development/ACMEScript-functions/#if","title":"if","text":"<p><code>(if &lt;boolean expression&gt; &lt;s-expression&gt; [&lt;s-expression&gt;])</code></p> <p>The <code>if</code> function works like an \u201cif-then-else\u201d statement in other programing languages.  The first argument is a boolean expression. If it evaluates to true then the second argument is executed. If it evaluates to false then the third (optional) argument is executed, if present.</p> <p>The boolean expression can be any s-expression that evaluates to a boolean value or nil, or a list or a string. nil values, empty lists, or zero-length strings evaluate to false, or to true otherwise.</p> Examples<pre><code>(if (&lt; 1 2)           ;; Evaluates to \"true\"\n    (print \"true\")    ;; This expression is executed\n    (print \"false\"))  ;; This expression is not executed\n</code></pre>"},{"location":"development/ACMEScript-functions/#in","title":"in","text":"<p><code>(in &lt;symbol or list&gt; &lt;list or string&gt;)</code></p> <p>The <code>in</code> function determines whether a symbol or list is contained in a list, or whether a string is contained in another string.  The function returns true if this is the case, or false otherwise.</p> <p>See also</p> <p>index-of</p> Examples<pre><code>(in \"Hello\" \"Hello, World\")  ;; Returns true\n(in \"Bye\" \"Hello, World\")    ;; Returns false\n(in 1 '(1 2 3))              ;; Returns true\n(in '(1 2) '((1 2) (3 4)))   ;; Returns true\n</code></pre>"},{"location":"development/ACMEScript-functions/#inc","title":"inc","text":"<p><code>(inc &lt;variable symbol&gt; [&lt;value:number&gt;])</code></p> <p>The <code>inc</code> function increments a provided variable. The default for the increment is 1, but can be given as an optional second argument. If this argument is  provided then the variable is incremented by this value. The value can be an integer or a float.</p> <p>The function returns the variable's new value.</p> <p>See also</p> <p>dec</p> Example<pre><code>(setq a 1)   ;; Set variable \"a\" to 1\n(inc a)      ;; Increment variable \"a\" by 1\n(inc a 2.5)  ;; Increment variable \"a\" by 2.5\n</code></pre>"},{"location":"development/ACMEScript-functions/#index-of","title":"index-of","text":"<p><code>(index-of &lt;value&gt; &lt;list or string&gt;)</code></p> <p>The <code>index-of</code> function determines the index of a value in a list, or the index of a string in another string. If the second argument is a string then the first argument must be a string as well. The index is 0-based.</p> <p>The function returns the index as a number, or nil if the value could not be found.</p> <p>See also</p> <p>in, nth</p> Examples<pre><code>(index-of 1 '(1 2 3))            ;; Returns 0\n(index-of \"a\" '(\"b\", \"c\", \"d\"))  ;; Returns nil\n(index-of \"b\" \"abc\")             ;; Returns 1\n</code></pre>"},{"location":"development/ACMEScript-functions/#is-defined","title":"is-defined","text":"<p><code>(is-defined &lt;symbol&gt;</code>)</p> <p>The <code>is-defined</code> function tests whether a symbol (ie. a variable, built-in or defined function) is defined.</p> Examples<pre><code>(setq a 1)       ;; Define variable \"a\"\n(is-defined 'a)  ;; Evaluates to \"true\".\n(is-defined 'b)  ;; Evaluates to \"false\"\n</code></pre> <p>Note</p> <p>Most of the time the symbol argument needs to be quoted, otherwise the symbol is evaluated first and the function will not work as expected.</p>"},{"location":"development/ACMEScript-functions/#json-to-string","title":"json-to-string","text":"<p><code>(json-to-string &lt;JSON&gt;</code>)</p> <p>The <code>json-to-string</code> function returns a JSON structure in a string.</p> <p>See also</p> <p>string-to-json, to-number, to-string</p> Example<pre><code>(json-to-string { \"a\" : { \"b\" : \"c\" }})  ;; Returns \"{\\\"a\\\": {\\\"b\\\": \\\"c\\\"}}\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#jsonify","title":"jsonify","text":"<p><code>(jsonify &lt;string&gt;</code>)</p> <p>The <code>jsonify</code> function returns a string where characters are escaped that would otherwise break a JSON structure.</p> <p>See also</p> <p>string-to-json, to-number, to-string</p> Example<pre><code>(jsonify \"Hello, World\")  ;; Returns \"Hello,\\nWorld\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#lambda","title":"lambda","text":"<p><code>(lambda &lt;parameter list&gt; &lt;function body&gt;)</code></p> <p>The <code>lambda</code> function defines a new nameless function. </p> <p>It is similar to the defun function, with the difference that functions defined as lambda functions cannot be called by name. They need to be used directly, assigned to a variable, or passed, for example, in a function call.</p> <p>The first argument is a symbol list with argument names for the lambda function. Arguments act as function-local variables that can be used in the function body.</p> <p>The second argument is an s-expression that is evaluated as the function body. </p> <p>The result of a lambda function is the result of the expression that is evaluated last in a function evaluation.</p> <p>See also</p> <p>defun, fset, return</p> Examples<pre><code>((lambda (x) (* x x)) 5)       ;; Returns 25\n\n(setq y (lambda (x) (* x x)))  ;; Define and assign lambda function\n(y)                            ;; Returns ( ( x ) ( * x x ) )\n((y) 5)                        ;; Returns 25\n</code></pre> <p>The fset function can be used to assign a lambda function to a symbol for easier use.</p> Example<pre><code>(fset 'square (lambda (x) (* x x)))  ;; Assign lambda function to symbol\n(square 5)                           ;; Returns 25\n</code></pre>"},{"location":"development/ACMEScript-functions/#length","title":"length","text":"<p><code>(length &lt;string or list&gt;</code>)</p> <p>The <code>length</code> function returns the length of a string or the number of elements in a list.</p> Examples<pre><code>(length \"Hello, World\")  ;; Returns 12\n(length '(1 2 3))        ;; Returns 3\n</code></pre> <p></p>"},{"location":"development/ACMEScript-functions/#let","title":"let*","text":"<p><code>(let* [( &lt;variable&gt; &lt;s-expression&gt; )]+</code>)</p> <p>The <code>let*</code> function let one assigns values to variables in multiple steps. </p> <p>Each assignment consists, like the setq function, of an implicit quoted list with a variable symbol and an s-expression, but differently from the setq function, the <code>let*</code> function handles multiple assignments. The assignments are handled sequentially.</p> <p>Note</p> <p>The <code>let</code> function (without the star), where assignments are handled in parallel is yet not supported.</p> <p>See also</p> <p>setq</p> Examples<pre><code>(let* (a 1)         ;; Assigns 1 to a\n    (a (+ a 1)))    ;; Assigns a + 1 = 2 to a\n(let* (b 2) (c 3))  ;; Assigns 2 to b and 3 to c\n</code></pre>"},{"location":"development/ACMEScript-functions/#list","title":"list","text":"<p><code>(list &lt;symbol&gt;+)</code></p> <p>The <code>list</code> function returns a list that contains all the symbol arguments.</p> <p>See also</p> <p>cons</p> Example<pre><code>(list 1 2 3)  ;; Returns ( 1 2 3 )\n</code></pre>"},{"location":"development/ACMEScript-functions/#log","title":"log","text":"<p><code>(log &lt;s-expression&gt;*)</code></p> <p>The <code>log</code> function prints symbols to the logging console with a debug log-level. Usually these symbols are strings or numbers, but representations of other data types are supported as well.</p> <p>The function always returns nil.</p> <p>See also</p> <p>log-error, print</p> Example<pre><code>(log \"Hello, World\")  ;; Prints \"Hello, World\" to the log\n</code></pre>"},{"location":"development/ACMEScript-functions/#log-error","title":"log-error","text":"<p><code>(log &lt;s-expression&gt;*)</code></p> <p>The <code>log-error</code> function prints symbols to the logging console with an warning log-level. Usually these symbols are strings or numbers, but representations of other data types are supported as well.</p> <p>The function always returns nil.</p> <p>See also</p> <p>log, print</p> Example<pre><code>(log-error \"Hello, World\")  ;; Prints \"Hello, World\" to the warning log\n</code></pre>"},{"location":"development/ACMEScript-functions/#lower","title":"lower","text":"<p><code>(lower &lt;string&gt;</code>)</p> <p>The <code>lower</code> function returns a lower case copy of the input string.</p> <p>See also</p> <p>upper</p> Example<pre><code>(lower \"Hello, World\")  ;; Returns \"hello, world\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#map","title":"map","text":"<p><code>(map &lt;function&gt; &lt;list&gt;+)</code></p> <p>The <code>map</code> function iterates over one or more lists and applies a function to each element of the list(s). The function must take as many arguments as there are lists provided. The shortest list determines the number of iterations.</p> <p>The function could be a lambda, built-in or user-defined function.</p> <p>Note</p> <p>The <code>map</code> function's arguments need to be quoted when used directly.</p> <p>See also</p> <p>reduce, zip</p> Examples<pre><code>(map (lambda (x) (+ x 1)) '(1 2 3))  ;; Returns (2 3 4)\n(map '+ '(1 2 3) '(4 5 6))           ;; Returns (5 7 9)\n</code></pre>"},{"location":"development/ACMEScript-functions/#match","title":"match","text":"<p><code>(match &lt;string&gt; &lt;regex:string&gt;</code>)</p> <p>The <code>match</code> function determines whether a string matches a regular expression regex.</p> <p>Note</p> <p>The default implementation supports a simplified regex operator set:</p> <ul> <li><code>?</code> : any single character</li> <li><code>*</code> : zero or more characters</li> <li><code>+</code> : one or more characters</li> <li><code>\\</code> : Escape an expression operator</li> </ul> Examples<pre><code>(match \"aa\" \"a?\")  ;; Returns true\n(match \"aa\" \"b*\")  ;; Returns false\n</code></pre>"},{"location":"development/ACMEScript-functions/#max","title":"max","text":"<p><code>(max &lt;list&gt;+ | &lt;any value&gt;+ )</code></p> <p>The <code>max</code> function returns the maximum value of a list of any comparable values. The function can take a list of values or any number of values as arguments.</p> Examples<pre><code>(max 1 2 3)              ;; Returns 3\n(max '(1 2 3))           ;; Returns 3\n(max '(1 2 3) '(4 5 6))  ;; Returns (4 5 6)\n(max 1 2 3 4 5 6)        ;; Returns 6\n</code></pre> <p>See also</p> <p>min</p>"},{"location":"development/ACMEScript-functions/#min","title":"min","text":"<p><code>(min &lt;list&gt;+ | &lt;any value&gt;+ )</code></p> <p>The <code>min</code> function returns the minimum value of a list of any comparable values. The function can take a list of values or any number of values as arguments.</p> Examples<pre><code>(min 1 2 3)              ;; Returns 1\n(min '(1 2 3))           ;; Returns 1\n(min '(1 2 3) '(4 5 6))  ;; Returns (1 2 3)\n(min 1 2 3 4 5 6)        ;; Returns 1\n</code></pre>"},{"location":"development/ACMEScript-functions/#nl","title":"nl","text":"<p><code>(nl)</code></p> <p>The <code>nl</code> function returns a newline character.</p> <p>See also</p> <p>print,  sp</p> Example<pre><code>(. \"Hello,\" nl \"World\")  ;; Returns \"Hello,\\nWorld\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#nth","title":"nth","text":"<p><code>(nth &lt;index:number&gt; &lt;list or string&gt;</code>)</p> <p>The <code>nth</code> function returns the n-th element from a list, or the nth character from a string.</p> <p>The index is 0-based.</p> <p>See also</p> <p>car,  cdr, index-of</p> Examples<pre><code>(nth 2 '(1 2 3))        ;; Returns 3\n(nth 2 \"Hello, World\")  ;; Returns \"l\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#parse-string","title":"parse-string","text":"<p><code>(parse-string &lt;string with an &lt;s-expression&gt;)</code></p> <p>The <code>parse-string</code> function parses a string that contains an s-expression and returns the result as an executable s-expression for further evaluation, e.g. with the eval function.</p> <p>See also</p> <p>eval, to-symbol</p> Example<pre><code>(eval (parse-string \"(print \\\"hello, world\\\")\"))  ;; Prints \"hello, world\" \n</code></pre>"},{"location":"development/ACMEScript-functions/#print","title":"print","text":"<p><code>(print &lt;s-expression&gt;*)</code></p> <p>The <code>print</code> function prints symbols to the console. Usually these symbols are strings or numbers, but representations of other data types are supported as well.</p> <p>The function always returns nil.</p> <p>See also</p> <p>log, log-error</p> Example<pre><code>(print \"Hello, World\")  ;; Prints \"Hello, World\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#progn","title":"progn","text":"<p><code>(progn &lt;s-expression&gt;+)</code></p> <p>The <code>progn</code> function evaluates all provided symbols or lists, and returns the result of the last evaluation. All other results are ignored.</p> <p>This function is implicitly used internally when used to evaluate s-expressions.</p> <p>See also</p> <p>eval</p> Example<pre><code>(progn (print \"Hello, World\") 1)  ;; Prints \"Hello, World\" and returns 1\n</code></pre>"},{"location":"development/ACMEScript-functions/#quit","title":"quit","text":"<p><code>(quit [&lt;symbol&gt;])</code></p> <p>The <code>quit</code> function ends the execution of the current script without an 0 error code.</p> <p>If a symbol is provided for the optional argument its value is taken as the result of the script. Otherwise, nil is returned.</p> <p>See also</p> <p>quit-with-error</p> Examples<pre><code>(quit)             ;; Returns nil\n(quit \"a result\")  ;; Returns \"a result\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#quit-with-error","title":"quit-with-error","text":"<p><code>(quit-with-error [&lt;symbol&gt;])</code></p> <p>The <code>quit-with-error</code> function ends the execution of the current script with an -1 error code.</p> <p>If a symbol is provided for the optional argument its value is taken as the result of the script. Otherwise, nil is returned.</p> <p>See also</p> <p>quit</p> Examples<pre><code>(quit-with-error)             ;; Returns nil\n(quit-with-error \"a result\")  ;; Returns \"a result\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#quote","title":"quote","text":"<p><code>(quote  &lt;symbol or list&gt;)</code></p> <p>The <code>quote</code> function returns a quoted version of the argument. It can be used to get a quoted version of an s-expression or symbol that is the result of another function.</p> Example<pre><code>(quote (1 2 3))  ;; Returns (1 2 3)\n</code></pre>"},{"location":"development/ACMEScript-functions/#random","title":"random","text":"<p><code>(random [&lt;end:number&gt; or &lt;start:number&gt; &lt;end:number&gt;])</code></p> <p>The <code>random</code> function generates a random float number in the given range. </p> <p>The default for the range, when no argument is given, is [0.0, 1.0]. If one number argument is given then this indicates a range of [0.0, &lt;end number&gt;]. If two number arguments are given then this indicates a range of [&lt;start number&gt;, &lt;end number&gt;].</p> Examples<pre><code>(random)         ;; Returns, for example, 0.748786\n(random 10)      ;; Returns, for example, 4.976338\n(random 10 20)   ;; returns, for example, 12.73221\n</code></pre>"},{"location":"development/ACMEScript-functions/#reduce","title":"reduce","text":"<p><code>(reduce &lt;function&gt; &lt;list&gt; [&lt;initial value&gt;])</code></p> <p>The <code>reduce</code> function applies a function to all elements of a list, starting with an optional initial value. The function is applied to the first two elements of the list, then to the result of the first application and the third element, and so on. If no initial value is provided, the first element of the list is used as the initial value, otherwise the initial value is used as the first argument.</p> <p>The &lt;function&gt; could be a lambda, built-in or user-defined function. The function must take two arguments.</p> <p>The optional initial value or the first element of the list, if no initial value is provided, determines the type for all further calculations. If the initial value is a number then the result is a number, if it is a string then the result is a string, and so on. All elements of the list must be of that type, otherwise the function will fail.</p> <p>Note</p> <p>The <code>reduce</code> function's arguments need to be quoted when used directly.</p> <p>See also</p> <p>map, zip</p> Examples<pre><code>(reduce (lambda (x y) (+ x y)) '(1 2 3 4 5))  ;; Returns 15\n(reduce '+ '(1 2 3 4 5) 10)                   ;; Returns 25\n</code></pre>"},{"location":"development/ACMEScript-functions/#remove-json-attribute","title":"remove-json-attribute","text":"<p><code>(remove-json-attribute &lt;JSON&gt; &lt;key:string&gt;+)</code></p> <p>The <code>remove-json-attribute</code> function removes one or more attributes and their values from a JSON structure via their key paths. This key may be a structured path to access elements deeper down in the JSON structure. See get-json-attribute for further details on how to access JSON attributes.</p> <p>The function doesn't change the original JSON structure, but returns an updated structure.</p> <p>See also</p> <p>get-json-attribute, has-json-attribute, set-json-attribute</p> Examples<pre><code>(remove-json-attribute { \"a\" : { \"b\" : \"c\" }} \"a/b\")  ;; Returns { \"a\" : {} }\n</code></pre>"},{"location":"development/ACMEScript-functions/#return","title":"return","text":"<p><code>(return [&lt;s-expression&gt;])</code></p> <p>The <code>return</code> function stops the evaluation of a function or while loop and returns the evaluation to the caller. The function may return a symbol, or nil.</p> <p>See also</p> <p>defun, while</p> Example<pre><code>(if (&lt; 1 2)      ;; Evaluates to \"true\"\n    (return 23)  ;; Return the number 23\n)\n</code></pre>"},{"location":"development/ACMEScript-functions/#return-from","title":"return-from","text":"<p><code>(return-from &lt;block name:string&gt; [&lt;s-expression&gt;])</code></p> <p>The <code>return-from</code> function stops the evaluation of a block with the given name and returns the evaluation to the caller. </p> <p>The function may return a symbol, or nil.</p> <p>See also</p> <p>block</p> Examples<pre><code>(block \"myBlock\" 1 (return-from \"myBlock\" 2) 3)  ;; Returns 2\n</code></pre>"},{"location":"development/ACMEScript-functions/#reverse","title":"reverse","text":"<p><code>(reverse &lt;list&gt; | &lt;string&gt;)</code></p> <p>The <code>reverse</code> function returns a reversed copy of a list or a string.</p> Examples<pre><code>(reverse '(1 2 3))    ;; Returns (3 2 1)\n(reverse \"abc\")       ;; Returns \"cba\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#round","title":"round","text":"<p><code>(round &lt;value:number&gt; [&lt;precission:number&gt;])</code></p> <p>The <code>round</code> function rounds a number to precision digits after the decimal point. The default is 0, meaning to round to nearest integer.</p> Examples<pre><code>(round 3.1415926)    ;; Returns 3\n(round 3.1415926 2)  ;; Returns 3.14\n</code></pre>"},{"location":"development/ACMEScript-functions/#set-json-attribute","title":"set-json-attribute","text":"<p><code>(set-json-attribute &lt;JSON&gt; &lt;key:string&gt; &lt;value&gt;)</code> <code>(set-json-attribute &lt;JSON&gt; '( '(&lt;key:string&gt; &lt;value&gt;)* )</code></p> <p>The <code>set-json-attribute</code> function adds or updates an attribute in a JSON structure via a key path to the new value. This key may be a structured path to access elements deeper down in the JSON structure. See get-json-attribute for further details on how to access JSON attributes.</p> <p>There are two forms to use this function:</p> <ul> <li>The first form takes a JSON structure, a key path, and a value as arguments. The function sets the attribute in the JSON structure and returns the updated structure.</li> <li> <p>The second form takes a JSON structure and a list of list of key-value pairs as arguments. The function sets the attributes in the JSON structure and returns the updated structure. This form is useful when multiple attributes need to be set in one call.</p> <p>Note</p> <p>The list as well as each list of key-value pairs need to be quoted if provided directly.</p> </li> </ul> <p>The function doesn't change the original JSON structure, but returns an updated structure.</p> <p>See also</p> <p>get-json-attribute, has-json-attribute, remove-json-attribute</p> Examples<pre><code>(set-json-attribute { \"a\" : { \"b\" : \"c\" }} \"a/b\" \"e\")  ;; Returns {\"a\": {\"b\": \"e\"}}\n(set-json-attribute { \"a\" : { \"b\" : \"c\" }} '('(\"a/b\" \"d\") '(\"a/c\" \"e\")))  ;; Returns { \"a\" : { \"b\" : \"d\", \"c\" : \"e\"}\n</code></pre>"},{"location":"development/ACMEScript-functions/#setq","title":"setq","text":"<p><code>(setq &lt;variable&gt; &lt;s-expression)</code></p> <p>The <code>setq</code> function assigns a value to a variable.</p> <p>See also</p> <p>let*</p> Example<pre><code>(setq a \"Hello, World\")  ;; Returns \"Hello, World\" and sets the variable \"a\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#sleep","title":"sleep","text":"<p><code>(sleep &lt;number&gt;)</code></p> <p>The <code>sleep</code> function adds a delay to the script execution. The evaluation stops for a number of seconds. The delay could be provided as an integer or float number.</p> <p>If the script execution timeouts during a sleep, the function is interrupted and all subsequent s-expressions are not evaluated.</p> <p>The function returns the delay.</p> Example<pre><code>(sleep 1.5)  ;; Sleep for 1.5 seconds\n</code></pre>"},{"location":"development/ACMEScript-functions/#slice","title":"slice","text":"<p><code>(slice &lt;start:number&gt; &lt;end:number&gt; &lt;list or string&gt;)</code></p> <p>The <code>slice</code> function returns the slice of a list or a string.</p> <p>The behavior is the same as slicing in Python, except that both start and end must be provided. The first argument is the start (including) of the slice, the second is the end (excluding) of the slice. The fourth argument is the list or string to slice.</p> Examples<pre><code>(slice 1 2 '(1 2 3))     ;; Returns (2)\n(slice 0 -1 \"abcde\")     ;; Returns \"abcd\"\n(slice -1 99 \"abcde\")    ;; Returns \"e\"\n(slice 99 100 '(1 2 3))  ;; Returns ()\n</code></pre>"},{"location":"development/ACMEScript-functions/#sp","title":"sp","text":"<p><code>(sp)</code></p> <p>The <code>sp</code> function returns a space character.</p> <p>See also</p> <p>print,  nl</p> Example<pre><code>(. \"Hello,\" sp \"World\")  ;; Returns \"Hello, World\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#string-to-json","title":"string-to-json","text":"<p><code>(string-to-json &lt;string&gt;)</code></p> <p>The <code>string-to-json</code> function converts a string to a JSON structure and returns it. The string must contain a valid parseable JSON structure.</p> <p>See also</p> <p>json-to-string, to-number, jsonify</p> Example<pre><code>(string-to-json \"{ \\\"a\\\" : { \\\"b\\\" : \\\"c\\\" }}\")  ;; Returns {\"a\": {\"b\": \"c\"}}\n</code></pre>"},{"location":"development/ACMEScript-functions/#to-number","title":"to-number","text":"<p><code>(to-number &lt;symbol&gt;)</code></p> <p>The <code>to-number</code> function converts a string that contains a number to a number symbol and returns it.</p> <p>See also</p> <p>json-to-string,  to-string</p> Example<pre><code>(to-number \"123\")  ;; Returns the number 123\n</code></pre>"},{"location":"development/ACMEScript-functions/#to-string","title":"to-string","text":"<p><code>(to-string &lt;symbol&gt;)</code></p> <p>The <code>to-string</code> function converts a symbol of any of the built-in types to a string representation and returns it.</p> <p>See also</p> <p>json-to-string, to-number</p> Example<pre><code>(to-string '(1 2))  ;; Returns \"[1, 2]\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#to-symbol","title":"to-symbol","text":"<p><code>(to-symbol &lt;string&gt;)</code></p> <p>The <code>to-symbol</code> function converts a string to a symbol and returns it. The resulting symbol has the name and value of the input string, but is itself not a string.</p> <p>See also</p> <p>eval, parse-string, parse-string</p> Example<pre><code>(to-symbol \"a-symbol\")  ;; Returns the symbol 'a-symbol'\n</code></pre>"},{"location":"development/ACMEScript-functions/#unwind-protect","title":"unwind-protect","text":"<p><code>(unwind-protect &lt;s-expression&gt; &lt;cleanup s-expression&gt;)</code></p> <p>The <code>unwind-protect</code> function evaluates the first s-expression and then the second s-expression.  The second s-expression is always evaluated, even if the first s-expression throws an error or returns early. This is effectively a try/finally block (without a catch)</p> <p>Currently only programmatic flow interrupts are supported to trigger the cleanup form: assert, quit, quit-with-error, return, return-from.</p> <p>The function always returns the result of the cleanup s-expression.</p> Example<pre><code>;; Prints \"main form\" and \"cleanup form\" and returns 2\n(unwind-protect\n    ((print \"main form\") 1)\n    ((print \"cleanup form\") 2))\n</code></pre>"},{"location":"development/ACMEScript-functions/#upper","title":"upper","text":"<p><code>(upper &lt;string&gt;</code>)</p> <p>The <code>upper</code> function returns an upper case copy of the input string.</p> <p>See also</p> <p>lower</p> Example<pre><code>(upper \"Hello, World\")  ;; Returns \"HELLO, WORLD\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#url-encode","title":"url-encode","text":"<p><code>(url-encode &lt;string&gt;)</code></p> <p>The <code>url-encode</code> function encodes a string so that may be safely used as part of a URL.</p> <p>See also</p> <p>base64-encode</p> Example<pre><code>(url-encode \"Hello, World\")  ;; Returns \"Hello%2C+World\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#while","title":"while","text":"<p><code>(while &lt;boolean guard&gt; &lt;body s-expression&gt;</code>)</p> <p>The <code>while</code> function implements a loop functionality.</p> <p>A <code>while</code> loop continues to run when the first guard s-expression evaluates to true. Then the body s-expression is evaluated. After this the guard is evaluated again and the the loops continues or the <code>while</code> function returns.</p> <p>The boolean guard can be any s-expression that evaluates to a boolean value or nil, or a list or a string. nil values, empty lists, or zero-length strings evaluate to false, or to true otherwise.</p> <p>The <code>while</code> function returns the result of the last evaluated s-expression in the body.</p> <p>See also</p> <p>dolist, dotime, return</p> Example<pre><code>(setq i 0)       ;; Set loop variable\n(while (&lt; i 10)  ;; Loop 10 times\n    ((print i)   ;; Print to the console\n    (inc i)))    ;; Increment loop variable\n</code></pre>"},{"location":"development/ACMEScript-functions/#zip","title":"zip","text":"<p><code>(zip &lt;list&gt;+)</code></p> <p>The <code>zip</code> function takes a list of lists and returns a list of lists where the first element of each input list is combined into a new list, the second element of each input list is combined into a new list, and so on. The function stops when the shortest list is exhausted.</p> <p>See also</p> <p>map, reduce</p> Examples<pre><code>(zip '(1 2 3) '(4 5 6))  ;; Returns ((1 4) (2 5) (3 6))\n(zip '(1 2 3) '(4 5))    ;; Returns ((1 4) (2 5))\n(zip '(1 2 3))           ;; Returns ((1) (2) (3))\n</code></pre>"},{"location":"development/ACMEScript-functions/#cse-specific-functions","title":"CSE-Specific Functions","text":"<p>The following functions provide support to access certain CSE functionalities, configurations, and other runtime aspects.</p>"},{"location":"development/ACMEScript-functions/#clear-console","title":"clear-console","text":"<p><code>(clear-console)</code></p> <p>The <code>clear-console</code> function clears the console screen.</p> <p>If the Text UI is currently active and the current script is running as a TUI Tool, then the scripts output console is cleared.</p> Example<pre><code>(clear-console)  ;; Clears the console screen\n</code></pre>"},{"location":"development/ACMEScript-functions/#cse-attribute-info","title":"cse-attribute-info","text":"<p><code>(cse-attribute-info &lt;name:str&gt;)</code></p> <p>Return a list of CSE attribute infos for the attribute `name``.  The search is done over the short and long names of the attributes applying a fuzzy search when searching the long names.</p> <p>The function returns a quoted list where each entry is another quoted list with the following symbols:</p> <ul> <li>attribute short name</li> <li>attribute long name</li> <li>attribute type</li> </ul> Example<pre><code>(cse-attribute-info \"acop\")  ;; Returns ( ( \"acop\" \"accessControlOperations\" \"nonNegInteger\" ) )\n</code></pre>"},{"location":"development/ACMEScript-functions/#cse-status","title":"cse-status","text":"<p><code>(cse-status)</code></p> <p>The <code>cse-status</code> function returns the CSE's current running status as an upper-case string. </p> <p>The return value is one of the following strings:</p> <ul> <li>STARTING</li> <li>RUNNING</li> <li>STOPPING </li> <li>STOPPED </li> <li>RESETTING</li> </ul> Example<pre><code>(cse-status)  ;; Returns \"RUNNING\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#get-config","title":"get-config","text":"<p><code>(get-config &lt;key:string&gt;)</code></p> <p>The <code>get-config</code> function retrieves a configuration setting from the CSE's internal configuration.  The key is a configuration setting's name in Dot Notation.</p> <p>See also</p> <p>has-config, set-config Configuration's Dot Notation</p> Examples<pre><code>(get-config \"cse.type\")    ;; Returns, for example, 1\n(get-config \"cse.cseID\")   ;; Returns, for example, \"/id-in\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#get-loglevel","title":"get-loglevel","text":"<p><code>(get-loglevel)</code></p> <p>The <code>get-loglevel</code> function retrieves a the CSE's current log level setting. The return value is one of the following strings:</p> <ul> <li>DEBUG</li> <li>INFO</li> <li>WARNING</li> <li>ERROR</li> <li>OFF</li> </ul> Example<pre><code>(get-loglevel)  ;; Return, for example, INFO\n</code></pre>"},{"location":"development/ACMEScript-functions/#get-storage","title":"get-storage","text":"<p><code>(get-storage &lt;key:string&gt;)</code></p> <p>The <code>get-storage</code> function retrieves a value from the CSE's internal script-data storage. The key is a unique name of the value.</p> <p>See also</p> <p>has-storage, put-storage, remove-storage</p> Example<pre><code>(get-storage \"aStorageID\" \"aKey\")  ;; Retrieves the value for \"aKey\" from \"aStorageID\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#has-config","title":"has-config","text":"<p><code>(has-config &lt;key:string&gt;)</code></p> <p>The <code>has-config</code> function determines whether a configuration setting from the CSE's internal configuration exists. The key is a configuration setting's name in Dot Notation.</p> <p>See also</p> <p>get-config, set-config Configuration's Dot Notation</p> Examples<pre><code>(has-config \"cse.cseID\")     ;; Returns true\n(has-config \"cse.unknown\")   ;; Returns false\n</code></pre>"},{"location":"development/ACMEScript-functions/#has-storage","title":"has-storage","text":"<p><code>(has-storage &lt;key:string&gt;)</code></p> <p>The <code>has-storage</code> function determines whether a value has been stored under the given key in the CSE's internal script-data storage.</p> <p>See also</p> <p>get-storage, put-storage, remove-storage</p> Example<pre><code>(has-storage \"aStorageID\" \"aKey\")       ;; Tests whether the key \"aKey\" exists in \"aStorageID\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#include-script","title":"include-script","text":"<p><code>(include-script &lt;script name:string&gt; [&lt;argument:any&gt;]*)</code></p> <p>The <code>include-script</code> function runs another ACMEScript script by its script name in its own context. Differently to the run-script function variables, function definitions etc from the script execution are available in the calling script after the script finished.</p> <p>The function returns the result of the finished script.</p> <p>See also</p> <p>run-script, schedule-next-script</p> Example<pre><code>(include-script \"functions\" \"an argument\")  ;; Run the script \"functions\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#log-divider","title":"log-divider","text":"<p><code>(log-divider [&lt;message:string&gt;])</code></p> <p>The <code>log-divider</code> function inserts a divider line in the CSE's DEBUG log. It can help to easily identify the different sections when working with many requests. An optional (short) message can be provided in the argument.</p> Examples<pre><code>(log-divider)                 ;; Add a divider\n(log-divider \"Hello, World\")  ;; Add a divider with a centered message\n</code></pre>"},{"location":"development/ACMEScript-functions/#print-json","title":"print-json","text":"<p><code>(print-json &lt;JSON&gt;)</code></p> <p>The <code>print-json</code> function prints a JSON structure with syntax highlighting to the console.</p> Example<pre><code>(print-json { \"m2m:cnt\" : { \"rn\": \"myCnt\" }})  ;; Print the JSON structure\n</code></pre>"},{"location":"development/ACMEScript-functions/#put-storage","title":"put-storage","text":"<p><code>(put-storage &lt;storageID:string&gt; &lt;key:string&gt; &lt;value:symbol&gt;)</code></p> <p>The <code>put-storage</code> function inserts or updates a value in the CSE's internal script-data storage with the storage ID storageID. The key is a unique name of the value.</p> <p>See also</p> <p>get-storage, has-storage, remove-storage</p> Example<pre><code>(put-storage \"aStorageID\" \"aKey\" \"Hello, World\")  ;; Inserts or updates the key \"aKey\" in \"aStorageID\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#refresh-registrations","title":"refresh-registrations","text":"<p><code>(refresh-registrations)</code></p> <p>The <code>refresh-registrations</code> function refreshes the CSE's registrations with the remote registrar CSE(s). This is useful when the CSE's configuration has changed and the registrations need to be updated, or the regular registration refresh is disabled.</p> <p>The function returns nil.</p> Example<pre><code>(refresh-registrations)  ;; Refreshes the registrations with the remote registrar CSE(s)\n</code></pre>"},{"location":"development/ACMEScript-functions/#remove-storage","title":"remove-storage","text":"<p><code>(remove-storage &lt;key:string&gt;)</code> <code>(remove-storage &lt;storageID:string&gt; &lt;key:string&gt;)</code></p> <p>There are two forms of the <code>remove-storage</code> function.</p> <p>With only one parameter the <code>remove-storage</code> function removes all key/value pairs from the CSE's internal script-data storage with the storage ID storageID. </p> <p>With two parameters the <code>remove-storage</code> function removes a key/value pair from the CSE's internal script-data storage with the storage ID storageID. The key is a unique name of the value.</p> <p>See also</p> <p>get-storage, has-storage, put-storage</p> Examples<pre><code>(remove-storage \"aStorageID\" \"aKey\")  ;; Removes the key and value from storageID\n(remove-storage \"aStorageID\")         ;; Removes all keys and value from storageID\n</code></pre>"},{"location":"development/ACMEScript-functions/#reset-cse","title":"reset-cse","text":"<p><code>(reset-cse)</code></p> <p>The <code>reset-cse</code> function initiates a CSE reset.</p> <p>The script execution does continue after the CSE finished the reset.</p> Example<pre><code>(reset-cse)  ;; Resets the CSE\n</code></pre>"},{"location":"development/ACMEScript-functions/#restart-cse","title":"restart-cse","text":"<p><code>(restart-cse)</code></p> <p>The <code>restart-cse</code> function initiates a CSE restart. The script execution does continue after the CSE started to initiate the restart, but may be affected by the restart process.</p> <p>The <code>restart-cse</code> function initiates a CSE shutdown, with the difference that the CSE will terminate with a status code of <code>82</code> instead of <code>0</code>.</p> <p>See also</p> <p>shutdown-cse, Management API - restart</p> Example<pre><code>(restart-cse)  ;; Initiates the CSE restart/shutdown\n</code></pre>"},{"location":"development/ACMEScript-functions/#run-script","title":"run-script","text":"<p><code>(run-script &lt;script name:string&gt; [&lt;argument:any&gt;]*)</code></p> <p>The <code>run-script</code> function runs another ACMEScript script by its script name in its own scope. Variables, function definitions etc from the script execution are not available in the calling script.</p> <p>The function returns the result of the finished script.</p> <p>See also</p> <p>include-script, schedule-next-script</p> Example<pre><code>(setq result (run-script \"aScript\" \"an argument\"))  ;; Run the script \"aScript\" and assign the result\n</code></pre>"},{"location":"development/ACMEScript-functions/#runs-in-ipython","title":"runs-in-ipython","text":"<p><code>(runs-in-ipython)</code></p> <p>The <code>runs-in-ipython</code> function determines whether the CSE currently runs in an IPython environment, such as Jupyter Notebooks.</p> Example<pre><code>(runs-in-ipython)  ;; Returns true if the CSE runs in an iPython environment\n</code></pre>"},{"location":"development/ACMEScript-functions/#schedule-next-script","title":"schedule-next-script","text":"<p><code>(schedule-next-script &lt;scriptName:string&gt; &lt;argument:any&gt;*)</code></p> <p>The <code>schedule-next-script</code> function schedules the next script that is run after the current script finished. </p> <p>This is different from include-script and run-script in so far that the context of the current running script is finished and may be called again. This means that a script can schedule itself, which would not be possible otherwise because scripts can only be run one at a time.</p> <p>See also</p> <p>include-script, run-script</p> Example<pre><code>(schedule-next-script \"scriptName\" \"anArgument\")  ;; Schedule a script with an argument\n</code></pre>"},{"location":"development/ACMEScript-functions/#shutdown-cse","title":"shutdown-cse","text":"<p><code>(shutdown-cse)</code></p> <p>The <code>shutdown-cse</code> function initiates a CSE shutdown. The CSE will terminate with a status code of <code>0</code>. The script execution does continue after the CSE started to initiate the shutdown, but may be affected by the shutdown process.</p> <p>See also</p> <p>restart-cse, Management API - shutdown</p> Example<pre><code>(shutdown-cse)  ;; Initiates the CSE shutdown\n</code></pre>"},{"location":"development/ACMEScript-functions/#set-config","title":"set-config","text":"<p><code>(set-config &lt;key:string&gt; &lt;value:any&gt;)</code></p> <p>The <code>set-config</code> function updates a configuration setting from the CSE's internal configuration.  The key is a configuration setting's name in Dot Notation.</p> <p>It is only possible to update an existing setting, but not to create a new one. The value type must be equivalent to the setting's type.</p> <p>See also</p> <p>get-config, has-config Configuration's Dot Notation</p> Example<pre><code>(set-config \"cse.checkExpirationsInterval\" 1.5)  ;; Set the configuration to 1.5\n</code></pre>"},{"location":"development/ACMEScript-functions/#set-console-logging","title":"set-console-logging","text":"<p><code>(set-console-logging &lt;boolean&gt;)</code></p> <p>The <code>set-console-logging</code> function enables or disables console logging. It does not turn on or off logging in general. Printing to the console is not affected.</p> Example<pre><code>(set-console-logging false)  ;; Switch off console logging\n</code></pre>"},{"location":"development/ACMEScript-functions/#onem2m-specific-functions","title":"oneM2M-Specific Functions","text":"<p>The following functions provide support for the oneM2M request operations.</p>"},{"location":"development/ACMEScript-functions/#create-resource","title":"create-resource","text":"<p><code>(create-resource &lt;originator:string&gt; &lt;resource-id:string&gt; &lt;resource:JSON&gt; [request arguments:JSON])</code></p> <p>The <code>create-resource</code> function sends a oneM2M CREATE request to a target resource.</p> <p>The function has the following arguments:</p> <ul> <li>originator of the request</li> <li>The target resource-id</li> <li>The resource JSON structure</li> <li>Optional: A JSON structure  with additional request arguments</li> </ul> <p>The function will provide defaults for the required request arguments (e.g. rvi, rid). These can be overwritten if necessary by setting them in the request arguments argument.</p> <p>The function returns a list:</p> <p><code>(&lt;response status:number&gt; &lt;resource:JSON&gt;)</code></p> <ul> <li>response status is the oneM2M Response Status Code (RSC) for the request</li> <li>resource is the response content</li> </ul> <p>See also</p> <p>delete-resource, import-raw, retrieve-resource, send-notification, update-resource</p> Example<pre><code>(create-resource \"CAdmin\" \"cse-in\"  { \"m2m:cnt\" : { \"rn\": \"myCnt\" }})  ;; Returns ( 2001 { \"m2m:cnt\" ... } )\n\n;; Provide extra requestVersionIndicator\n(create-resource \"CAdmin\" \"cse-in\"  { \"m2m:cnt\" : { }} { \"rvi\": \"3\"})  ;; Returns ( 2001 { \"m2m:cnt\" ... } )\n</code></pre>"},{"location":"development/ACMEScript-functions/#delete-resource","title":"delete-resource","text":"<p><code>(delete-resource &lt;originator:string&gt; &lt;resource-id:string&gt; [request arguments:JSON])</code></p> <p>The <code>delete-resource</code> function sends a oneM2M DELETE request to a target resource.</p> <p>The function has the following arguments:</p> <ul> <li>originator of the request</li> <li>The target resource-id</li> <li>Optional: A JSON structure  with additional request arguments</li> </ul> <p>The function will provide defaults for the required request arguments (e.g. rvi, rid). These can be overwritten if necessary by setting them in the request arguments argument.</p> <p>The function returns a list:</p> <p><code>(&lt;response status:number&gt; &lt;resource:JSON&gt;)</code></p> <ul> <li>response status is the oneM2M Response Status Code (RSC) for the request</li> <li>resource is the response content (usually nil if successful)</li> </ul> <p>See also</p> <p>create-resource, retrieve-resource, send-notification, update-resource</p> Example<pre><code>(delete-resource \"CAdmin\" \"cse-in/myCnt\")                ;; Returns ( 2002 { \"m2m:cnt\" ... } )\n\n;; Provide extra requestVersionIndicator\n(delete-resource \"CAdmin\" \"cse-in/myCnt\" { \"rvi\": \"3\"})  ;; Returns ( 2002 { \"m2m:cnt\" ... } )\n</code></pre>"},{"location":"development/ACMEScript-functions/#import-raw","title":"import-raw","text":"<p><code>(import-raw &lt;originator:string&gt; &lt;resource:JSON&gt;)</code></p> <p>The <code>import-raw</code> function creates a resource in the CSE without using the normal procedures when handling a CREATE request. The resource is added to the resource tree without much validation.</p> <p>This function is primarily used when importing initial resources, and when restoring resources during the startup of the CSE.</p> <p><code>resource</code> is a valid oneM2M resource. All necessary attributes must be present in that resource, including the parentID (pi) attribute that determines the location in the resource tree.</p> <p>The function returns a list:</p> <p><code>(&lt;response status:number&gt; &lt;resource:JSON&gt;)</code></p> <ul> <li>response status is the oneM2M Response Status Code (RSC) for the request</li> <li>resource is the response content (usually nil if successful)</li> </ul> Example<pre><code>;; Add an AE resource under the CSEBase\n(import-raw \n    \"CmyAE\"                                      ;; Originator\n    { \"m2m:ae\": {\n        \"ri\":  \"CmyAE\",\n        \"rn\":  \"CmyAE\",\n        \"pi\":  \"${ (get-config \\\"cse.ri\\\") }\",  ;; Get the CSE's resource ID from the configuration\n        \"rr\":  true,\n        \"api\": \"NmyAppId\",\n        \"aei\": \"CmyAE\",\n        \"csz\": [ \"application/json\", \"application/cbor\" ]\n    }})\n</code></pre>"},{"location":"development/ACMEScript-functions/#query-resource","title":"query-resource","text":"<p><code>(query-resource &lt;query:quoted s-expression&gt; &lt;resource:JSON&gt;)</code></p> <p>The <code>query-resource</code> function evaluates a query for the attributes in the resource structure.</p> <p>The function has the following arguments:</p> <ul> <li>query to evaluate. This query must be quoted and follows oneM2M's advanced query specification. the unknown symbols in the query are replaced by the resource's attribute values during the evaluation.     Only a limited set boolean and comparison operators are allowed in the query.</li> <li>A oneM2M resource as a JSON structure.</li> </ul> <p>The function returns a boolean indicating the query result.</p> <p>See also</p> <p>get-json-attribute</p> Example<pre><code>;; Returns true\n(query-resource \n    '(&amp; (&gt; x 100) (== rn \"cnt1234\"))\n    { \"m2m:cnt\": {\n        \"rn\": \"cnt1234\",\n        \"x\": 123\n    }})\n</code></pre>"},{"location":"development/ACMEScript-functions/#retrieve-resource","title":"retrieve-resource","text":"<p><code>(retrieve-resource &lt;originator:string&gt; &lt;resource-id:string&gt; [request arguments:JSON])</code></p> <p>The <code>retrieve-resource</code> function sends a oneM2M RETRIEVE request to a target resource.</p> <p>The function has the following arguments:</p> <ul> <li>originator of the request</li> <li>The target resource-id</li> <li>Optional: A JSON structure  with additional request arguments</li> </ul> <p>The function will provide defaults for the required request arguments (e.g. rvi, rid). These can be overwritten if necessary by setting them in the request arguments argument.</p> <p>The function returns a list:</p> <p><code>(&lt;response status:number&gt; &lt;resource:JSON&gt;)</code></p> <ul> <li>response status is the oneM2M Response Status Code (RSC) for the request</li> <li>resource is the response content (usually the target resource if successful)</li> </ul> <p>See also</p> <p>create-resource, delete-resource, send-notification, update-resource</p> Example<pre><code>(retrieve-resource \"CAdmin\" \"cse-in/myCnt\")                ;; Returns ( 2000 { \"m2m:cnt\" ... } )\n\n;; Provide extra requestVersionIndicator\n(retrieve-resource \"CAdmin\" \"cse-in/myCnt\" { \"rvi\": \"3\"})  ;; Returns ( 2000 { \"m2m:cnt\" ... } )\n</code></pre>"},{"location":"development/ACMEScript-functions/#send-notification","title":"send-notification","text":"<p><code>(send-notification &lt;originator:string&gt; &lt;resource-id:string&gt; &lt;notification:JSON&gt; [request arguments:JSON])</code></p> <p>The <code>send-notification</code> function sends a oneM2M NOTIFY request to a target resource.</p> <p>The function has the following arguments:</p> <ul> <li>originator of the request</li> <li>The target resource-id</li> <li>The notification JSON structure</li> <li>Optional: A JSON structure  with additional request arguments</li> </ul> <p>The function will provide defaults for the required request arguments (e.g. rvi, rid). These can be overwritten if necessary by setting them in the request arguments argument.</p> <p>The function returns a list:</p> <p><code>(&lt;response status:number&gt; &lt;resource:JSON&gt;)</code></p> <ul> <li>response status is the oneM2M Response Status Code (RSC) for the request</li> <li>resource is the response content</li> </ul> <p>See also</p> <p>create-resource, delete-resource, retrieve-resource, update-resource</p> Example<pre><code>(send-notification \"CAdmin\" \"cse-in/myAE\"  { \"m2m:sgn\" : { ... }})  ;; Returns notification result\n</code></pre>"},{"location":"development/ACMEScript-functions/#update-resource","title":"update-resource","text":"<p><code>(update-resource &lt;originator:string&gt; &lt;resource-id:string&gt; &lt;resource:JSON&gt; [request arguments:JSON])</code></p> <p>The <code>update-resource</code> function sends a oneM2M UPDATE request to a target resource.</p> <p>The function has the following arguments:</p> <ul> <li>originator of the request</li> <li>The target resource-id</li> <li>The resource JSON structure</li> <li>Optional: A JSON structure  with additional request arguments</li> </ul> <p>The function will provide defaults for the required request arguments (e.g. rvi, rid). These can be overwritten if necessary by setting them in the request arguments argument.</p> <p>The function returns a list:</p> <p><code>(&lt;response status:number&gt; &lt;resource:JSON&gt;)</code></p> <ul> <li>response status is the oneM2M Response Status Code (RSC) for the request</li> <li>resource is the response content</li> </ul> <p>See also</p> <p>create-resource, delete-resource, retrieve-resource, send-notification</p> Example<pre><code>(update-resource \"CAdmin\" \"cse-in\"  { \"m2m:cnt\" : { \"mni\": 10 }})                ;; Returns ( 2004 { \"m2m:cnt\" ... } )\n\n;; Provide extra requestVersionIndicator\n(update-resource \"CAdmin\" \"cse-in\"  { \"m2m:cnt\" : { \"mni\": 10 }} { \"rvi\": \"3\"})  ;; Returns ( 2004 { \"m2m:cnt\" ... } )\n</code></pre>"},{"location":"development/ACMEScript-functions/#text-ui","title":"Text UI","text":""},{"location":"development/ACMEScript-functions/#open-web-browser","title":"open-web-browser","text":"<p><code>(open-web-browser &lt;url:string&gt;)</code></p> <p>The <code>open-web-browser</code> function opens a web browser with the given URL.</p> Example<pre><code>(open-web-browser \"https://www.onem2m.org\")  ;; Opens the web browser with the URL \"https://www.onem2m.org\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#set-category-description","title":"set-category-description","text":"<p><code>(set-category-description &lt;category:string&gt; &lt;description:string&gt;)</code></p> <p>The <code>set-category-description</code> function sets the description for a whole category in the CSE's Text UI.</p> <p>The description may contain Markdown formatting.</p> Example<pre><code>(set-category-description \"myCategory\" \"My category description\")  ;; Sets the description for the category \"myCategory\"\n</code></pre>"},{"location":"development/ACMEScript-functions/#runs-in-tui","title":"runs-in-tui","text":"<p><code>(runs-in-tui)</code></p> <p>The <code>runs-in-tui</code> function determines whether the CSE currently runs in Text UI mode.</p> Example<pre><code>(runs-in-tui)  ;; Returns true if the CSE runs in Text UI mode\n</code></pre> <p></p>"},{"location":"development/ACMEScript-functions/#tui-confirm","title":"tui-confirm","text":"<p><code>(tui-confirm &lt;message:str&gt; &lt;title:str&gt; [[&lt;confirm button text:str&gt;] [&lt;cancel button text:str&gt;]])</code></p> <p>Show a desktop-like confirmation dialog in the TUI. </p> <p>It has the following arguments:</p> <ul> <li>message: The message to show.</li> <li>title: The title of the confirmation dialog.</li> <li>confirm button text: (Optional) The text for the confirmation button. If not specified, the button will be labeled \"OK\".</li> <li>cancel button text: (Optional) The text for the cancel button. If not specified, the button will be labeled \"Cancel\".</li> </ul> <p>The function returns a boolean value or nil:</p> <ul> <li>true if the user clicked the confirmation button</li> <li>false if the user clicked the cancel button</li> <li>nil if the dialog was closed without clicking any button</li> </ul> Examples<pre><code>(tui-confirm \"Are you sure?\" \"Confirmation\")  ;; Shows a confirmation dialog with default button labels\n(tui-confirm \"Delete this item?\" \"Confirmation\" \"Yes\" \"No\")  ;; Shows a confirmation dialog with custom button labels\n</code></pre> <p></p>"},{"location":"development/ACMEScript-functions/#tui-notify","title":"tui-notify","text":"<p><code>(tui-notify &lt;message:str&gt; [&lt;title:str&gt;] [&lt;severity&gt;:str&gt;] [&lt;timeout:float&gt;])</code></p> <p>Show a desktop-like notification in the TUI.</p> <p>This function is only available in TUI mode. It has the following arguments:</p> <ul> <li>message: The message to show.</li> <li>title: (Optional) The title of the notification.</li> <li>severity: (Optional) The severity of the notification. This can be one of the following values:</li> <li>information (the default)</li> <li>warning</li> <li>error</li> <li>timeout: (Optional) The timeout in seconds after which the notification will disappear again. If not specified, the notification will disappear after 3 seconds.</li> </ul> <p>If one of the optional arguments needs to be left out, a nil symbol must be used instead. The function returns NIL.</p> Examples<pre><code>(tui-notify \"a message\")                ;; Displays \"a message\" in an information notification for 3 seconds\n(tui-notify \"a message\" \"a title\")      ;; Displays \"a message\" with title \"a title in an information notification for 3 seconds\n(tui-notify \"a message\")                ;; Displays \"a message\" in an information notification for 3 seconds\n(tui-notify \"a message\" nil \"warning\")  ;; Displays \"a message\" in a warning notification, no title\n(tui-notify \"a message\" nil nil 10)     ;; Displays \"a message\" in an information notification, no title, for 3 seconds\n</code></pre>"},{"location":"development/ACMEScript-functions/#tui-refresh-resources","title":"tui-refresh-resources","text":"<p><code>(tui-refresh-resources)</code></p> <p>The <code>tui-refresh-resources</code> function refreshes the resources in the CSE's Text UI.</p> Example<pre><code>(tui-refresh-resources)  ;; Refreshes the resource tree\n</code></pre>"},{"location":"development/ACMEScript-functions/#tui-visual-bell","title":"tui-visual-bell","text":"<p><code>(tui-visual-bell)</code></p> <p>The <code>tui-visual-bell</code> function shortly flashes the script's entry in the scripts' list/tree.</p> Example<pre><code>(tui-visual-bell)  ;; Flashes the script's name\n</code></pre>"},{"location":"development/ACMEScript-functions/#network","title":"Network","text":""},{"location":"development/ACMEScript-functions/#http","title":"http","text":"<p><code>(http &lt;operation:quoted symbol&gt; &lt;url:string&gt; [&lt;headers:JSON | quoted list | nil&gt;] [&lt;body:string | JSON | nil &gt;])</code></p> <p>The <code>http</code> function sends an http request to an http server.</p> <p>The function has the following arguments:</p> <ul> <li>operation of the request. This is one of the following supported quoted symbols: get, post, put, delete, patch</li> <li>The target server's url. This is a string with a valid URL.</li> <li> <p>Optional: header fields, either:</p> <ul> <li>A JSON structure of header fields. Each header field is a JSON attribute with the name of the header field and its value. </li> <li>A quoted list of header fields. Each header field is a list with two elements: the header field name and its value. The header field name is a string or a quoted symbol. The header field value is a string or number. </li> </ul> <p>If the optional body argument is present then this argument must be present as well, ie. with at least an empty header structure or the nil symbol.</p> </li> <li> <p>Optional: The http request's body, which could be a string or a JSON structure. </p> </li> </ul> <p>The function returns a list:</p> <p><code>(&lt;http status:number&gt; &lt;response body:JSON&gt; &lt;response headers:list of header fields)</code></p> <ul> <li>http status is the htttp status code for the request</li> <li>response body is the response content</li> <li>response headers is a list of header fields. The format of these header fields is the same as in the request above.</li> </ul> Examples<pre><code>;; Retrieve a web page\n(http 'get \"https://www.onem2m.org\")\n\n;; Send a oneM2M CREATE request manually\n(http 'post \"http://localhost:8080/cse-in\"   ;; Operation and URL\n    { \"X-M2M-RI\":\"1234\",                     ;; Header fields using a JSON structure\n        \"X-M2M-RVI\": \"4\",\n        \"X-M2M-Origin\": \"CAdmin\",\n        \"Content-type\": \"application/json;ty=3\" }\n    { \"m2m:cnt\": {                           ;; Body\n        \"rn\": \"myCnt\"\n        ...\n    }})\n\n;; same as above but with a quoted list for the headers\n(http 'post \"http://localhost:8080/cse-in\"      ;; Operation and URL\n    '((\"X-M2M-RI\" \"1234\")                       ;; Header fields using a quoted list\n      (\"X-M2M-RVI\" \"4\")                         ;; using a string for the header field name\n      ('X-M2M-Origin \"CAdmin\")                  ;; using a quoted symbol for the header field name\n      ('Content-type \"application/json;ty=3\"))\n    { \"m2m:cnt\": {                              ;; Body\n        \"rn\": \"myCnt\"\n        ...\n    }})\n</code></pre>"},{"location":"development/ACMEScript-functions/#ping-tcp-service","title":"ping-tcp-service","text":"<p><code>(ping-tcp-server &lt;hostname:string&gt; &lt;port:number&gt; [&lt;timeout:number&gt;])</code></p> <p>The <code>ping-tcp-service</code>function tests the availability and reachability of a TCP-based network service.</p> <p>It has the following arguments:</p> <ul> <li>The hostname of the target service. This can be a hostname or an IP address.</li> <li>The port of the target service. This is a number.</li> <li>Optional: The request timeout in seconds. The default is 5 seconds.</li> </ul> <p>The function returns a boolean value.</p> Examples<pre><code>(ping-tcp-service \"localhost\" 8080)    ;; Returns true if the service is reachable\n(ping-tcp-service \"localhost\" 8080 2)  ;; Returns true if the service is reachable. Timeout after 2 seconds.\n</code></pre>"},{"location":"development/ACMEScript-functions/#provided-functions","title":"Provided Functions","text":"<p>In addition to the functions defined in this documentation, more functions are provided in the file ASFunctions.as. </p> <p>These functions can be included and made available in own scripts with the include-script function:</p> Example<pre><code>(include-script \"ASFunctions\")\n</code></pre>"},{"location":"development/ACMEScript-functions/#cadr","title":"cadr","text":"<p><code>(cadr &lt;list&gt;)</code></p> <p>The <code>cadr</code> function returns the second element of a list.</p> <p>See also</p> <p>caddr</p> Example<pre><code>(cadr '(1 2 3))  ;; Returns 2\n</code></pre>"},{"location":"development/ACMEScript-functions/#caddr","title":"caddr","text":"<p><code>(caddr &lt;list&gt;)</code></p> <p>The <code>caddr</code> function returns the third element of a list.</p> <p>See also</p> <p>cadr</p> Example<pre><code>(caddr '(1 2 3))  ;; Returns 3\n</code></pre>"},{"location":"development/ACMEScript-functions/#set-and-store-config-value","title":"set-and-store-config-value","text":"<p><code>(set-and-store-config-value &lt;key:string&gt; &lt;value:any&gt;)</code></p> <p>The <code>set-and-store-config-value</code> function stores the current value of a configuration setting and then updates the setting with a new value.</p> <p>The function has the following arguments:</p> <ul> <li>The key of the configuration setting</li> <li>The value to set</li> </ul> <p>The function returns the previous value of the configuration setting.</p> <p>See also</p> <p>restore-config-value</p> Example<pre><code>(set-and-store-config-value \"cse.checkExpirationsInterval\" 10)  ;; Returns the previous value of the configuration setting\n</code></pre>"},{"location":"development/ACMEScript-functions/#restore-config-value","title":"restore-config-value","text":"<p><code>(restore-config-value &lt;key:string&gt;)</code></p> <p>The <code>restore-config-value</code> function restores a configuration setting to its previous value.</p> <p>The function has the following arguments:</p> <ul> <li>The key of the configuration setting</li> </ul> <p>See also</p> <p>set-and-store-config-value</p> Example<pre><code>(restore-config-value \"cse.checkExpirationsInterval\")  ;; Restores the configuration setting\n</code></pre>"},{"location":"development/ACMEScript-functions/#get-response-status","title":"get-response-status","text":"<p><code>(get-response-status &lt;response:list&gt;)</code></p> <p>The <code>get-response-status</code> function returns the response status of a oneM2M request.</p> <p>The function has the following arguments:</p> <ul> <li>The response list </li> </ul> <p>The function returns the response status.</p> <p>See also</p> <p>get-response-resource </p> Example<pre><code>(get-response-status (retrieve-resource \"CAdmin\" \"cse-in/myCnt\"))  ;; Returns the response status\n</code></pre>"},{"location":"development/ACMEScript-functions/#get-response-resource","title":"get-response-resource","text":"<p><code>(get-response-resource &lt;response:list&gt;)</code></p> <p>The <code>get-response-resource</code> function returns the response resource of a oneM2M request.</p> <p>The function has the following arguments:</p> <ul> <li>The response list</li> </ul> <p>The function returns the response resource.</p> <p>See also</p> <p>get-response-status</p> Example<pre><code>(get-response-resource (retrieve-resource \"CAdmin\" \"cse-in/myCnt\"))  ;; Returns the response resource\n</code></pre>"},{"location":"development/ACMEScript-functions/#eval-if-resource-exists","title":"eval-if-resource-exists","text":"<p><code>(eval-if-resource-exists &lt;originator:string&gt; &lt;id:string&gt; &lt;cmd:s-expression&gt; &lt;else-cmd:s-expression&gt;)</code></p> <p>The <code>eval-if-resource-exists</code> function evaluates a command if a resource exists and can be retrieved. Otherwise, it evaluates an alternative command.</p> <p>If found, the resource is stored in the \"_resource\" variable that can be used in the \"cmd\" command.</p> <p>The function has the following arguments:</p> <ul> <li>The originator of the request</li> <li>The id of the resource</li> <li>The cmd to evaluate if the resource exists</li> <li>The else-cmd to evaluate if the resource does not exist</li> </ul> <p>The function returns the result of the evaluated command.</p> Example<pre><code>(eval-if-resource-exists \"CAdmin\" \n                         \"cse-in/myCnt\" \n                         (print \"Resource exists\") \n                         (print \"Resource does not exist\"))  ;; Evaluates the command\n</code></pre>"},{"location":"development/ACMEScript-loading/","title":"Loading &amp; Running ACMEScripts","text":"<p>By default scripts are stored in and are imported from the init directory and in its sub-directories, which names end with .scripts. They are imported from the secondary init directory as well. In addition, one can specify a list of directories in the configuration file with additional scripts that will be imported from those directories.</p> <p>All files in those directories with the extension <code>.as</code> are treated as ACMEScript files and are automatically imported during CSE startup, and are also imported and updated during runtime if a file changes.</p>"},{"location":"development/ACMEScript-loading/#running-scripts","title":"Running Scripts","text":"<p>There are many different ways to run scripts:</p> <ul> <li>Scripts can be manually run from the console interface with the <code>R</code> (Run) command.</li> <li>They can also be run by a specified keypress from the console interface (see the onKey meta tag).</li> <li>Scripts can be scheduled to run at specific times or dates. This is similar to the Unix cron system (see the at meta tag).</li> <li>It is possible to schedule scripts to run at certain events. Currently, the CSE init, onStartup, onRestart, and onShutdown events are supported.</li> <li>Scrips can be run as a receiver of a NOTIFY request from the CSE. See the onNotification meta tag.</li> <li>They can also be run as a command of the Upper Tester Interface.</li> <li>Scripts can be integrated as tools in the Text UI. See also the section Text UI meta-tags for available tags.</li> </ul>"},{"location":"development/ACMEScript-loading/#script-arguments","title":"Script Arguments","text":"<p>Scripts may have arguments that can be accessed with the argv function and argc variable.</p> <p>Note</p> <p>Not all of the above methods support script arguments. For example, scripts that are run by the onStartup, onRestart, or onShutdown events do not support arguments.</p>"},{"location":"development/ACMEScript-loading/#script-prompt","title":"Script Prompt","text":"<p>A script may ask for input before it runs. This can be enabled with the @prompt meta tag. The prompt's answer is then assigned as the script's first argument.</p> <p>Attention</p> <p>The @prompt meta tag should only be used when human interaction can be ensured. Running a script with this meta tag, for example, scheduled or unattended will cause the script to wait forever for user input. </p>"},{"location":"development/ACMEScript-loading/#running-scripts-at-startup-restart-and-shutdown","title":"Running Scripts at Startup, Restart, and Shutdown","text":"<p>Right after a CSE finished the start-up or restart, or just before a CSE shuts down it looks for scripts that have the @onStartup, @onRestart, or @onShutdown meta tags set, and runs them respectively.</p>"},{"location":"development/ACMEScript-loading/#initialization-script","title":"Initialization Script","text":"<p>Whenever a CSE starts or is restarted (or reset) it is necessary to create couple of oneM2M resources and to build a basic resource tree. This is done by running a script that has the @init meta tag set. A script with this tag is executed right after the start of the internal services during the initialization of the importer service.</p> <p>Note</p> <p>Only one script must have the @init meta tag set. By default this is the init.as script from the CSE's init directory.</p>"},{"location":"development/ACMEScript-metatags/","title":"ACMEScript - Meta Tags","text":"<p>Meta tags are special commands in a script that are not executed during the runtime of a script, but describe certain capabilities of the script or give, for example, the script a name or provide instructions when a script should be executed. </p> <p>Meta tags are keywords that start with an at-character <code>@</code>. They can appear anywhere in a script file on a single line, but it is recommend to collect them either at the start or the end of a script. </p> <p>Important</p> <p>Meta tag names are case sensitive.</p>"},{"location":"development/ACMEScript-metatags/#accessing-meta-tags","title":"Accessing Meta Tags","text":"<p>Meta tags are added as constants to the script's environment and are prefixed with <code>meta.</code>. They can be accessed like any other environment variable, for example:</p> Accessing a Meta Tag<pre><code>(if (is-defined 'meta.name)            ;; note the quote in front of meta.name to prevent evaluation\n    (print \"Script name:\" meta.name))  ;; prints the script's name\n</code></pre>"},{"location":"development/ACMEScript-metatags/#basic-meta-tags","title":"Basic Meta Tags","text":""},{"location":"development/ACMEScript-metatags/#at","title":"@at","text":"<p><code>@at &lt;cron pattern&gt;</code></p> <p>The <code>@at</code> meta tag specifies a time / date pattern when a script should be executed. This pattern follows the Unix crontab pattern. </p> <p>A crontab pattern consists of the following six fields:  </p> <p><code>second minute hour dayOfMonth month dayOfWeek year</code></p> <p>Each field is mandatory and must comply to the following values:</p> <ul> <li><code>*</code> : any valid integer number for that field, or</li> <li><code>*/&lt;number&gt;</code> : step, or</li> <li><code>&lt;number&gt;-&lt;number</code> : range, or</li> <li><code>value[,value]*</code> : value is either a number, a step, or a range</li> </ul> Examples<pre><code>;; Run a script every 5 minutes\n@at 0 */5 * * * * *\n\n;; Run a script every Friday at 2:30 am\n@at 0 30 2 * * 4 *\n</code></pre>"},{"location":"development/ACMEScript-metatags/#description","title":"@description","text":"<p><code>@description &lt;string&gt;</code></p> <p>A short one-line description of a script's purpose. This is used, for example, for the console's script catalog.</p> <p>A description must be a single line, but may include line breaks (i.e. <code>\\n</code> characters). A description may also be formatted as markdown. This is then correctly displayed in the Text UI.</p> <p>See also</p> <p>@usage</p> Examples<pre><code>@description The purpose of this script is to demonstrate the @description meta tag\n\n@description # Markdown header\\n\\nFormatted **Markdown** text.\n</code></pre>"},{"location":"development/ACMEScript-metatags/#filename","title":"@filename","text":"<p><code>@filename &lt;string&gt;</code></p> <p>This meta tag is for internal use. It contains the script's full filename when read by the script manager.</p>"},{"location":"development/ACMEScript-metatags/#hidden","title":"@hidden","text":"<p><code>@hidden</code></p> <p>This meta tag indicates that a script will not be listed in the console's script catalog.</p> Example<pre><code>@hidden\n</code></pre>"},{"location":"development/ACMEScript-metatags/#init","title":"@init","text":"<p><code>@init</code></p> <p>This meta tag indicates that the script will be executed during the CSE's startup and restart. It is used to initialize the CSE and creates the basic resources.</p> <p>Important</p> <p>Only one script can have this meta tag set.</p> <p>See-also</p> <p>@onRestart, @onShutdown, @onStartup</p> Example<pre><code>@init\n</code></pre>"},{"location":"development/ACMEScript-metatags/#name","title":"@name","text":"<p><code>@name &lt;string&gt;</code></p> <p>This meta tag assigns a name to a script. This name is used for identifying the script, for example when running a script from the console.</p> <p>See-also</p> <p>@uppertester</p> Example<pre><code>@name exampleScript\n</code></pre>"},{"location":"development/ACMEScript-metatags/#onkey","title":"@onKey","text":"<p><code>@onKey &lt;key&gt;</code></p> <p>With this meta tag a script registers to a key-press event of the console interface. If the key is pressed then the script is run. The event and the key are passed as the environment variables event.type and event.data, respectively.</p> <p>The keys may be normal ASCII characters or a function key. Please consult the console's supported function key table for the function key's names. Note, that not all function keys are available on all OS platforms.</p> <p>A script can only register for a single key event.</p> Example<pre><code>;; Run the script when the '9' key is pressed\n@onkey F9\n\n(print (event.data))\n</code></pre>"},{"location":"development/ACMEScript-metatags/#onnotification","title":"@onNotification","text":"<p><code>@onNotification &lt;URI: acme://someID&gt;</code></p> <p>With this meta tag a script acts as a handler for a notification request from the CSE.</p> <p>The ACME URL scheme \"acme://&lt;identifier&gt;\" is used to define a URI that is targeting the script. Such a URI must be used in either the notificationURI attribute of a subscription resource, or the pointOfAccess of an AE.</p> <p>When a notification is received and the handler script is run the following variables are set:</p> <ul> <li>notification.originator : The notification's originator</li> <li>notification.resource : The notification's resource</li> <li>notification.uri : The notification's target URI</li> </ul> Example<pre><code>;; Run the script when the 'acme://aNotification' notificastion is received\n@onNotification acme://aNotification\n\n(print (notification.resource))\n</code></pre>"},{"location":"development/ACMEScript-metatags/#onrestart","title":"@onRestart","text":"<p><code>@onRestart</code></p> <p>This meta tag indicates that the script will be executed just after the CSE restarted, for example after a reset.</p> <p>If multiple scripts have this meta tag set then they will run in random order.</p> <p>See-also</p> <p>@init, @onShutdown, @onStartup</p> Example<pre><code>@onRestart\n</code></pre>"},{"location":"development/ACMEScript-metatags/#onshutdown","title":"@onShutdown","text":"<p><code>@onShutdown</code></p> <p>This meta tag indicates that the script will be executed just before the CSE shuts down.</p> <p>If more than one script have this meta tag set then they will run in random order.</p> <p>See-also</p> <p>@init, @onRestart, @onStartup</p> Example<pre><code>@onShutdown\n</code></pre>"},{"location":"development/ACMEScript-metatags/#onstartup","title":"@onStartup","text":"<p><code>@onStartup</code></p> <p>This meta tag indicates that the script will be executed just after the CSE started. It will be run only after start up, but not when the CSE restarted. If more than one script have this meta tag set then they will be run in random order.</p> <p>See-also</p> <p>@init, @onRestart, @onShutdown</p> Example<pre><code>@onStartup\n</code></pre>"},{"location":"development/ACMEScript-metatags/#prompt","title":"@prompt","text":"<p><code>@prompt &lt;prompt text&gt;</code></p> <p>A script with this meta tag will present a prompt before it is executed and ask a user for input. The result is then passed on as  script arguments.</p> <p>This meta tag should only be used when human interaction can be ensured. Running a script with this meta tag scheduled or  unattended will cause the script to wait forever for user input. </p> Example<pre><code>@prompt Enter some arguments\n</code></pre>"},{"location":"development/ACMEScript-metatags/#timeout","title":"@timeout","text":"<p><code>@timeout &lt;seconds&gt;</code></p> <p>This meta tag sets a timeout after which the script execution is terminated with a timeout error</p> <p>Note, that the script may terminate some time after the timeout when a script command takes longer to run.</p> Example<pre><code>@timeout 10\n</code></pre>"},{"location":"development/ACMEScript-metatags/#tuinoexecute","title":"@tuiNoExecute","text":"<p><code>@tuiNoExecute</code></p> <p>This meta tag disables the <code>Execute</code> button for this script in the Text UI's Tools section.</p> Example<pre><code>@tuiNoExecute\n</code></pre>"},{"location":"development/ACMEScript-metatags/#uppertester","title":"@uppertester","text":"<p><code>@uppertester</code></p> <p>This meta tag indicates that a script is runnable through the Upper Tester Interface. In this case the script name specified by the @name meta tag is used as the command name.</p> <p>Scripts without this meta tag cannot be run through the Upper Tester interface.</p> <p>See-also</p> <p>@name, Upper Tester Integration, Upper Tester Interface</p> Example<pre><code>@uppertester\n</code></pre>"},{"location":"development/ACMEScript-metatags/#usage","title":"@usage","text":"<p><code>@usage &lt;string&gt;</code></p> <p>This meta tag provides a short help message for a script's usage.</p> <p>See-also</p> <p>@description</p> Example<pre><code>@usage exampleScript &lt;a parameter&gt; &lt;another parameter&gt;\n</code></pre>"},{"location":"development/ACMEScript-metatags/#text-ui","title":"Text UI","text":""},{"location":"development/ACMEScript-metatags/#category","title":"@category","text":"<p><code>@category &lt;string&gt;</code></p> <p>A category name for the script. This is used, for example, in the text UI tools to group scripts.</p> <p>See-also</p> <p>@name, @tuiTool</p> Example<pre><code>@categoy System\n</code></pre>"},{"location":"development/ACMEScript-metatags/#tuiautorun","title":"@tuiAutoRun","text":"<p><code>@tuiAutoRun [&lt;interval:positive float&gt;]</code></p> <p>This meta tag, when present, configures a script that it is run automatically when it is selected in the Tools overview in the text UI.</p> <p>Without the optional interval argument the script runs only once when it is selected.</p> <p>When the interval argument is present it must be a positive float number that specifies the interval, in seconds, after which the script is repeatedly run again.</p> <p>If this meta tag is present, with or without the interval argument, the environment variable <code>tui.autorun</code> is set to true when the script is run.</p> Example<pre><code>@tuiAutoRun 10\n</code></pre>"},{"location":"development/ACMEScript-metatags/#tuiexecutebutton","title":"@tuiExecuteButton","text":"<p><code>@tuiExecuteButton [&lt;label:string&gt;]</code></p> <p>This meta tag configures the script's <code>Execute</code> button of the text UI. </p> <p>The following configurations are possible:</p> <ul> <li>Not present in a script: The button displays the default text \"Execute\".</li> <li>Present in a script with an argument: The argument is used for the button's label.</li> <li>Present in a script with no argument: The button is hidden.</li> </ul> Example<pre><code>@tuiExecuteButton A Label\n</code></pre>"},{"location":"development/ACMEScript-metatags/#tuiinput","title":"@tuiInput","text":"<p><code>@tuiInput [&lt;label:string&gt;]</code></p> <p>This meta tag adds an input field to text UI. Text entered in this field is passed as  arguments to the script that can be access using the argv function.</p> <p>The following configurations are possible:</p> <ul> <li>Not present in a script or without a label: No input field is added.</li> <li>Present in a script with an argument: The argument is used for the input field's label.</li> </ul> Example<pre><code>@tuiInput A Label\n</code></pre>"},{"location":"development/ACMEScript-metatags/#tuisortorder","title":"@tuiSortOrder","text":"<p><code>@tuiSortOrder &lt;priority:number&gt;</code></p> <p>With this meta tag one can specify the sort order of a script in the Text UI's Tools section. </p> <p>The default sort order is 500. Scripts with a lower priority number are listed first.  Scripts with the same priority are sorted alphabetically.</p> Example<pre><code>@tuiSortOrder 100\n</code></pre>"},{"location":"development/ACMEScript-metatags/#tuitool","title":"@tuiTool","text":"<p><code>@tuiTool</code></p> <p>This meta tag categorizes a script as a tool. Scripts marked as tuiTools are listed in the Text UI's Tools section.</p> Example<pre><code>@tuiTool\n</code></pre>"},{"location":"development/ACMEScript-operations/","title":"Operations","text":"<p>This document describes the operations supported by ACMEScript.</p>"},{"location":"development/ACMEScript-operations/#comparison-operations","title":"Comparison Operations","text":"<p>The following comparison operations are supported by ACMEScript. They are used like any other function, and return a boolean value.</p> operation Description Example == Equal to <code>(== a b) ;; equal to: a == b</code> !=, &lt;&gt; Not equal to <code>(!= a b) ;; equal to: a != b</code> &lt; Smaller than <code>(&lt; a b) ;; equal to: a &lt; b</code> &lt;= Smaller or equal than <code>(&lt;= a b) ;; equal to: a &lt;= b</code> &gt; Greater than <code>(&gt; a b) ;; equal to: a &gt; b</code> &gt;= Greater or equal than <code>(&gt;= a b) ;; equal to: a &gt;= b</code> Example<pre><code>(if (&lt; 1 2)           ;; Evaluates to \"true\"\n    (print \"true\")    ;; This expression is executed\n    (print \"false\"))  ;; This expression is not executed\n</code></pre> <p>Note</p> <p>The first operant in comparison operations may be a list or a quoted list. Only if the second operant is not a list, too, then the comparison operation is repeated for every member in the first operant's list. The comparison operation evaluates to true if any of these comparisons returns true.</p> Example<pre><code>(== '(1 2 3) 2)  ;; Evaluates to \"true\"\n</code></pre>"},{"location":"development/ACMEScript-operations/#logical-operations","title":"Logical Operations","text":"<p>The following logical operations are supported by ACMEScript. They are used like any other function, and return a boolean value.</p> operation Description Example or, | logical or of two or more boolean expressions (or a b)  ;; a or b and, &amp; logical and of two or more boolean expressions (and a b c) ;; a and b and c not, ! logical negation or one boolean expression (not true)  ;; false Example<pre><code>(or (&lt; 1 2) (&gt;= 4 3) (== 1 1))   ;; Returns true\n(and (or true false) (not true)) ;; Returns false\n</code></pre> <p>Note</p> <p>The first operant in logical operations may be a list or quoted list. Only if the second operant is not a list, too, then the logical operation is repeated for every member in the first operant's list. The logical operation evaluates to true if any of these operations returns true.</p> Examples<pre><code>(and '(false false true) true)   ;; Evaluates to \"true\"\n(and '(false false false) true)  ;; Evaluates to \"false\"\n</code></pre>"},{"location":"development/ACMEScript-operations/#mathematical-operations","title":"Mathematical Operations","text":"<p>The following mathematical operations are supported by ACMEScript. They are used like any other function, and return a number value.</p> operation Description Example + Add two or more numbers (+ 1 2 3)  ;; Returns 6 - Subtract two or more numbers (- 10  1 2 3)  ;; Returns 4 * Multiply two or more numbers (* 6 7)  ;; Returns 42 / Divide two or more numbers (/ 23 5)  ;; Returns 4.6 ** Calculates the power of two or more numbers (** 2 3 4)  ;; Returns 4096 % Calculates to modulo of two or more numbers (% 100 21 13) ;; Returns 3 Examples<pre><code>(* 6 7)        ;; Returns 42\n(* (+ 3 3) 7)  ;; Return 42\n</code></pre>"},{"location":"development/ACMEScript-uppertester/","title":"Upper Tester Integration","text":"<p>ACMEScript is integrated with the Upper Tester (UT) Interface. To enable this a script must have the @uppertester meta tag set. It can then be run through the UT interface by having its @name (and optional script arguments) as the parameter of the upper tester's X-M2M-UTCMD header field of a http request:</p> Upper Tester Request<pre><code>X-M2M-UTCMD: aScript param1 param2\n</code></pre> <p>A script result is  passed back in a response in the X-M2M-UTRSP header of the response:</p> Upper Tester Response<pre><code>X-M2M-UTRSP: aResult\n</code></pre> <p>See-also</p> <p>Upper Tester Interface</p>"},{"location":"development/ACMEScript-variables/","title":"ACMEScript - Variables","text":"<p>This section describes the built-in variables that are available in ACMEScript.</p>"},{"location":"development/ACMEScript-variables/#argc","title":"argc","text":"<p><code>argc</code></p> <p>Evaluates to the number of elements in argv. A script called with no arguments still has <code>argc</code> set to 1, because the name of the script is always the first element in argv.</p> <p>See also</p> <p>argv</p> Example<pre><code>(if (&gt; argc 2)\n    ((log-error \"Wrong number of arguments\")\n    (quit-with-error)))\n</code></pre>"},{"location":"development/ACMEScript-variables/#eventdata","title":"event.data","text":"<p><code>event.data</code></p> <p>Evaluates to the payload data of an event. This could be, for example, the string representation in case of an onKey event.</p> <p>Note</p> <p>This variable is only set when the script was invoked by an event.</p> <p>See also</p> <p>event.type</p> Example<pre><code>(if (== event.type \"onKey\")     ;; If the event is \"onKey\"\n    (print \"Key:\" event.data))  ;; Print the pressed key\n</code></pre>"},{"location":"development/ACMEScript-variables/#eventtype","title":"event.type","text":"<p><code>event.type</code></p> <p>Evaluates to the type of an event. This could be, for example, the value \"onKey\" in case of an onKey event.</p> <p>Note</p> <p>This variable is only set when the script was invoked by an event.</p> <p>See also</p> <p>event.data</p> Example<pre><code>(if (== event.type \"onKey\")     ;; If the event is \"onKey\"\n    (print \"Key:\" event.data))  ;; Print the pressed key\n</code></pre>"},{"location":"development/ACMEScript-variables/#notificationoriginator","title":"notification.originator","text":"<p><code>notification.originator</code></p> <p>The <code>notification.originator</code> variable is set when a script is called to process a notification request. </p> <p>It contains the notification's originator.</p> Example<pre><code>(print notification.originator)\n</code></pre>"},{"location":"development/ACMEScript-variables/#notificationresource","title":"notification.resource","text":"<p><code>notification.resource</code></p> <p>The <code>notification.resource</code> variable is set when a script is called to process a notification request. </p> <p>It contains the notification's JSON body.</p> Example<pre><code>(print notification.resource)\n</code></pre>"},{"location":"development/ACMEScript-variables/#notificationuri","title":"notification.uri","text":"<p><code>notification.uri</code></p> <p>The <code>notification.uri</code> variable is set when a script is called to process a notification request. </p> <p>It contains the notification's target URI.</p> Example<pre><code>(print notification.uri)\n</code></pre>"},{"location":"development/ACMEScript-variables/#tuiautorun","title":"tui.autorun","text":"<p><code>tui.autorun</code></p> <p>Evaluates to true if the script was started as an \"autorun\" script. This is the case when the @tuiAutoRun meta tag is set in a script.</p> <p>See also</p> <p>tuiAutoRun</p> <p>Note</p> <p>This variable is only set when the script is run from the text UI.</p> Example<pre><code>(if (is-defined 'tui.autorun)     ;; If the variable is defined\n    (if (== tui.autorun true)     ;; If the script is an autorun script\n        (print \"Autorun: True\")))  ;; Print a message\n</code></pre>"},{"location":"development/ACMEScript-variables/#tuitheme","title":"tui.theme","text":"<p><code>tui.theme</code></p> <p>Evaluates to the state of the current theme of the text UI. This can either be the values light or dark.</p> Example<pre><code>(print \"Theme: \" tui.theme)  ;; Print the theme name\n</code></pre>"},{"location":"development/ACMEScript/","title":"ACMEScript - Introduction","text":"<p>The ACME CSE supports a lisp-based scripting language, called ACMEScript, that can be used to configure, execute functions, and control certain aspects of the ACME CSE:</p> <ul> <li>Import resources during startup.</li> <li>CREATE, RETRIEVE, UPDATE, and DELETE resources.</li> <li>Send NOTIFICATIONS.</li> <li>Update CSE configuration settings.</li> <li>Call internal CSE functions.</li> <li>Run scheduled script jobs.</li> <li>Implement tool scripts for the Text UI.</li> </ul>"},{"location":"development/ACMEScript/#acmescript-basics","title":"ACMEScript Basics","text":"<p>The scripts are stored as normal text files. A script contains so-called s-expressions that are evaluated one by one and recursively. </p> <p>An s-expression is a list of symbols that represent either a value or another s-expression. Usually, the first element in the list is the function that is called to perform a function, and that may have zero, one, or multiple symbols as arguments. If such an argument symbol is executable, then it is recursively evaluated, and its result is taken as the actual argument.</p> Example<pre><code>;; Print \"Hello, World\" to the console\n(print \"Hello, World!\")\n\n;; Print the result of calculations to the console\n(print (+ 1 2))        ;; prints 3\n(print (+ 1 (/ 8 4)))  ;; prints 3\n</code></pre>"},{"location":"development/ACMEScript/#data-types","title":"Data Types","text":"<p>The following data types are supported by ACMEscript:</p> <ul> <li>String: A normal string, for example \"Hello, World\"</li> <li>Number: integer or float, for example 42</li> <li>Boolean: <code>true</code> or <code>false</code></li> <li>JSON: A valid JSON structure</li> <li>List or s-expression: a list of symbols or other s-expressions</li> <li>Lambda: A nameless function</li> <li>nil: An empty list or non-value.</li> <li>T: A special symbol that is used to represent the \"not nil\" value</li> </ul>"},{"location":"development/ACMEScript/#return-values","title":"Return Values","text":"<p>Every function and s-expression returns a value. This is usually the function result, but when a list contains multiple s-expressions that are evaluated, then only the last s-expression's result is returned.</p> Example<pre><code>;; First, set the variable a to 3, then use it in a calculation.\n;; Then, the calculation result is printed.\n(print ( (setq a 3) (+ a 4) ))   ;; prints 7\n</code></pre>"},{"location":"development/ACMEScript/#variables-and-function-scopes","title":"Variables and Function Scopes","text":"<p>Variables are global to a script execution. Variables that are defined globally and that are updated in a function call are updated globally. Variables that are not defined globally but are defined in a function's scope do only exist in the scope of the function and sub-functions calls.</p> <p>In addition to the normal script variables the runtime environment may pass extra environment (or pre-defined) variables to the script. They are mapped to the script's global variables and can be retrieved like any other global variable (but not updated or deleted). Variables that are set during the execution of a script have precedence over environment variables with the same name.</p> <p>Variables are removed between script runs.</p> <p>Variable names are case-sensitive.</p>"},{"location":"development/ACMEScript/#comments","title":"Comments","text":"<p>Comments start with two semicolons and continue to the end of the line.</p>"},{"location":"development/ACMEScript/#quoting","title":"Quoting","text":"<p>It doesn't matter whether a symbol is another s-expression, a built-in, self-defined or even nameless function, or a variable: If symbols can be evaluated they are evaluated in order. However, sometimes it is necessary to pass an executable symbol without evaluating it first. This is called quoting and is achieved by adding a single quote to the beginning of a symbol or list.</p> <p>Some functions assume that one or more arguments are implicitly quoted, such as the setq function that doesn't evaluating its first argument. In this case the argument is not quoted.</p> Example<pre><code>;; Print the string \"(+ 1 2)\" to the console\n(print '(+ 1 2))\n\n;; Set a variable \"a\" to 42 and print the variable to the console\n(setq a 42)  ;; a is not evaluated!\n(print a)    ;; a is evaluated. It prints 42\n</code></pre> <p>Sometimes it is not possible to quote an s-expression or symbol because it is the result of the evaluation of another s-expression. In this case the quote function can be used to return a quoted version of an s-expression.</p> Example<pre><code>;; Print the string \"(+ 1 2)\" to the console\n(print (quote (+ 1 2)))\n</code></pre>"},{"location":"development/ACMEScript/#meta-tags","title":"Meta Tags","text":"<p>Meta tags are special commands in a script that are not executed during the runtime of a script, but describe certain capabilities of the script or give, for example, the script a name or provide instructions when a script should be executed.</p> <p>Meta tags start with a <code>@</code> character and may have additional parameters. Meta tags are added as constants to the script's environment, prefixed with \"meta.\".</p> <p>Meta tags are described in a separate documentation.</p>"},{"location":"development/ACMEScript/#advanced-topics","title":"Advanced Topics","text":""},{"location":"development/ACMEScript/#storing-data","title":"Storing Data","text":"<p>Data can be stored \"persistently\" during a CSE's runtime. This is intended to pass data across different runs of a script, but not to store data persistently across a CSE restart or reset. The storage format is a simple key/value store.</p> <p>To store data persistently one may consider to store it in the oneM2M resource tree.</p> <p>See:  get-storage, has-storage, put-storage</p>"},{"location":"development/ACMEScript/#evaluating-s-expressions-in-strings-and-json-structures","title":"Evaluating S-Expressions in Strings and JSON Structures","text":"<p>S-expressions that are enclosed in the pattern <code>${..}</code> in a string or JSON structure are evaluated when the string or JSON symbol is evaluated. The result of the s-expression replaces the pattern. </p> <p>In the following example the s-expression <code>(+ 1 2)</code> is evaluated when the string is processed:</p> Example<pre><code>(print \"1 + 2 = ${ + 1 2 }\")    ;; Prints \"1 + 2 = 3\"\n</code></pre> <p>Evaluation can be locally disabled by escaping the opening part:</p> Example<pre><code>(print \"1 + 2 = \\\\${ + 1 2 }\")  ;; Prints \"1 + 2 = ${ + 1 2 )}\"\n</code></pre> <p>Evaluation can also be disabled and enabled by using the evaluate-inline function.</p> <p>Pattern replacement can be escaped with two backslashes: <code>\\\\${..}</code>.</p>"},{"location":"development/ACMEScript/#on-error-function","title":"\"on-error\" Function","text":"<p>If the function <code>on-error</code> is defined in a script, then this function is executed in case of a script-terminating error, and just before the script terminates because of that error.</p> <p>In general, the <code>on-error</code> function is called as follows:</p> Example<pre><code>(on-error &lt;error type:string&gt; &lt;error message:string)\n</code></pre> <p>The function is called with two arguments: the error type and the error message.</p> <p>The following example shows how to define the <code>on-error</code> function and how it is called when a division-by-zero error occurs. </p> Example<pre><code>;; Define the on-error function\n(defun on-error (error-type message) (print \"Error:\" error-type message)) \n\n;; Cause an division-by-zero error\n;; This will implicitly call the function\n(/ 0 0)                                      \n</code></pre>"},{"location":"development/AttributePolicies/","title":"Attribute Policies","text":"<p>This article describes the attribute policies used by the ACME CSE. </p> <p>During startup the CSE reads the attribute policies for common resource types and complex type definitions from the files with the extension <code>.ap</code> in the init and secondary init directory, for example attributePolicies.ap. More than one attribute policy file can be added.</p>"},{"location":"development/AttributePolicies/#attribute-policy-format","title":"Attribute Policy Format","text":"<p>The CSE uses attribute policies for validating the attributes of all the supported resource types. The following code specifies the JSON structure to describe a single atttribute. </p> <p>Some of the fields are not yet used, but will supported by a future version of the CSE. </p> Attribute Policy Format<pre><code>// A single attribute is a JSON object.\n{\n    // A list of oneM2M resource types that use this attribute.\n    // This attribute is optional and used for the general \n    // attributePolicies, but not for flexContainers.\n    //\n    // The folling special attribute types are also allowed:\n    //\n    // - ALL     : This attribute definition is suitable for all resource types \n    //             for which it is a member\n    // - REQRESP : This attribute definition is suitable for request and \n    //             response type resources.\n    // - COMPLEX : This attribute definition is suitable for complex type\n    \"rtypes\" : [ &lt;ResourceType&gt; ]\n\n    // The attribute's short name. \n    // Mandatory.\n    \"sname\" : \"attributeShortName\", \n\n    // The attribute's long name. \n    // Optional, and for future developments.\n    \"lname\" : \"attributeLongName\", \n\n    // The attribute's namespace.\n    // Optional, the default is \"m2m\".\n    \"ns\"    : \"namespace\",\n\n    // The attribute's data type. \n    // Mandatory, and one from this list:\n    // \n    // - integer\n    // - positiveInteger\n    // - nonNegInteger\n    // - unsignedInt\n    // - unsignedLong\n    // - string\n    // - timestamp\n    // - list\n    // - dict - any anonymous complex structure. This should be avoided and \n    //          be replaced by a complex type name\n    // - adict (anonymous dict)\n    // - anyURI\n    // - boolean\n    // - enum\n    // - geoCoordinates\n    // - schedule\n    // - base64\n    // - duration\n    //\n    // In addition to the list above, the *attributeType* can be the name of any defined\n    // complex type. This complex type must be defined in any of the attribute policy files.\n    \"type\"  : \"attributeType\", \n\n    // The sub-type of a list type.\n    // This can be any of the types defined for *type*, or a complex type.\n    \"ltype\" : \"type\",\n\n    // The fixed size of a list type.\n    // This is the expected number of elements in the list.\n    // This is only used for list types. If the list is not fixed, this field is not present.\n    \"lsize\" : integer,\n\n    // The complex type name for a complex type attribute.\n    // This is the name of the parent complex type to which an attribute belongs.\n    // This attribute is only present in an attribute policy definition when\n    // this attribute belongs to a complex type.\n    \"ctype\" : \"complexType\",\n\n    // Indicates an attribute that is a member of a choice.\n    // This is a boolean value, and only present if the attribute is a member of a choice. This\n    // means that from all the attributes in a structure, only one of them can be present.\n    // Usually this is used for complex types.\n    \"choice\": boolean, \n\n    // Definition of enumeration values.\n    // This can only be an integer value, or range definitions in the format\n    // \"start..end\" that evaluate to all the integer values of the given range.\n    \"evalues\" : [ 1, 2, \"3..5\", 6 ],\n\n    // Definition of an enumeration type and an alternative to \"evalues\".\n    // This is an enumerated data type name that is referenced. \n    \"etype\" : \"enumeratedDataType\",\n\n    // The \"oc\" field specifies the CREATE request optionality. Optional, and one from this list:\n    //  - O  : Optional provided (default)\n    //  - M  : Mandatory provided\n    //  - NP : Not provided\n    \"oc\"    : \"O|M|NP\",\n\n    // The \"ou\" field specifies the UPDATE request optionality. \n    // Optional, and one from this list:\n    //\n    // - O  : Optional provided (default)\n    // - M  : Mandatory provided\n    // - NP : Not provided\n    \"ou\"    : \"O|M|NP\",\n\n    // The \"od\" field specifies the DISCOVERY request optionality. \n    // Optional, and one from this list:\n    //\n    // - O  : Optional provided (default)\n    // - M  : Mandatory provided\n    // - NP : Not provided\n    \"od\"    : \"O|M|NP\",\n\n    // The \"annc\" field specifies whether an announced optionality. \n    // Optional, and one from this list:\n    //\n    // - OA : Optional announced (default)\n    // - MA : Mandatory announced\n    // - NA : Not announced\n    \"annc\": \"OA|MA|NA\",\n\n    // The attribute multiplicity. \n    // Optional, and one from this list:\n    //\n    // - 01  : The attribute is optional (default)\n    // - 01L : the attribute is an optional list\n    // - 1   : The attribute is mandatory\n    // - 1L  : The attribute is a mandatory list\n    \"car\" : \"01|01L|1|1L\",\n}\n</code></pre>"},{"location":"development/AttributePolicies/#complex-types","title":"Complex Types","text":"<p>Complex types are defined in the attribute policy files as well. Complex types are defined in files with the extension <code>.ap</code>. The CSE reads the complex type definitions from the init and secondary init directory, for example complexTypePolicies.ap. More than one complex type file can be provided.</p> <p>Complex types are defined indirectly by assigning attributes to them. Attributes for a complex types are defined in the same way as for common resource types. The only difference is that the ctype field is set to the name of the complex type the attribute belongs to. If an attribute belongs to more than one complex type, the attribute definition is repeated for each complex type.</p> <p>The rtypes field must by set to \"COMPLEX\" for complex type attributes. </p> <p>The following example shows the definition of an attribute that belongs to multiple complex types.</p> Complex Type Attribute Example<pre><code>    \"dur\": [\n        // This attribute is defined for the complex type m2m:batchNotify\n        {\n            \"rtypes\": [ \"COMPLEX\" ],\n            \"ctype\": \"m2m:batchNotify\",\n            \"lname\": \"duration\",            \n            \"ns\": \"m2m\",\n            \"type\": \"duration\",\n            \"car\": \"01\"\n        },\n\n        // This attribute is defined for the complex type m2m:misingData\n        {\n            \"rtypes\": [ \"COMPLEX\" ],\n            \"ctype\": \"m2m:missingData\",\n            \"lname\": \"duration\",            \n            \"ns\": \"m2m\",\n            \"type\": \"duration\",\n            \"car\": \"1\"\n        }\n    ]\n</code></pre>"},{"location":"development/AttributePolicies/#enumeration-data-types","title":"Enumeration Data Types","text":"<p>In addition to the attribute and complex type policies defined above, enumeration types are defined in files with the extension <code>.ep</code>. The CSE reads the enumeration data types from the init and secondary init directory, for example enumTypesPolicies.ep. More than one enumeration data type file can be provided.</p> <p>The format is a JSON structure that follows the structure described in the following code.  </p> Enumeration Data Type Format<pre><code>// The attributePolicy.ep file contains a dictionary of enumeration data types\n{\n\n    // Each enumeration definition is identified by its name. \n    It is a dictionary.\n    \"enumerationType\": {\n\n        // An enumeration definition is key value pair.\n        // The key is the enumeration value (usually an integer),\n        // and  the value is the  interpretation of that value.\n        // This entry can be repeated for each enumeration value.\n        \"&lt;enumeration value&gt;\" : \"&lt;enumeration interpretation&gt;\"\n    }\n}\n</code></pre> <p>The following example show the definition for an enumeration data type.</p> Enumeration Data Type Example<pre><code>{\n    \"m2m:resultContent\" : {\n        \"0\": \"Nothing\",\n        \"1\": \"Attributes\",\n        \"2\": \"Hierarchical address\",\n        \"3\": \"Hierarchical address and attributes\",\n        \"4\": \"Attributes and child resources\",\n        \"5\": \"Attributes and child resource references\",\n        \"6\": \"Child resource references\",\n        \"7\": \"Original resource\",\n        \"8\": \"Child resources\",\n        \"9\": \"Modified attributes\",\n        \"10\": \"Semantic content\",   \n        \"11\": \"Semantic content and child resources\",\n        \"12\": \"Permissions\"\n    },\n}\n</code></pre> <p>Example</p> <p>The following gives an example for the attribute ty (resourceType).</p> <pre><code>{\n    \"rn\": [\n        {\n            \"rtypes\": [ \"ALL\" ],\n            \"lname\": \"resourceName\",\n            \"ns\": \"m2m\",\n            \"type\": \"string\",\n            \"car\": \"1\",\n            \"oc\": \"O\",\n            \"ou\": \"NP\",\n            \"od\": \"O\",\n            \"annc\": \"NA\"\n        }\n    ],\n    \"ty\": [\n        {\n            \"rtypes\": [ \"ALL\" ],\n            \"lname\": \"resourceType\",\n            \"ns\": \"m2m\",\n            \"type\": \"enum\",\n            \"etype\": \"m2m:resourceType\",\n            \"car\": \"1\",\n            \"oc\": \"NP\",\n            \"ou\": \"NP\",\n            \"od\": \"O\",\n            \"annc\": \"NA\"\n        }\n    ]\n}\n</code></pre> <p>Complex Type Attribute</p> <p>The following example shows the definition of the attribute operator (optr) that belongs to the complex type m2m:evalCriteria.</p> <pre><code>{\n    \"optr\": [\n        {\n            \"rtypes\": [ \"COMPLEX\" ],\n            \"ctype\": \"m2m:evalCriteria\",\n            \"lname\": \"operator\",\n            \"ns\": \"m2m\",\n            \"type\": \"enum\",\n            \"etype\": \"m2m:evalCriteriaOperator\",\n            \"car\": \"1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"development/DebugMode/","title":"Debug Mode","text":"<p>The CSE tries to catch errors and give helpful advice as much as possible during runtime. However, there are circumstances when this could not done easily, e.g. during startup.</p> <p>In order to provide additional information in these situations one can set the ACME_DEBUG environment variable (to any value):</p> Set the ACME_DEBUG environment variable<pre><code>export ACME_DEBUG=1\n</code></pre> <p>Then run the CSE as usual. </p>"},{"location":"development/Embedding_ACME/","title":"Embeddeding Into Other Projects","text":"<p>This article describes how to embed the CSE into other applications and how to run it in a Jupyter Notebook.</p>"},{"location":"development/Embedding_ACME/#introduction","title":"Introduction","text":"<p>It is possible to integrate the CSE into other applications. In this case you would possibly like to provide startup arguments, for example the path of the configuration file or the logging level, directly instead of getting them from the command line via argparse.</p> <p>You might want to get the example from the main file acme/__main__.py where you could replace the line:</p> Replace this line from the main file<pre><code>CSE.startup(parseArgs())\n</code></pre> <p>with a call to the CSE's startup() function for your application:</p> Call the CSE's startup function<pre><code>CSE.startup(None, configfile=defaultConfigFile, loglevel='error')\n</code></pre> <p>Note</p> <p>The first argument of the startup() function is the argparse arguments. In case you provide the arguments directly the first argument may need to be <code>None</code>. </p> <p>The names of the argparse variables can be used here, and you may provide all or only some of the arguments. Please note that you need to keep or copy the <code>import</code> and <code>sys.path</code> statements at the top of that file.</p>"},{"location":"development/Embedding_ACME/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>Since ACME CSE is written in pure Python it can be run in a Jupyter Notebook. The following code could be copied to a notebook cell to run the CSE.</p> Run the CSE in a Jupyter Notebook<pre><code># Increase the width of the notebook to accommodate the log output\nfrom IPython.display import display, HTML\ndisplay(HTML(\"&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;\"))\n\n# Change to the CSE's directory and start the CSE\n# Ignore the error from the %cd command\n%cd -q tools/ACME   # adopt this to the location of the ACME CSE\n%run -m acme -- --headless\n</code></pre> <p>Note the following:</p> <ul> <li>The CSE should be run in headless mode to avoid too much output to the notebook.</li> <li>Once executed the notebook cell will not finish its execution. It is therefore recommended to run the CSE in a separate notebook.</li> <li>The CSE can only be stopped by stopping or restarting the notebook's Python kernel.</li> </ul>"},{"location":"development/FlexContainerPolicies/","title":"FlexContainer Specialization Policies","text":"<p>This article describes the flexContainer specialization policies used by the ACME CSE.</p> <p>For all &lt;flexContainer&gt; specializations, e.g. for oneM2M's TS-0023 ModuleClasses, the attribute policies and the allowed &lt;flexContainer&gt; hierarchy must be provided. </p> <p>The files for &lt;flexContainer&gt; specializations are also automatically imported from the init and secondary init directory. More than one such file can be provided, for example one per domain. The files must have the extension <code>.fcp</code>. </p> <p>The format is a JSON structure that follows the structure described in the following code.  </p> <p>FlexContainer Specialization Policy Format<pre><code>[\n// A file contains a list of FlexContainer Specialization Policies\nspecializationPolicy = [\n\n    // Each FlexContainer Specialization Policies is a JSON object\n    {\n        // The specialisation's namespace and short name. \n        // Mandatory.\n        \"type\"      : \"namespace:shortname\",\n\n        // The specialisation's long name. \n        // Optional, and for future developments.\n        \"lname\"     : \"specialisationLongname\",\n\n        // The specialisation's containerDefinition. \n        // Mandatory for flexContainers, but can be empty to prevent warnings.\n        \"cnd\"       : \"containerDefinition\",\n\n        // The specialisation's SDT type. \n        // Could be one of \"device\", \"subdevice\", \"moduleclass\", or \"action\". \n        // Optional, and for future developments.\n        \"sdttype\"   : \"SDTcontainerType\",\n\n        // A list of attribute policies. \n        // Each entry specifies a single attribute of the specialization.\n        // Optional.\n        \"attributes\": [ attributePolicy, attributePolicy, ... ],\n\n        // A list of child resource types. Optional.\n        \"children\"  : [\n            // This list consists of one or more strings, each of those is the name of an additional\n            // child resource specialisation. It is not necessary to specify here the already allowed\n            // child resource types of &lt;flexContainer&gt;.\n        ]\n    }]\n]\n</code></pre> The attributePolicies are the same as described in the Attribute Policies article.</p> <p>See also oneM2M's TS-0023 specification rules for more information when defining new ModuleClasses and DeviceClasses.</p>"},{"location":"development/FlexContainerPolicies/#examples","title":"Examples","text":"<p>The following examples show the attribute policies for the binarySwitch and deviceLight specialisations, both defined in oneM2M's TS-0023 specification.</p> FlexContainer specialization binarySwitch.fcp<pre><code>[\n    // ModuleClass: binarySwitch (binSh)\n    {\n        \"type\"      : \"cod:binSh\",\n        \"lname\"     : \"binarySwitch\",\n        \"cnd\"       : \"org.onem2m.common.moduleclass.binarySwitch\",\n        \"attributes\": [\n            // DataPoint: dataGenerationTime\n            {\n                \"sname\" : \"dgt\", \n                \"lname\" : \"dataGenerationTime\", \n                \"type\" : \"timestamp\", \n                \"car\" : \"01\"\n            }, \n\n            // DataPoint: powerState\n            { \n                \"sname\" : \"powSe\", \n                \"lname\" : \"powerState\", \n                \"type\" : \"boolean\", \n                \"car\" : \"1\" \n            }\n        ]\n    }\n]\n</code></pre> deviceLight.fcp<pre><code>[\n    // ModuleClass: binarySwitch (binSh)\n    {\n        \"type\"      : \"cod:binSh\",\n        \"lname\"     : \"binarySwitch\",\n        \"cnd\"       : \"org.onem2m.common.moduleclass.binarySwitch\",\n        \"attributes\": [\n            // DataPoint: dataGenerationTime\n            { \n                \"sname\" : \"dgt\",\n                \"lname\" : \"dataGenerationTime\",\n                \"type\" : \"timestamp\",\n                \"car\" : \"01\"\n            }, \n\n            // DataPoint: powerState\n            { \n                \"sname\" : \"powSe\", \n                \"lname\" : \"powerState\", \"type\" :\n                \"boolean\", \n                \"car\" : \"1\" \n            }\n        ]\n    }, \n\n    // DeviceClass: deviceLight\n    {\n        \"type\"      : \"cod:devLt\",\n        \"lname\"     : \"deviceLight\",\n        \"cnd\"       : \"org.onem2m.common.device.deviceLight\",\n\n        // The allowed child resource types\n        \"children\"  : [\n            \"cod:fauDn\", \n            \"cod:binSh\", \n            \"cod:runSe\", \n            \"cod:color\", \n            \"cod:colSn\", \n            \"cod:brigs\"\n        ]\n    }\n]\n</code></pre>"},{"location":"development/FlexContainerPolicies/#self-defined-specializations","title":"Self-Defined Specializations","text":"<p>It is possible to define own specializations that need to be placed in schema files, similar to the provided ones. These files must have the <code>.fcp</code> extension and must be placed in one of the init or secondary init directories. They are imported automatically when the CSE starts.</p> <p>The self-defined schema files have to follow the format described above. </p>"},{"location":"development/FlexContainerPolicies/#example-defining-a-new-specialization","title":"Example: Defining a New Specialization","text":"<p>The following example shows a specialization for a new ModuleClass myKeyValue in the domain myDomain (short name: mdm). The ModuleClass has three DataPoints: key, which is mandatory, and two optional stringValue and integerValue attributes.</p> FlexContainer specialization myKeyValue.fcp<pre><code>[\n    // ModuleClass: myKeyValue (myKVe) \n    {\n        \"type\"      : \"mdm:myKVe\",\n        \"lname\"     : \"myKeyValue\",\n        \"cnd\"       : \"org.myDomain.myKeyValue\",\n        \"attributes\": [\n            // DataPoint: key\n            {\n                \"sname\" : \"key\", \n                \"lname\" : \"key\", \n                \"type\" : \"string\", \n                \"car\" : \"1\"\n            }, \n\n            // DataPoint: stringValue\n            { \n                \"sname\" : \"strVe\", \n                \"lname\" : \"stringValue\", \n                \"type\" : \"string\", \n                \"car\" : \"01\" \n            },\n\n\n            // DataPoint: integerValue\n            { \n                \"sname\" : \"intVe\", \n                \"lname\" : \"integerValue\", \n                \"type\" : \"integer\", \n                \"car\" : \"01\" \n            }\n\n        ]\n    }\n]\n</code></pre>"},{"location":"development/FlexContainerPolicies/#using-self-defined-specializations","title":"Using Self-Defined Specializations","text":"<p>Once defined and placed in the correct directory, and after restarting the CSE, the self-defined specializations can be used in the same way as the provided ones.</p>"},{"location":"development/HelpDocumentation/","title":"Help File Format","text":"<p>Some CSE UI components provide a markdown documentation to the user, such as the Text UI. That documentation is imported from the init directory as well. The file extension for documentation files is <code>.docmd</code>. </p>"},{"location":"development/HelpDocumentation/#format","title":"Format","text":"<p>In the documentation file individual sections are separated by markdown level-1 headers where the header title is the help topic for the following section, which is markdown text with the acual help text.</p>"},{"location":"development/HelpDocumentation/#examples","title":"Examples","text":"<pre><code># Topic 1\n\nSome help text for topic 1 in markdown format.\n\n## Help sub section that belongs to topic 1\n\nSome help text for the sub section in markdown format.\n\n# Topic 2\n\nAnother help text for topic 2 in markdown format.\n\n...\n</code></pre>"},{"location":"development/Overview/","title":"Overview","text":"<p>This article provides an overview of the ACME CSE's architecture, components, and database schemas. </p>"},{"location":"development/Overview/#components","title":"Components","text":"<p>The ACME CSE is divided into several components. The following diagram shows the components and their relationships.</p> <p> </p> UML Component Diagram of the ACME CSE"},{"location":"development/Overview/#resource-class-hierarchy","title":"Resource Class Hierarchy","text":"<p>The CSE's resources are implemented as classes. The following diagram shows the class hierarchy of the supported resource types.</p> <p> </p> UML Class Diagram of the Supported oneM2M Resources Types"},{"location":"development/Overview/#database-schemas","title":"Database Schemas","text":"Database Schemas of the ACME CSE <p>If the tinyDB database mode is used the database files are stored in the <code>data</code> sub-directory of the CSE's working directory. </p> <p>The database used by the CSE is TinyDB which uses plain JSON files for storing the data. Some files only contain a single data table while other contain multiple tables.</p> <p>The filenames include the CSE-ID of the running CSE, so if multiple CSEs are running and are using the same data directory then they won't interfere with each other. The database files are copied to a backup directory at CSE startup.</p> <p>Some database tables duplicate attributes from actual resources, e.g. in the subscription database. This is mainly done for optimization reasons in order to prevent a retrieval and instantiation of a full resource when only a few attributes are needed.</p>"},{"location":"development/StartupResources/","title":"Start-Up Resources","text":"<p>This article describes the startup process of the CSE, how to import resources, and attribute definitions.</p>"},{"location":"development/StartupResources/#initial-resources","title":"Initial Resources","text":"<p>During CSE startup and restart it is necessary to import a first set of resources to the CSE. This is done automatically by the CSE by running a script that has the @init meta tag set. By default this is the init.as script from the init directory.</p> <p>Not much validation, access control, or registration procedures are performed when importing resources this way.</p> <p>See also</p> <p>The meta tag @init</p>"},{"location":"development/StartupResources/#adding-mandatory-resources-to-the-cse","title":"Adding Mandatory Resources to the CSE","text":"<p>Please note that it is required for a functional CSE deployment to create the CSE's CSEBase, the administration AE, and a general-access ACP resources. Those are created before all other resources, so that the CSEBase resource can act as the root for the resource tree, and basic permissions are provided.</p>"},{"location":"development/StartupResources/#adding-other-resources","title":"Adding other Resources","text":"<p>An option to import more resources automatically whenever the CSE starts or restarts is to have a script as an event handler for the onStartup and onRestart events.</p> <p>These scripts can be added to the Secondary init Directory, which is located in the base directory of the CSE, and from where resources are imported after the primary init directory has been processed.</p> <p>See also</p> <p>The meta tags onStartup, onRestart Secondary init Directory</p>"},{"location":"development/StartupResources/#referencing-configuration-settings","title":"Referencing Configuration Settings","text":"<p>By using macros the initial resources can be kept independent from individual settings.  Most configuration settings can be added by macro replacement. For this a given macro name is enclosed by <code>${...}</code>, e.g. <code>${cse.cseID}</code>. </p> <p>The following example shows the initial CSEBase resource definition from the init.as script file:</p> init.as<pre><code>(import-raw \n    (get-config \"cse.originator\") ;(1)!\n    {\"m2m:cb\": {\n        \"ri\":   \"${ get-config \\\"cse.resourceID\\\" }\", ;(2)!\n        \"rn\":   \"${ get-config \\\"cse.resourceName\\\" }\",\n        \"csi\":  \"${ get-config \\\"cse.cseID\\\" }\",\n        \"rr\":   true,\n        \"csz\":  [ \"application/json\", \"application/cbor\" ],\n        \"acpi\": [ \"${ get-config \\\"cse.cseID\\\" }/acpCreateACPs\" ],\n        \"poa\":  [ \"${ get-config \\\"http.address\\\" }\" ]\n    }})\n</code></pre> <ol> <li>The <code>get-config</code> function is used to retrieve the configuration setting for the CSE's originator.</li> <li>The <code>${...}</code> macro is used to replace the configuration setting for the CSE's resource ID in a string.</li> </ol> <p>See also</p> <p>Evaluating S-Expressions in Strings and JSON Structures</p>"},{"location":"development/ThirdPartyLibraries/","title":"Third Party Components","text":"<p>The following third-party components are used by the ACME CSE.</p>"},{"location":"development/ThirdPartyLibraries/#core-cse","title":"Core CSE","text":"<ul> <li>The cachetools package provides caching utilities. MIT License.</li> <li>The cbor2 package is used to parse and create CBOR serializations. MIT License.</li> <li>InquirerPy is a collection of common interactive command-line interfaces. MIT License.</li> <li>The isodate package is used to parse and handle ISO 8601 time, date, and duration. BSD License.</li> <li>The plotext library offers functions to plot graphs in the text console. MIT License.</li> <li>rdflib is a Python library for working with RDF. BSD 3-Clause License.</li> <li>The CSE uses the Rich text formatter library to format various terminal output. MIT License. </li> <li>shapely is a library for manipulation and analysis of geometric objects. BSD 3-Clause License. </li> </ul>"},{"location":"development/ThirdPartyLibraries/#connectivity","title":"Connectivity","text":"<ul> <li>For the CoAP protocol binding implementation the ACME CSE uses a fork of the coapthon3 library. MIT Licsense. The fork is available on GitHub as CoAPthon3-ACME-CSE and on PyPi as coapthon3-acme-cse.</li> <li>The CSE uses the Flask web framework to service http(s) requests. BSD 3-Clause License.</li> <li>flask-cors is a Flask extension for handling Cross Origin Resource Sharing (CORS), making cross-origin AJAX possible.</li> <li>The paho-mqtt library provides a client class which enables applications to connect to an MQTT broker. Eclipse Public License 1.0 .</li> <li>The CSE uses the Requests HTTP Library to send requests vi http. Apache2 License</li> <li>waitress is a production-quality pure-Python WSGI server with very acceptable performance. ZPL 2.1 License.</li> </ul>"},{"location":"development/ThirdPartyLibraries/#database","title":"Database","text":"<ul> <li>Psycopg is a PostgreSQL adapter for the Python programming language. GNU Lesser General Public License.</li> <li>To store resources the CSE uses the lightweight TinyDB document database. MIT License.</li> </ul>"},{"location":"development/ThirdPartyLibraries/#text-ui","title":"Text UI","text":"<ul> <li>Textual is a Rapid Application Development framework for to build textual user interfaces in Python. MIT License.</li> <li>pyperclip is a cross-platform Python module for copying and pasting text to the clipboard. BSD-3-Clause License.</li> </ul>"},{"location":"development/ThirdPartyLibraries/#web-ui","title":"Web UI","text":"<ul> <li>TreeJS: https://github.com/m-thalmann/treejs, MIT License.</li> <li>Picnic CSS : https://picnicss.com, MIT License.</li> </ul>"},{"location":"development/TypeChecking/","title":"Type Checking","text":"<p>The CSE code is statically type-checked with mypy. </p> <p>Just execute the <code>mypy</code> command in the project's root directory and make sure that the mypy.ini file is present. The configuration file contains the setting for the type-checking process.</p> Run mypy in the project's root directory<pre><code>mypy\n</code></pre>"},{"location":"development/UnitTests/","title":"Unit Tests","text":"<p>Almost all aspects of the ACME CSE implementation are covered by unit tests based on the Python unittest framework. The files for the individual test suites and the runner application reside in the project's tests directory.</p>"},{"location":"development/UnitTests/#configuration","title":"Configuration","text":"<p>The actual configuration of the test suite is done in the file config.py. You may change these for your individual set-up. At the top of the configuartion is a configuration setting for the request protocol that should be used. Currently, http, https, ws, wss, and mqtt are supported. </p> <p>Note</p> <p>All CSE's involved in the tests must use the same protocol type.</p> <p>Further configuration settings include the originatores for admin access, self-registration, and remote CSE settings when running tests for CSE-2-CSE (Mcc) communications, </p> <p>One can also provide OAuth2 settings in case the CSE under test is behind an OAuth2 gateway.</p>"},{"location":"development/UnitTests/#enable-remote-configuration-upper-tester","title":"Enable Remote Configuration (Upper Tester)","text":"<p>The CSE under test can be started with the remote configuration interface enabled. During test runs the test suite will temporarily change some of the CSE's delays (e.g. the check for resource expirations) in order to speed up the test. You can either do this by changing the configuration http.enableUpperTesterEndpoint in the CSE's configuration file.</p> <p>Note</p> <p>This ability to remotely re-configure the CSE during runtime is a particular function of the  ACME CSE and might not be available with other CSE implementations.</p> <p>The use of the Upper Tester interface can be disabled by setting the <code>--disable-uppertester</code> option when running the tests.</p>"},{"location":"development/UnitTests/#internal-settings","title":"Internal Settings","text":"<p>Each test suite imports the file init.py that contains various helper functions. Also, some low-level configurations, such as time-outs etc, that are used by the test suites can be adjusted here. </p>"},{"location":"development/UnitTests/#test-suites","title":"Test Suites","text":"<p>For each aspect of the CSE there is one test suite file that can be run independently or in the course of an overall test. For example, running the test suite for AE tests would look like this:</p> Example Test Suite Run<pre><code>$ python3 testAE.py\ntest_createAE (__main__.TestAE) ... ok\ntest_createAEUnderAE (__main__.TestAE) ... ok\ntest_retrieveAE (__main__.TestAE) ... ok\ntest_retrieveAEWithWrongOriginator (__main__.TestAE) ... ok\ntest_attributesAE (__main__.TestAE) ... ok\ntest_updateAELbl (__main__.TestAE) ... ok\ntest_updateAETy (__main__.TestAE) ... ok\ntest_updateAEPi (__main__.TestAE) ... ok\ntest_updateAEUnknownAttribute (__main__.TestAE) ... ok\ntest_retrieveAEACP (__main__.TestAE) ... ok\ntest_deleteAEByUnknownOriginator (__main__.TestAE) ... ok\ntest_deleteAEByAssignedOriginator (__main__.TestAE) ... ok\n----------------------------------------------------------------------\nRan 12 tests in 0.116s\nOK\n</code></pre> <p>The individual test suites are located in the tests directory. Their names start with test... and are grouped by the aspect of the CSE they are testing.</p>"},{"location":"development/UnitTests/#test-runner","title":"Test Runner","text":""},{"location":"development/UnitTests/#overview","title":"Overview","text":"<p>The <code>--help</code> or <code>-h</code> command line argument provides a usage overview for the runTest.py script.</p> Test Runner Overview<pre><code>$ python runTests.py -h\n\nusage: runTests.py [-h] [--all] [--load-only] [--verbose-requests] [--disable-teardown]\n                   [--exclude-tests EXCLUDETESTS [EXCLUDETESTS ...]] [--run-teardown]\n                   [--run-count NUMBEROFRUNS] [--disable-uppertester]\n                   [--run-tests TESTCASENAME [TESTCASENAME ...]] \n                   [--show-skipped] [--no-failfast]\n                   [--local-notification-server] [--list-tests | --list-tests-sorted]\n                   [TESTSUITE ...]\n\npositional arguments:\n  TESTSUITE             specific test suites to run. Run all test suites if empty\n\noptions:\n  -h, --help            show this help message and exit\n  --all                 run all test suites (including load tests)\n  --load-only           run only load test suites\n  --verbose-requests, -v\n                        show verbose requests, responses and notifications output\n  --disable-teardown, -notd\n                        disable the tear-down / cleanup procedure at the end of a test suite\n  --disable-uppertester, -nout\n                        disable the use of the upper tester interface\n  --exclude-tests EXCLUDETESTS [EXCLUDETESTS ...], -et EXCLUDETESTS [EXCLUDETESTS ...]\n                        exclude the specified test cases from running\n  --run-teardown, -runtd\n                        run the specified test cases' tear-down functions and exit\n  --run-count NUMBEROFRUNS\n                        run each test suite n times (default: 1)\n  --run-tests TESTCASENAME [TESTCASENAME ...], -run TESTCASENAME [TESTCASENAME ...]\n                        run only the specified test cases from the set of test suites\n  --show-skipped        show skipped test cases in summary\n  --no-failfast         continue running test cases after a failure\n   --local-notification-server, -lns\n                        use a local notification server address\n  --list-tests, -ls     list the test cases of the specified test suites in the order they are defined and exit\n  --list-tests-sorted, -lss\n                        alphabetical sorted list the test cases of the specified test suites and exit\n</code></pre>"},{"location":"development/UnitTests/#running-the-tests","title":"Running the Tests","text":"<p>The Python script runTests.py can be used to run all test suites. It looks for all Python scripts starting with test... and runs them in alphabetical order. At the end of a full test run it also provides a summary of the test results, including time spend for requests, as a process etc.</p> <p>Usually, the test suites are run only once, but one can specify the --run-count option to execute tests multiple times.</p> Example Test Run<pre><code>$ python3 runTests.py\n\n...\n\n                                                       [ACME] - Test Results\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503                     \u2503       \u2503         \u2503        \u2503            Times             \u2503   Exec Time per   \u2503   Proc Time per   \u2503          \u2503\n\u2503 Test Suite          \u2503 Count \u2503 Skipped \u2503 Errors \u2503     Exec | Sleep | Proc      \u2503  Test | Request   \u2503  Test | Request   \u2503 Requests \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 testACP             \u2502    45 \u2502       0 \u2502      0 \u2502   0.2232 |   0.00 |   0.0786 \u2502  0.0050 |  0.0030 \u2502  0.0017 |  0.0011 \u2502       74 \u2502\n\u2502 testACTR            \u2502    39 \u2502       0 \u2502      0 \u2502  12.6369 |  12.00 |   0.1909 \u2502  0.3240 |  0.1600 \u2502  0.0049 |  0.0024 \u2502       79 \u2502\n\u2502 testAE              \u2502    26 \u2502       0 \u2502      0 \u2502   0.1724 |   0.00 |   0.0634 \u2502  0.0066 |  0.0049 \u2502  0.0024 |  0.0018 \u2502       35 \u2502\n\u2502 testAddressing      \u2502    10 \u2502       0 \u2502      0 \u2502   0.0543 |   0.00 |   0.0185 \u2502  0.0054 |  0.0034 \u2502  0.0019 |  0.0012 \u2502       16 \u2502\n\u2502 testCIN             \u2502    17 \u2502       0 \u2502      0 \u2502   0.0920 |   0.00 |   0.0307 \u2502  0.0054 |  0.0033 \u2502  0.0018 |  0.0011 \u2502       28 \u2502\n\u2502 testCNT             \u2502    22 \u2502       0 \u2502      0 \u2502   0.1021 |   0.00 |   0.0345 \u2502  0.0046 |  0.0038 \u2502  0.0016 |  0.0013 \u2502       27 \u2502\n\u2502 testCNT_CIN         \u2502    30 \u2502       0 \u2502      0 \u2502   4.9574 |   4.50 |   0.1998 \u2502  0.1652 |  0.0496 \u2502  0.0067 |  0.0020 \u2502      100 \u2502\n\u2502 testCRS             \u2502    93 \u2502       0 \u2502      0 \u2502 185.6518 | 183.10 |   0.7760 \u2502  1.9963 |  0.7672 \u2502  0.0083 |  0.0032 \u2502      242 \u2502\n\u2502 testCSE             \u2502     8 \u2502       0 \u2502      0 \u2502   0.0810 |   0.00 |   0.0375 \u2502  0.0101 |  0.0101 \u2502  0.0047 |  0.0047 \u2502        8 \u2502\n\u2502 testDEPR            \u2502    18 \u2502       0 \u2502      0 \u2502  10.6709 |  10.00 |   0.2192 \u2502  0.5928 |  0.1270 \u2502  0.0122 |  0.0026 \u2502       84 \u2502\n\u2502 testDiscovery       \u2502    58 \u2502       0 \u2502      0 \u2502   0.3509 |   0.00 |   0.1089 \u2502  0.0061 |  0.0038 \u2502  0.0019 |  0.0012 \u2502       92 \u2502\n\u2502 testExpiration      \u2502     9 \u2502       0 \u2502      0 \u2502  30.4013 |  30.00 |   0.1313 \u2502  3.3779 |  0.6609 \u2502  0.0146 |  0.0029 \u2502       46 \u2502\n\u2502 testFCNT            \u2502    24 \u2502       0 \u2502      0 \u2502   0.1461 |   0.00 |   0.0507 \u2502  0.0061 |  0.0052 \u2502  0.0021 |  0.0018 \u2502       28 \u2502\n\u2502 testFCNT_FCI        \u2502    11 \u2502       0 \u2502      0 \u2502   0.0740 |   0.00 |   0.0236 \u2502  0.0067 |  0.0031 \u2502  0.0021 |  0.0010 \u2502       24 \u2502\n\u2502 testGRP             \u2502    28 \u2502       0 \u2502      0 \u2502   0.1827 |   0.00 |   0.0541 \u2502  0.0065 |  0.0033 \u2502  0.0019 |  0.0010 \u2502       55 \u2502\n\u2502 testLCP             \u2502    13 \u2502       0 \u2502      0 \u2502   8.2762 |   6.00 |   0.1372 \u2502  0.6366 |  0.3448 \u2502  0.0106 |  0.0057 \u2502       24 \u2502\n\u2502 testLocation        \u2502    73 \u2502       0 \u2502      0 \u2502   0.5622 |   0.00 |   0.1768 \u2502  0.0077 |  0.0031 \u2502  0.0024 |  0.0010 \u2502      182 \u2502\n\u2502 testMgmtObj         \u2502    89 \u2502       0 \u2502      0 \u2502   0.3589 |   0.00 |   0.1246 \u2502  0.0040 |  0.0039 \u2502  0.0014 |  0.0014 \u2502       91 \u2502\n\u2502 testMisc            \u2502    27 \u2502       0 \u2502      0 \u2502   5.3855 |   5.00 |   0.2005 \u2502  0.1995 |  0.1346 \u2502  0.0074 |  0.0050 \u2502       40 \u2502\n\u2502 testNOD             \u2502    13 \u2502       0 \u2502      0 \u2502   0.1831 |   0.00 |   0.0719 \u2502  0.0141 |  0.0057 \u2502  0.0055 |  0.0022 \u2502       32 \u2502\n\u2502 testPCH             \u2502    13 \u2502       0 \u2502      0 \u2502   0.0660 |   0.00 |   0.0233 \u2502  0.0051 |  0.0035 \u2502  0.0018 |  0.0012 \u2502       19 \u2502\n\u2502 testPCH_PCU         \u2502    11 \u2502       0 \u2502      0 \u2502  30.4732 |  15.00 |   0.2164 \u2502  2.7703 |  0.7432 \u2502  0.0197 |  0.0053 \u2502       41 \u2502\n\u2502 testPRMR_STTE       \u2502     3 \u2502       0 \u2502      0 \u2502   0.0467 |   0.00 |   0.0181 \u2502  0.0156 |  0.0093 \u2502  0.0060 |  0.0036 \u2502        5 \u2502\n\u2502 testREQ             \u2502    25 \u2502       0 \u2502      0 \u2502  46.4165 |  45.50 |   0.3721 \u2502  1.8567 |  1.1321 \u2502  0.0149 |  0.0091 \u2502       41 \u2502\n\u2502 testRemote          \u2502     7 \u2502       0 \u2502      0 \u2502   0.1056 |   0.00 |   0.0389 \u2502  0.0151 |  0.0075 \u2502  0.0056 |  0.0028 \u2502       14 \u2502\n\u2502 testRemote_Annc     \u2502    42 \u2502       0 \u2502      0 \u2502   1.2401 |   0.00 |   0.1910 \u2502  0.0295 |  0.0188 \u2502  0.0045 |  0.0029 \u2502       66 \u2502\n\u2502 testRemote_GRP      \u2502     2 \u2502       0 \u2502      0 \u2502   0.0833 |   0.00 |   0.0155 \u2502  0.0416 |  0.0167 \u2502  0.0077 |  0.0031 \u2502        5 \u2502\n\u2502 testRemote_Requests \u2502     3 \u2502       0 \u2502      0 \u2502   0.1789 |   0.00 |   0.0288 \u2502  0.0596 |  0.0224 \u2502  0.0096 |  0.0036 \u2502        8 \u2502\n\u2502 testRequests        \u2502    15 \u2502       0 \u2502      0 \u2502  16.3307 |   6.00 |   0.1273 \u2502  1.0887 |  0.9073 \u2502  0.0085 |  0.0071 \u2502       18 \u2502\n\u2502 testSCH             \u2502    22 \u2502       0 \u2502      0 \u2502  14.6350 |  12.00 |   0.2509 \u2502  0.6652 |  0.2091 \u2502  0.0114 |  0.0036 \u2502       70 \u2502\n\u2502 testSMD             \u2502    14 \u2502       0 \u2502      0 \u2502   0.1091 |   0.00 |   0.0406 \u2502  0.0078 |  0.0061 \u2502  0.0029 |  0.0023 \u2502       18 \u2502\n\u2502 testSUB             \u2502    94 \u2502       0 \u2502      0 \u2502  29.9202 |  27.50 |   0.8239 \u2502  0.3183 |  0.1847 \u2502  0.0088 |  0.0051 \u2502      162 \u2502\n\u2502 testTS              \u2502    34 \u2502       0 \u2502      0 \u2502   0.2189 |   0.00 |   0.0767 \u2502  0.0064 |  0.0055 \u2502  0.0023 |  0.0019 \u2502       40 \u2502\n\u2502 testTSB             \u2502     7 \u2502       0 \u2502      0 \u2502   6.1816 |   6.00 |   0.1255 \u2502  0.8831 |  0.4755 \u2502  0.0179 |  0.0097 \u2502       13 \u2502\n\u2502 testTS_TSI          \u2502    29 \u2502       0 \u2502      0 \u2502 121.9209 | 120.47 |   0.4444 \u2502  4.2042 |  1.1185 \u2502  0.0153 |  0.0041 \u2502      109 \u2502\n\u2502 testUpperTester     \u2502     6 \u2502       0 \u2502      0 \u2502   0.7547 |   0.00 |   0.0241 \u2502  0.1258 |  0.3774 \u2502  0.0040 |  0.0120 \u2502        2 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Totals              \u2502   980 \u2502       0 \u2502      0 \u2502 529.2668 | 483.07 |   5.5679 \u2502  0.5401 |  0.2731 \u2502  0.0057 |  0.0029 \u2502     1938 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>With <code>--verbose-requests</code> the each request and response is printed as well. This can be helpful to debug problems with the system under test, the network, and other aspects.</p>"},{"location":"development/UnitTests/#running-individual-test-suites","title":"Running Individual Test Suites","text":"<p>One can  specify which test suites to run like this:</p> Run Specific Test Suites<pre><code>$ python3 runTests.py testACP testCin\n</code></pre> <p>The runTest.py script by default will run all test suites, except scripts that run load tests. To include those one need to specify the <code>--load-include</code> command line argument.</p>"},{"location":"development/UnitTests/#running-individual-test-cases","title":"Running Individual Test Cases","text":"<p>It is also possible to run individual test cases from test suites. This is done by optionally specify the test suites and then with the <code>--run-tests</code> or <code>-run</code>option a list of test case names to run:</p> Run Single Test Case<pre><code>$ python runTests.py testSUB --run-tests test_createCNTforEXC\n</code></pre> <p>The test cases can be specified in any order, and may appear more than once.</p> <p>Note</p> <p>Most unit tests in a test suite depend on each other (created resources, subscriptions, etc). Just running a single test case may fail. </p> <p>The most interesting use of this functionionality is to run a whole test suite together with the <code>--disable-teardown</code> option up to the point of a failure, and then run the failed test case again:</p> Run Single Test Case Without Tear-Down<pre><code>$ python runTests.py testSUB --disable-teardown\n...\n$ python runTests.py testSUB  --disable-teardown --run-tests test_createCNTforEXC\n</code></pre> <p>This disables the clean-up of the CSE after the test suite has run, so that the resources created by the test suite are still present in the CSE. This way one can investigate the state of the CSE after the test suite has run.</p> <p>To list the available test cases one can use the <code>--list-tests</code> (list in the order the test cases have been defined in the test suite) and the <code>--list-tests-sorted</code> (list alphabetically) options.</p>"},{"location":"development/UnitTests/#excluding-test-cases","title":"Excluding Test Cases","text":"<p>One can exclude test cases from running by using the <code>--exclude-tests</code> or <code>-et</code> option. This option takes a list of test case names to exclude from the test run.</p> <p>The following example runs all test cases in the testSUB test suite except the test_createCNTforEXC test case:</p> Exclude Test Cases<pre><code>$ python runTests.py testSUB --exclude-tests test_createCNTforEXC \n</code></pre>"},{"location":"development/UnitTests/#use-local-address-for-notification-server","title":"Use local address for Notification Server","text":"<p>The <code>--local-notification-server</code> or <code>-lns</code> option can be used to specify that the notification server is running on the same machine as the CSE. This is useful when explicitly routing notifications via the local network interface.</p>"},{"location":"development/UnitTests/#tear-down-and-clean-up","title":"Tear-down and Clean-up","text":"<p>Each test suite may set-up resources in the CSE that are used during the tests. Usually, those resources should be removed from the CSE at the end of each test suite, but under certain circumstances (like a crash or forceful interruption of a test run) those resources may still be present in the CSE and must be removed manually (or by a reset-restart of the CSE), or by running the test suit with the <code>--run-teardown</code> option. The later runs only the tear-down  functions for the specified test suites and then exits.</p> <p>However, sometimes it would be useful to keep the resources created by the tests for further investigations. In this case specifying the <code>--disable-teardown</code> option can help. It disables the execution of the tear-down functions after successful or unsuccessful execution.</p>"},{"location":"development/UnitTests/#dependencies","title":"Dependencies","text":"<p>Some test cases in each test suite build on each other (such as adding a resource that is updated by further test cases). This means that the order of the test cases in each test suite is important. Individual test suites, however, can work independent from each other.</p> <p>Some test suites (for example testRemote) need in addition to a running IN- or MN-CSE another MN-CSE that registers to the \"main\" CSE (the system-under-test) in order to run registration and announcement tests.</p>"},{"location":"development/tools/HashCredentials/","title":"Hashing Credentials","text":"<p>Passwords, authorization tokens, and other credentials should never be stored in plain text. Instead, they should be hashed using a secure hashing algorithm. This ensures that even if the data is compromised, the original credentials cannot be recovered.</p> <p>The tool that is provided in the directory tools/hashcreds can be used to create hashed credentials for the ACME CSE, especially for the password and token files for HTTP and WebSocket authentication in the certs directory. See Certificates for more information.</p>"},{"location":"development/tools/HashCredentials/#running","title":"Running","text":"<p>The tool can be used by running the command from the <code>tools/hashcreds</code> directory. </p> <p>The tool requires two arguments: the password or token to be hashed, and a secret. This secret or salt value should be a secret value that is unique to the installation. It must be the same value that is configured for the CSE's secret. The salt value is used to make the hash unique and to prevent dictionary attacks.   </p> Running the Hashing ToolOutput <pre><code>python3 hashcreds.py myPassword secret\n</code></pre> <p>3fadece711de4314f183fc475b0b6831f4fea0541cf91e7076a1f932073cf0e4</p> <p>This will create a hashed version of the password <code>myPassword</code> and print it to the console. This hash can then be copied to the password or token file in the certs directory.</p>"},{"location":"development/tools/NotificationServer/","title":"Notification Server","text":"<p>The Notification Server that is provided in the directory tools/notificationServer is a simple implementation of a Notification Server that can be used to receive notifications from a CSE. </p> <p>Verification requests are always acknowledged, and notifications are just printed to the console.</p> <p>The server normally listens on port <code>9999</code>. This can be changed by specifying another value to the port variable at the beginning of the file or the command line argumnet --port (see below).</p>"},{"location":"development/tools/NotificationServer/#running","title":"Running","text":""},{"location":"development/tools/NotificationServer/#start-as-basic-http-notification-server","title":"Start as basic HTTP notification server","text":"<p>Start the server by running the command from the <code>tools/notificationServer</code> directory:</p> Start the Notification Server<pre><code>python3 notificationServer.py\n</code></pre> <p>In this case the starts and listens on the default port <code>9999</code> for incoming connections.</p>"},{"location":"development/tools/NotificationServer/#start-with-mqtt-support","title":"Start with MQTT support","text":"<p>The Notification Server can be started with MQTT support. In this case the server connects to an MQTT broker and listens to the topics specified in the command line arguments.</p> Start the Notification Server<pre><code>python3 notificationServer.py --mqtt --mqtt-address mqtt.example.com\n</code></pre> <p>The following command starts the NotificationServer with MQTT support enabled. The server would connect to an MQTT broker with username and password authentication,  and would listen to the topics \"/oneM2M/req/id-in/+/#\" and \"/oneM2M/req/id-mn/+/#\". In addition logging extra information about the MQTT communication to the console is enabled.</p> More Sophisticated MQTT Example<pre><code>python3 notificationServer.py --mqtt --mqtt-address mqttAddress --mqtt-username mqttUser --mqtt-password mqttPassword --mqtt-useTLS --mqtt-caFile caFile --mqtt-certfile certFile -- mqtt-keyfile keyFile --mqtt-topic /oneM2M/req/id-in/+/# /oneM2M/req/id-mn/+/# --mqtt-logging\n</code></pre>"},{"location":"development/tools/NotificationServer/#command-line-arguments","title":"Command Line Arguments","text":"<p>The Notification Server can be started with the following command line arguments:</p> Command Line Argument Description -h, --help Show a help message and exit. --port &lt;port&gt; Specify the server port (default: 9999). --http, --https Run as http (default) or as https server. --certfile &lt;certfile&gt; Specify the certificate file (mandatory for https). --keyfile &lt;keyfile&gt; Specify the key file (mandatory for https). --mqtt Additionally enable MQTT for notifications --mqtt-address &lt;host&gt; MQTT broker address (default: localhost) --mqtt-port &lt;port&gt; MQTT broker port (default: 1883) --mqtt-topic &lt;topic&gt; [&lt;topic&gt; ...] MQTT topic list to subscribe to (default: ['/oneM2M/req/id-in/+/#']) --mqtt-username &lt;username&gt; MQTT username (default: None) --mqtt-password &lt;password&gt; MQTT password (default: None) --mqtt-logging MQTT enable logging (default: disabled) --mqtt-useTLS MQTT enable TLS (default: disabled) --mqtt-caFile &lt;cafile&gt; Specify the CA certificate file (mandatory for MQTTS) --mqtt-certfile &lt;certfile&gt; Specify the certificate file (mandatory for MQTTS) --mqtt-keyfile &lt;keyfile&gt; Specify the key file (mandatory for MQTTS) --fail-verification Fail all verification requests with \"no privileges\" (default: False) --delay-response [&lt;delay&gt;] Delay response by n seconds (default: 60s)"},{"location":"development/tools/OnboardingTool/","title":"Onboarding Tool","text":"<p>The ACME CSE can be configured by an interactive onboarding process when it is started for the first time. This process will create a configuration file that can be edited later.</p>"},{"location":"development/tools/OnboardingTool/#running","title":"Running","text":"<p>It is also possible to run the onboarding process at any time without starting the CSE. This can be useful if the configuration file was deleted or if the configuration needs to be changed.</p> <p>The onboarding process is started by running the onboarding tool from the command line. The tool will guide you through the configuration process and save the configuration to a file.</p> For Package Installation For Manual Installation <p>Run the following command from the command line of your terminal program from within any directory that uses the Python environment where you installed the package:</p> Running the onboarding tool<pre><code>acmecse-onboarding acme.ini\n</code></pre> <p>Run the following command from the command line from within the directory where you installed the CSE:</p> Running the onboarding tool as a module<pre><code>python3 -m acme.onboarding acme.ini\n</code></pre> <p>This will start the configuration process and save the configuration to the specified file. The configuration file can be edited later.</p>"},{"location":"development/tools/OnboardingTool/#command-line-arguments","title":"Command Line Arguments","text":"<p>The onboarding tool provides the following command line arguments.</p> Command Line Argument Description -h, --help Show a help message and exit. --overwrite, -o Overwrite the configuration file if it already exists. <p>The name of the configuration file is the only required argument. If the configuration file already exists, the tool will terminate unless the <code>--overwrite</code> argument is provided.</p>"},{"location":"development/tools/ZookeeperTool/","title":"Zookeeper Tool","text":"<p>This tool is used to simplify the process of creating and managing Apache Zookeeper nodes that contain ACME configuration data. It provides a command-line interface for creating, updating, deleting, and listing nodes in Zookeeper as well as to store and retriebe configuration data in INI format.</p>"},{"location":"development/tools/ZookeeperTool/#running-the-tool","title":"Running the Tool","text":"<p>To run the tool, run the following command in the <code>tools/zk-tool</code> directory:</p> <pre><code>python zk-tool.py &lt;command&gt; [options]\n</code></pre> <p>The available commands are:</p> Option / Command Short Option(s) Description Default Value <code>--help</code> <code>-h</code> Show this help message and exit <code>--zookeeper-host hostname</code> <code>-host</code> Hostname of the Zookeeper server <code>localhost</code> <code>--zookeeper-port port</code> <code>-port</code> Port of the Zookeeper server <code>2181</code> <code>--zookeeper-root nodeName</code> <code>-root</code> Name of the root configuration node <code>/</code>. <code>--verbose</code> <code>-v</code> Enable verbose output <code>--case-sensitive</code> <code>-cs</code> Enable case sensitive node and key names <code>False</code> <code>--config filename</code> <code>-c</code> Specify the ACME CSE's instance configuration file <code>../../acme.ini</code> <code>--config-default filename</code> <code>-cd</code> Specify the ACME CSE's default configuration file <code>../../acme/init/acme.ini.default</code> <code>--store-config</code> <code>-store</code> Store individual ACME CSE configuration in Zookeeper <code>--store-config-all</code> Store all (incl. defaults) ACME CSE configuration in Zookeeper <code>--retrieve-config</code> <code>-retrieve</code> Retrieve ACME CSE configuration from Zookeeper <code>--list [path]</code> <code>-ls</code> List contents of a Zookeeper node (optional: specify path to list, defaults to root node) <code>--add keyPath value</code> <code>-a</code> Add a key-value pair to a Zookeeper node <code>--update keyPath value</code> <code>-u</code> Update a key-value pair <code>--DELETE keyPath</code> Delete a key-value pair <p>Key paths are specified as a relative path to the root node.  For example, the key path <code>http/security/usetls</code> is relative to the root node <code>/id-in</code> and will be stored in Zookeeper as <code>/id-in/http/security/usetls</code>.</p> <p>Key pathes are case-insensitive by default. This means that all keys are stored in lowercase and the key path is converted to lowercase before storing it in Zookeeper.  This is done to ensure that the keys are always stored in a consistent format and to avoid issues with the case-insentive nature of the INI configuration files. To enable case-sensitive key paths, use the <code>--case-sensitive</code> option.</p>"},{"location":"development/tools/ZookeeperTool/#example-usage","title":"Example Usage","text":"<p>The name of the root node for the configuration on the Zookeeper server in the following examples is <code>/id-in</code>. </p>"},{"location":"development/tools/ZookeeperTool/#store-configuration","title":"Store Configuration","text":"<p>To store an individual ACME CSE configuration from a local acme.ini file in a Zookeeper server, use the following command:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -store\n</code></pre> <p>This command reads the configuration from the default acme.ini file. To specify a different configuration file, use the <code>--config</code>/<code>-c</code> option:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -store -c /path/to/your/acme.ini\n</code></pre>"},{"location":"development/tools/ZookeeperTool/#retrieve-configuration","title":"Retrieve Configuration","text":"<p>To retrieve the configuration from Zookeeper and print it to stdout, use the following command:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -retrieve\n</code></pre>"},{"location":"development/tools/ZookeeperTool/#list-zookeeper-nodes","title":"List Zookeeper Nodes","text":"<p>To list the contents of a Zookeeper node, use the following command:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -ls\n</code></pre> <p>To list the contents of a specific section (e.g. [http.security] ), specify the path as follows:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -ls http/security\n</code></pre>"},{"location":"development/tools/ZookeeperTool/#add-a-key-value-pair","title":"Add a Key-Value Pair","text":"<p>To add a key-value pair to a Zookeeper node, use the following command:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -a http/security/usetls true\n</code></pre>"},{"location":"development/tools/ZookeeperTool/#update-a-key-value-pair","title":"Update a Key-Value Pair","text":"<p>To update a key-value pair in a Zookeeper node, use the following command:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -u http/security/usetls false\n</code></pre>"},{"location":"development/tools/ZookeeperTool/#delete-a-key-value-pair","title":"Delete a Key-Value Pair","text":"<p>To delete a key-value pair from a Zookeeper server, use the following command:</p> <pre><code>python zk-tool.py -host zookeeper.example.com -root /id-in -DELETE http/security/usetls\n</code></pre> <p>Attention</p> <p>The --DELETE command deletes the specified key-value pair and all its children from the Zookeeper server. Use with caution.</p>"},{"location":"help/Contributing/","title":"Contributing","text":"<p>Whether reporting bugs, discussing improvements and new ideas or writing extensions: Contributions to ACME are welcome! Here's how to get started:</p> <ol> <li>Check for open issues or open a fresh issue to start a discussion around    a feature idea or a bug.</li> <li>Fork the repository https://github.com/ankraft/ACME-oneM2M-CSE on Github,    create a new branch off the master branch and start making your changes    (known as GitHub Flow).</li> <li>ACME makes use of typing hints and is statically type-checked with mypy. Please make sure that your changes pass the type checking.</li> <li>Write a test which shows that the bug was fixed or that the feature works    as expected.</li> <li>Send a pull request and bug the maintainers until it gets merged and    published.</li> </ol>"},{"location":"help/FAQ/","title":"FAQ","text":""},{"location":"help/FAQ/#installation-and-running","title":"Installation and Running","text":"<ol> <li>Can I install the ACME CSE on a Raspberry Pi?    Yes, the ACME CSE can be installed and run on a Raspberry Pi. However, this usually requires to install a newer version of Python than the one that is installed by default on the Raspberry Pi, and to install some additional libraries, tools, and packages.    See the HowTo Install ACME on a Raspberry Pi for further details.</li> </ol>"},{"location":"help/FAQ/#network","title":"Network","text":"<ol> <li>How can I access the CSE from remote/another computer on my network?    By default the CSE binds to the localhost/loopback interface, meaning it will not be able to receive requests from remote machines. To make it accessible from a remote machine you need to bind the CSE's http server or MQTT client to another network interface, or address. This can be done in the [coap], [http], [mqtt] and [websocket] sections of the configuration file.     Setting the listen interface to \"0.0.0.0\" binds the servers to all available interfaces.    The reason for this default setting is security: making the CSE accessible from remote machines should be a conscious decision and not the default.</li> </ol>"},{"location":"help/FAQ/#database","title":"Database","text":"<ol> <li>Corrupt database files    In very rare cases, e.g. when the CSE was not properly shut down, the on-disk database files for TinyDB may be corrupted. The CSE tries to detect this during start-up, but there is not much one can do about this. However, a backup of the database file is created every time the CSE starts. This backup can be found in the backup sub-directory of the data directory. </li> </ol>"},{"location":"help/FAQ/#http-binding","title":"HTTP Binding","text":"<ol> <li>What does the error message \"[Errno 13] Permission denied\" during startup of the CSE mean?    This error is shown by the CSE when the http server tries to bind to a TCP/IP port to listen for incoming requests,     but doesn't have enough privileges to do so. This usually happens when an http port &lt; 1024 is configured (e.g. 80) and     the CSE is run with normal user privileges. Either run the CSE with admin / superuser rights (NOT recommended),     or choose another TCP/IP port, larger than 1024.</li> <li> <p>Can the ACME CSE be accessed when the installation requires a URL path prefix?     The ACME CSE does support URL path prefixes. For example, if the CSE is configured to listen on port 8080 and the path prefix is <code>/acme</code>, then the CSE and its resources can be accessed via the URL <code>http://hostname:8080/acme/&amp;lt;oneM2M resource path&gt;</code>.     To set the path prefix, use the configuration setting [http].root in the acme.ini file:</p> Example to set the HTTP URL path prefix to '/acme'<pre><code>[http]\nroot=/acme\n</code></pre> </li> <li> <p>Is there a work-around for the missing DELETE method in http/1.0?    Many constraint devices only support version 1.0 of the http protocol. This version of http, though, does not specify the    DELETE method, which means that those devices cannot invoke oneM2M's DELETE operation.    The ACME CSE implements an experimental work-round by supporting the http PATCH operation in addition to the normal DELETE    operation: Instead of sending oneM2M DELETE requests using the http DELETE method one can send the same request with the http PATCH method.    This feature is disabled by default and can be enabled by setting the configuration setting [server.http].allowPatchForDelete    to true.</p> </li> <li>Is there a way to enable CORS (Cross-Origin Resource Sharing) for ACME?    CORS allows browser-based applications to access resources on a web server outside the domain of the    original hosting web server. This could be useful, for example, to allow a web UI that is hosted on     one web server to access oneM2M resources that are hosted on external CSE(s).    ACME's http binding implementation supports CORS. This feature is disabled by default and can be     enabled by setting the configuration setting [http.cors].enable to true. CORS access is granted    by default to all HTTP resources. This can be limited by specifying the resource paths in the     configuration setting [http.cors].resources. Note: Most modern web browsers don't allow unsecured (http) access via CORS. This means that the    CSE must be configured to run the http server with TLS support enabled (https).</li> </ol>"},{"location":"help/FAQ/#mqtt-binding","title":"MQTT Binding","text":"<ol> <li>What does the error message \"Out of memory\" mean that appears sometimes?    This error message should actually read \"connection refused\" or \"general error\" that is returned by the underlying MQTT library. The error code \"1\" indicates this error but the human readable error message seems to be wrongly assigned here.</li> <li>What is going on when the error \"rc=7: The connection was lost\" is repeatedly thrown?    This error message might occur when another client (perhaps another running CSE with the same CSE-ID) connected to an MQTT broker with the same client ID. The CSE then tries to re-connect and the other CSE is disconnected by the broker. And then this client tries to reconnect. This will then repeat over and over again.    Identify the other client, stop it, and assign it a different CSE-ID.</li> <li>What does \"cannot connect to broker: [Errno 49] Can't assign requested address\" mean?    You most likely want to connect to an MQTT broker that does not run on your local machine and you configured the listen interface to \"127.0.0.1\", which means that only local running services can be reached. Try to set the configuration [client.mqtt].listenIF to \"0.0.0.0\".</li> </ol>"},{"location":"help/FAQ/#resources","title":"Resources","text":"<ol> <li>How can I add my own FlexContainer specializations to the ACME CSE?    All resources and specializations are validated by the CSE. You can add your own specializations and validation policies by providing them in one or more separate files in the import directory. Those files must have the file extension \".ap\". These files are read during the startup of the CSE.    See the documentation about defining FlexContainer spezializations for further details.</li> </ol>"},{"location":"help/FAQ/#cse-registrations","title":"CSE Registrations","text":"<ol> <li> <p>Why are there regular checks for remote CSEs?     When a CSE is configured as an MN-CSE or ASN-CSE it can register to a remote CSE, respectively an IN-CSE and MN-CSE can receive connection requests from those CSE types. A &lt;remoteCSE&gt; resource is created in case of a successful registration. A CSE checks regularly the connection to other remote CSEs and removes the remoteCSE if the connection could not been established. This is done to keep the CSE's resource tree clean and up-to-date.     This behaviour can be disabled by setting the configuration setting <code>[cse.registration].checkLiveliness</code> to false.     The check interval can be configured with the <code>[cse.registration].checkInterval</code> setting.</p> </li> <li> <p>Why does my CSE not register to another CSE or announce resources?    One problem could be that the CSE has no access rights to register to the target CSE. To solve this, the CSE's originator (ie. the CSE's CSE-ID, for example \"/id-mn\") must be added to the target CSE's configuration file. The configuration section [cse.registration] has a setting allowedCSROriginators, which is a comma separated list of originators. Add the registering CSE's    CSE-ID (without a leading slash!) to this configuration section to allow access for this originator.     This must be done for both the CSEs that want to register and announce resources.     Example for an IN-CSE with the CSE-ID \"/id-in\":</p> <p>Example to allow a CSE with the CSE-ID 'id-mn' to register to the IN-CSE<pre><code>[cse.registration]\nallowedCSROriginators=id-mn\n</code></pre>     And for an MN-CSE with the CSE-ID \"/id-mn\":</p> Example to allow the IN-CSE with the CSE-ID 'id-in' to get access<pre><code>[cse.registration]\nallowedCSROriginators=id-in\n</code></pre> </li> </ol>"},{"location":"help/FAQ/#subscriptions-notifications","title":"Subscriptions &amp; Notifications","text":"<ol> <li>Why does creating a &lt;subscription&gt; resource sometimes throw an error?    When an AE creates a &lt;subscription&gt; resource a CSE may send a verification notification to the configured notificationURI address(es) to verify that these endpoints exist and that they can receive notifications. If the verification request fails, for example if there is (yet) no server that can receive the notifications, the whole CREATE request of the &lt;subscription&gt; resource fails.    By default, this verification notification procedure is enabled in ACME, but it can be disabled by setting the following configuration in the acme.ini file:    Disable verification notification requests<pre><code> [cse]\n enableSubscriptionVerificationRequests=false\n</code></pre>    With this, the CSE will not verify the notification endpoints and the &lt;subscription&gt; resource creation will succeed (if there are no other problems, of course).</li> </ol>"},{"location":"help/FAQ/#improving-performance","title":"Improving Performance","text":"<ol> <li> <p>How to improve the performance of ACME CSE?    The log output provides useful information to analyze the flows of requests inside the CSE. However, it reduces the performance of the CSE by a lot. Reducing the log level to info or warning already helps. This can be done in the [logging] section of the configuration file, or by pressing <code>shift-L</code> on the console to change the logging level to the desired value. Also, disabling writing the log to a file will increase the performance.    Another option is to change the database to memory mode. This means that all database access happens in memory and not on disk. But please be aware that this also means that all data will be lost when the CSE terminates!    Lastly, the ACME CSE can be run with newer versions of Python, which is way faster and more efficient than previous versions of Python.</p> </li> <li> <p>Improve database performance with disk mode    When running the CSE with the database mode set to tinydb (ie. store the database on disk rather then in memory) one can improve the performance by increasing the time before data is actually written to disk. The default is 1 second, but it can be increased as necessary.    Be aware, though, that the risk of losing data increases with higher delays in case of a crash or when the CSE shutdown is interrupted.</p> Example to set the write delay to 10 seconds<pre><code>[database.tinydb]\nwriteDelay=10\n</code></pre> </li> <li> <p>Reduce various check-intervals    The CSE checks various things at regular intervals, such as the liveliness of remote CSEs, expired resources,     and so on. The following table list various intervals that can be configured to reduce the load on the CSE and the network.    The default values are usually sufficient for development use cases, but can be reduced to a lower value for deployment use cases.</p> Setting Description [cse].checkExpirationsInterval The interval in seconds to check for expired resources. This can be set to a much higher value than the default of 60 seconds if it is not necessary to expire resources quickly. [cse.registration].checkInterval The interval in seconds to check the liveliness of remote CSEs. This behaviour can even be disabled by setting the following configuration option to <code>false</code>. [cse.registration].checkLiveliness Whether to check the liveliness of remote CSEs. This can be disabled to reduce the load on the CSE and the network. Set this to <code>false</code> to disable the check. [cse.statistics].writeInterval The interval in seconds to write the statistics to the database. This can be set to a much higher value than the default of 60 seconds if it is not necessary to write statistics frequently. [scripting].fileMonitoringInterval The interval in seconds to check for changes in the scripting files. This can be set to a higher value if it is not necessary to check for changes frequently. </li> <li> <p>Disable request recording    if the configuration setting [cse.operation.requests].enable is set to true, then CSE records all requests and responses. This is useful for debugging and testing, but it can also slow down the CSE significantly.    To disable this feature, set the configuration setting to false in the acme.ini configuration file:</p> Disable request recording<pre><code>[cse.operation.requests]\nenable=false\n</code></pre> </li> </ol>"},{"location":"help/FAQ/#web-ui","title":"Web UI","text":"<ol> <li>Can I use the web UI also with other CSE implementations?     The web UI can also be run as an independent application.  Since it communicates with the CSE via the Mca interface it should be possible to use it with other CSE implementations as well as long as those third party CSEs follow the oneM2M http binding specification. It only supports the resource types that the ACME CSE supports, but at least it will present all other resource types as unknown.</li> </ol>"},{"location":"help/FAQ/#console-and-text-ui","title":"Console and Text UI","text":"<ol> <li>Some of the tables, text graphics etc are not aligned or correctly displayed in the console     Some mono-spaced fonts don't work well with UTF-8 character sets and graphic elements. Especially the MS Windows cmd.exe console seems to have problems.     Try one of the more extended fonts like JuliaMono or DejaVu Sans Mono.</li> <li> <p>There is an error message \"UnicodeEncodeError: 'latin-1' codec can't encode character\"     This error message is shown when the console tries to display a character that is not supported by the current console encoding. Try to set the console encoding to UTF-8 by setting the environment variable PYTHONIOENCODING to utf-8, for example:</p> Set the terminal console encoding to UTF-8<pre><code>export PYTHONIOENCODING=utf-8\n</code></pre> </li> </ol>"},{"location":"help/FAQ/#operating-systems","title":"Operating Systems","text":""},{"location":"help/FAQ/#raspberrypi","title":"RaspberryPi","text":"<ol> <li> <p>Restrictions on 32 bit Systems </p> <p>Note</p> <p>This answer is a bit outdated. Newer Raspberry Pi models are 64 bit systems and can run the 64 bit version of Raspberry Pi OS. Still, the following information might be useful for older models or for other 32 bit systems.</p> <p>Currently, the normally installed Raspbian OS is a 32 bit system. This means that several restrictions apply here, such as the maximum date supported (~2038). It needs to be determined whether these restrictions still apply when the 64 bit version of Raspbian is available. 1. The console or the text UI is not displayed correctly It could be that the OS's terminal applications doesn't support rendering of extra characters, like line graphics. One recommendation on Linux systems is to install the Mate Terminal, which supports UTF-8 and line graphics. It also renders the output much faster.</p> Install the Mate Terminal<pre><code>sudo apt-get install mate-terminal\n</code></pre> </li> <li> <p>Timing Issues      Also, the resolution of the available Python timers is rather low on Raspbian 32 Bits, and background tasks might not run exactly on the desired time.      Unfortunately, this is also why sometimes a couple of the CSE's tests cases may fail randomly.</p> </li> </ol>"},{"location":"help/NotebookTutorial/","title":"Jupyter Notebooks Tutorial","text":"<p>A oneM2M tutorial is available as a Jupyter Notebook. This tutorial is a good starting point for learning how to use oneM2M. It uses the ACME CSE<sup>1</sup> to demonstrate the basic concepts of oneM2M.</p> <p></p> oneM2M Jupyter Notebooks <p>It covers the following topics:</p> <ul> <li>Episode 0 - Introductions</li> <li>Episode 1 - Setup Configurations</li> <li>Episode 2 - First Contact with oneM2M</li> <li>Episode 3 - Basic Resources &amp; Requests using REST Calls</li> <li>Episode 4 - Resource Discovery</li> <li>Episode 5 - Groups</li> <li>Episode 6 - Access Control</li> <li>Episode 7 - Subscriptions and Notifications</li> <li>Episode 8 - FlexContainers</li> </ul> <p>The oneM2M Jupyter Notebook tutorial is available</p> <ul> <li>on the oneM2M Wiki,</li> <li>on GitHub at https://github.com/oneM2M/onem2m-jupyter-notebooks, or</li> <li>directly on MyBinder at https://mybinder.org/v2/gh/oneM2M/onem2m-jupyter-notebooks/master?urlpath=lab/tree/__START__.ipynb.</li> </ul> <ol> <li> <p>See also the article on how to embed the ACME CSE in a Jupyter Notebook.\u00a0\u21a9</p> </li> </ol>"},{"location":"help/oneM2MRecipes/","title":"oneM2M Recipes","text":"<p>The oneM2M website provides a collection of introductory articles and recipes that demonstrate how to use oneM2M. These recipes are designed to help you get started with oneM2M and to provide you with a better understanding of how to use oneM2M in your projects.</p> <p></p> oneM2M Recipes <p>The recipes can be found on the oneM2M website at https://recipes.onem2m.org.</p>"},{"location":"home/ACME-CSE-introduction/","title":"A Short Introduction to the ACME oneM2M CSE","text":"<p>The ACME oneM2M CSE (ACME CSE for short) is an implementation of a Common Service Entity that supports a subset of the oneM2M IoT standard. It provides a useful and rich implementation for educational purposes and small trials. </p> <p>The goal is to provide an easy to install and run oneM2M CSE. The ACME CSE is written in Python, and can be installed and run with a few commands almost everywhere where the Python runtime environment is available.  By default, the implementation uses a simple file-based document database for data storage that is suitable for small installations. For more sophisticated deployments, the ACME CSE can connect to a PostgreSQL database. </p> <p>The ACME CSE also offers a rich text-based user interface that runs directly inside an OS's terminal console and provides a convenient way to inspect and work with resources, requests, and status information. This UI is especially useful when running the CSE on a remote server or in a Docker container.    A more basic console UI is also available. It is the default UI when running the ACME CSE in a terminal console, and which is better suited to show log and debug output. </p> <p> </p> Text UI of the ACME CSE <p>Though the ACME CSE may not yet support all parts of the standard, the support for more oneM2M resource types and functionalities is growing as development continues. </p> <p>The project and its source code is available on GitHub.</p>"},{"location":"home/Acknowledgements/","title":"Acknowledgements","text":"<ul> <li> <p> Thank You for Your Contributions! </p> <p> Miguel Angel Reina Ortega BobFIV Andreas Neubacher Roland Hechwartner Ken Figueredo Yann Garcia Massimo Vanetti Tyler Sengia JiriD85 samuelbles07 Luke Hawksworth JaeSeung Song </p> <p>Thank you for contributing ideas, code, patches, testing, bug fixes, time, and more!</p> </li> </ul>"},{"location":"home/Contact/","title":"Contact","text":""},{"location":"home/Contact/#acme-cse-on-github","title":"ACME CSE on GitHub","text":"<p>The ACME CSE project is hosted on https://github.com/ankraft/ACME-oneM2M-CSE. There, you can find the source code and discuss issues.</p>"},{"location":"home/Contact/#issues","title":"Issues","text":"<p>If you encounter any issues or have questions, please open an issue on the ACME CSE GitHub Issues page.</p>"},{"location":"home/Contact/#mastodon","title":"Mastodon","text":"<p>You can also follow the ACME CSE on Mastodon at https://mstdn.social/@acmeCSE.</p>"},{"location":"home/Contact/#discord","title":"Discord","text":"<p>Join the ACME CSE community on Discord to discuss the project, ask questions, and get help.</p>"},{"location":"home/Imprint/","title":"Imprint \u00b7 Impressum","text":""},{"location":"home/Imprint/#imprint-english","title":"Imprint (English)","text":""},{"location":"home/Imprint/#service-provider","title":"Service Provider","text":"<p>Andreas Kraft \u00b7 Quantzstr.22 \u00b7 14129 Berlin \u00b7 Germany</p>"},{"location":"home/Imprint/#contact","title":"Contact","text":"<p>Email address: info@acmecse.net</p>"},{"location":"home/Imprint/#social-media-and-other-online-presences","title":"Social Media and other Online Presences","text":"<p>This imprint also applies to the following social media presences and online profiles:</p> <p>Mastodon: @acmeCSE@mstdn.social Discord: ACME CSE Discord Channel</p>"},{"location":"home/Imprint/#impressum-deutsch","title":"Impressum (Deutsch)","text":""},{"location":"home/Imprint/#diensteanbieter","title":"Diensteanbieter","text":"<p>Andreas Kraft \u00b7 Quantzstr.22 \u00b7 14129 Berlin \u00b7 Germany</p>"},{"location":"home/Imprint/#kontaktmoglichkeiten","title":"Kontaktm\u00f6glichkeiten","text":"<p>E-Mail-Adresse: info@acmecse.net</p>"},{"location":"home/Imprint/#social-media-und-andere-onlineprasenzen","title":"Social Media und andere Onlinepr\u00e4senzen","text":"<p>Dieses Impressum gilt auch f\u00fcr die folgenden Social-Media-Pr\u00e4senzen und Onlineprofile:</p> <p>Mastodon: @acmeCSE@mstdn.social Discord: ACME CSE Discord Channel</p> <p>Erstellt mit kostenlosem Datenschutz-Generator.de von Dr. Thomas Schwenke </p>"},{"location":"home/License/","title":"License","text":"<p>The ACME oneM2M CSE is available under the BSD 3-Clause License for the CSE and its native components and modules. Please see the individual licenses of the used third-party components.</p>"},{"location":"home/License/#bsd-3-clause-license","title":"BSD 3-Clause License","text":"<p>Copyright (c) 2020, Andreas Kraft All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"home/Roadmap/","title":"Feature Roadmap","text":"<ul> <li> <p> Soonish </p> <p>CSE Middleware</p> <ul> <li>Add Support for primitive profiles.</li> <li>Improve ACP resource and conditions.</li> <li>Support for Process Management.</li> </ul> </li> <li> <p> Sometime</p> <p>CSE Middleware</p> <ul> <li>Support more resource types when necessary.</li> <li>Improve notifications   (e.g. pendingNotifications).</li> <li>Improve Support for TimeSyncBeacon.</li> </ul> <p>UI's</p> <ul> <li>Add Data Model Editor and templates to the text UI.</li> </ul> </li> </ul>"},{"location":"home/Supported/","title":"Supported oneM2M Functionalities","text":"<p>This article lists the supported oneM2M resource types and related functionalities of the ACME CSE</p>"},{"location":"home/Supported/#onem2m-specification-conformance","title":"oneM2M Specification Conformance","text":"<p>The CSE implementation successfully passes all the relevant oneM2M test cases for the supported resource types, attributes and behaviours.</p>"},{"location":"home/Supported/#release-versions","title":"Release Versions","text":"<p>The ACME CSE supports oneM2M release 1 - 4 and the upcoming release 5 for the supported resource types and functionalities listed below. </p>"},{"location":"home/Supported/#cse-types","title":"CSE Types","text":"<p>The ACME CSE supports the following CSE types:</p> <ul> <li>IN-CSE</li> <li>MN-CSE</li> <li>ASN-CSE</li> </ul>"},{"location":"home/Supported/#resource-types","title":"Resource Types","text":"<p>The ACME CSE supports the following oneM2M resource types. Some resource types  are not yet fully implemented, and some features are experimental.</p> <p> </p> UML Class Diagram of the Supported oneM2M Resources Types"},{"location":"home/Supported/#entities","title":"Entities","text":"CSEBase (CB) <p>The CSEBase resource type is fully supported.</p> Application Entity (AE) <p>The Application Entity resource type is supported, except for some of the \"S\" registration related functionalities.</p> RemoteCSE (CSR) <p>The ACME CSE supports CSE registrations via the Mcc reference point, and  Service Provder registrations via the Mcc' reference point.  In addtion announced resources, synchronization, and transit requests that  target resources on remote CSE's are supported, as well.</p>"},{"location":"home/Supported/#security","title":"Security","text":"Access Control Policy (ACP) <p>In addition to the basic ACP functionality, the ACME CSE supports the following ACP features:</p> <ul> <li>Attribute-based access control</li> <li>accessControlWindow</li> </ul> <p>The following attributes are not supported because the linked-to resource types are not yet supported.</p> <ul> <li><code>authorizationDecisionResourceIDs</code> / &lt;authorizationDecision&gt;</li> <li><code>authorizationPolicyResourceIDs</code>/ &lt;authorizationPolicy&gt;</li> <li><code>authorizationInformationResourceIDs</code> / &lt;authorizationInformation&gt;</li> </ul>"},{"location":"home/Supported/#data-management","title":"Data Management","text":"Container (CNT) <p>The Container resource type is fully supported.</p> ContentInstance (CIN) <p>The ContentInstance resource type is fully supported.</p> <p>Values with the following data types are supported for the content attribute:</p> <ul> <li>string</li> <li>integer  </li> <li>float</li> <li>boolean</li> <li>list</li> <li>dictionary / JSON object </li> </ul> FlexContainer (FCNT) <p>The ACME CSE fully supports the FlexContainer resource type.</p> <p>It is possible to use the predefined FlexContainer Specializations of oneM2M TS-0023, AllJoin, oneM2M's GenericInterworking, or to define custom FlexContainerSpecializations.</p> <p>See Attribute Policies for further details.</p> FlexContainerInstance (FCI) <p>This is an experimental implementation of the draft FlexContainerInstance specification.</p> TimeSeries (TS) <p>The ACME CSE supports missing data detection and the respective notifications.</p> TimeSeriesInstance (TSI) <p>The TimeSeriesInstance resource type is fully supported, except for the dataGenerationTime attribute, which is only supported with absolute timestamps.</p> <p>Values with the following data types are supported for the content attribute:</p> <ul> <li>string </li> <li>integer</li> <li>float </li> <li>boolean </li> <li>list</li> <li>dictionary / JSON object  </li> </ul>"},{"location":"home/Supported/#subscription-and-notification","title":"Subscription and Notification","text":"CrossResourceSubscription (CRS) <p>Besides the standard CrossResourceSubscription functionality the ACME CSE implements an experimental feature to support an eventEvaluationMode to react on missing events.</p> Subscription (SUB) <p>The ACME CSE supports notifications via direct url or an AE's Point-of-Access (POA).  Further,  BatchNotifications, attributes, notification statistics, and operation  monitoring are supported.   </p> NotificationTargetSelfReference (NTSR) <p>The NotificationTargetSelfReference virtual resource type is fully supported.</p> <p>This resource type is used to support self-removal of notification targets. It is used together with the following resource types.</p> notificationTargetPolicy (NTP) <p>The NotificationTargetPolicy resource type is fully supported.</p> <p>This resource type is used to configure the policies that are used for notification target self-removal.</p> <p>The CSE automatically creates a system \"Default\" &lt;NTP&gt; resource during startup, which is used for all notification targets that do not have a specific &lt;NTP&gt; resource assigned.</p> notificationTargetMgmtPolicyRef (NTPR) <p>The NotificationTargetManagementPolicyReference resource type is fully supported.</p> <p>This resource type is used to reference the &lt;NTP&gt; resource that is used during the self-removal of notification targets.</p> policyDeletionRules (PDR) <p>The PolicyDeletionRules resource type is partly supported.</p> <p>This resource type specifies the policies for the self-removal of notification targets.</p> <p>The ACME CSE currently only supports scheduling policies, but not the geo-location policies.</p>"},{"location":"home/Supported/#device-management","title":"Device Management","text":"Management Objects <p>The ACME CSE supports the following management objects:</p> Management Objects Management Objects Management Objects AreaNwkDeviceInfo (ANDI) DeviceInfo (DVI) Reboot (REB) AreaNwkInfo (ANI) EventLog (EVL) SIM (SIM) Battery (BAT) Firmware (FWR) Software (SWR) Credentials (CRDS) Memory (MEM) WifiClient (WIFIC) DataCollect (DATC) MobileNetwork (MNWK) DeviceCapability (DVC) MyCertFileCred (NYCFC) Node (NOD) <p>The Node resource type is fully supported.</p>"},{"location":"home/Supported/#communication","title":"Communication","text":"PollingChannel (PCH) <p>Request and notification long-polling via the pcu (pollingChannelURI)  virtual child resource are supported. requestAggregation functionality to retrieve multiple requests in one  polling request is supported as well.</p> Request (REQ) <p>The ACME CSE supports blocking, and synchronous and asynchronous non-blocking  requests, which are managed through &lt;request&gt; resources.</p>"},{"location":"home/Supported/#group-management","title":"Group Management","text":"Group (GRP) <p>The ACME CSE supports requests via the fopt (fanOutPoint) virtual resource. Remote resources may be members of a group.</p>"},{"location":"home/Supported/#automation","title":"Automation","text":"Action (ACTR) <p>The <code>input</code> attribute of the &lt;action&gt; resource type is not supported yet.</p> Dependency (DEPR) <p>The Dependency resource type is fully supported.</p>"},{"location":"home/Supported/#semantics","title":"Semantics","text":"SemanticDescriptor (SMD) <p>The ACME CSE supports semantic queries and discovery for resources with semantic descriptors.</p> <p>At the moment, the following presentation formats are supported:</p> <ul> <li>RDF/XML</li> <li>JSON-LD</li> <li>Turtle</li> </ul>"},{"location":"home/Supported/#location-management","title":"Location Management","text":"LocationPolicy (LCP) <p>Only device based location policy is supported.  The LCP's cnt stores geo-coordinates and geo-fencing results.</p>"},{"location":"home/Supported/#time-management","title":"Time Management","text":"Schedule (SCH) <p>The ACME CSE supports scheduling for various of its functions, such as CSE  communication windows, and resource types, such as the &lt;node&gt;,  &lt;subscription&gt; and &lt;crossResourceSubscription&gt; resource types.</p> TimeSyncBeacon (TSB) <p>The ACME CSE supports the TimeSyncBeacon resource type. The functionality is currently only experimental and might change according to specification changes.</p>"},{"location":"home/Supported/#service-functionalities","title":"Service Functionalities","text":"<p>The following oneM2M service functionalities are supported.</p> AE Registration <p>The ACME CSE supports AE registration and deregistrations via the Mca reference point.</p> Blocking and Non-Blocking Requests <p>Blocking requests are the common way for an AE to interact with the CSE. They are also used for CSE-to-CSE communication via the  and Mcc' reference points.</p> <p>To avoid blocking the AE, the ACME CSE supports non-blocking requests in  synchronous and asynchronous mode as well.</p> Delayed Request Execution <p>The ACME CSE supports delayed request execution via the Operation Execution Timestamp request parameter.</p> Discovery <p>The ACME CSE supports normal retrieval and discovery of resources via the filterCriteria  and discoveryResultType parameters.</p> Geo-Query <p>The ACME CSE supports location and geometry queries and location-based discovery.</p> Location Management <p>Only device based, and no network based location policies are supported. </p> Long Polling <p>Long Polling is supported for request unreachable AEs and CSEs through pollingChannel resources.</p> <p>This mechanism is used for sending notifications and other requests to AEs and CSEs that are not directly reachable  via the Mca, Mcc or Mcc' reference points, e.g. because of firewalls or NATs.</p> No-Response Requests <p>No-response requests are supported for requests that do not require a response. This is especially useful for constrained devices that do not need to wait for a response, or cannot handle possible error responses.</p> <p>Experimental Feature</p> <p>This feature is still experimental and might change according to specification changes.</p> Notifications <p>The ACME CSE supports notifications via direct url, or an AE's or CSE's Point-of-Access (POA).  Further,  BatchNotifications, attributes, notification statistics, and operation  monitoring are supported.</p> Notification Event Types <p>The following notification event types for Subscriptions are supported:</p> Notification Event Type Notification Event Type Notification Event Type resourceUpdate retrieveCNTNoChild blockingUpdate createDirectChild triggerReceivedForAE deleteDirectChild missingData Partial Retrieve <p>Partial retrieve of individual resource attributes is supported.</p> Remote CSE Registration <p>The ACME CSE supports CSE registrations via the Mcc and Mcc' reference points.  In addtion announced resources, synchronization, and transit requests that  target resources on remote CSE's are supported.</p> Request Expiration <p>The Request Expiration Timestamp request parameter is supported.</p> Request Forwarding <p>Forwarding requests from one CSE to another is supported.</p> Request and Resource Validations <p>All requests and resources received via the Mca, Mcc and Mcc' reference points are validated.</p> Resource Addressing <p>CSE-Relative, SP-Relative and Absolute as well as hybrid addressing are supported.</p> Resource Announcements <p>Announcements of resources are supported via the Mcc and Mcc' reference points. Resources are announced under a CSEBaseAnnc resource on the target CSE (R4 feature). Bi-directional update and attribute syncronization is supported as well.</p> Resource Expiration <p>Resources are automatically deleted after the expiration time has passed.</p> Result Content Types <p>The following result contents are implemented for standard oneM2M requests and discovery:</p> Discovery Type RCN Discovery Type RCN nothing 0 child-resource-references 6 attributes 1 original-resource 7 hierarchical address 2 child-resources 8 hierarchical address + attributes 3 modified attributes 9 attributes + child-resources 4 semantic content 10 attributes + child-resource-references 5 discovery result references 11 Result Expiration <p>The Result Expiration Timestamp request parameter is supported.</p> Semantics <p>Basic support for semantic descriptors, semantic queries and discovery is available.</p> Service Provider Registration <p>Registrations between Service Provider IN-CSEs are supported via the Mcc' reference point. All the functionalities of the Mcc reference point are supported, such as resource announcements, synchronization, and transit requests that target resources on remote oneM2M service provider CSEs.</p> Subscriptions <p>Subscriptions are supported, including batch notification, and resource type and attribute filtering.</p> Time Synchronization <p>The ACME CSE supports time synchronization via the timeSyncBeacon resource type.</p> TimeSeries Data Handling <p>TimeSeries data handling is supported, including missing data detection, monitoring and notifications.</p>"},{"location":"home/Supported/#protocols-bindings","title":"Protocols Bindings","text":"<p>The following Protocol Bindings are supported. It is possible to enable only one binding, or to use any combination of them for a CSE instance.</p> CoAP <p>The CoAP protocol is supported. CoAP over DTLS is not yet implemented.</p> <p>Release 5</p> <p>The current implementation only support the CoAP binding specification for oneM2M Release 1-4.  The upcoming Release 5 specification is not yet supported.</p> http <p>The http protocol is supported, including TLS (https) and CORS support. </p> <p>The basic and bearer authentication methods are supported.</p> <p>Experimental Feature</p> <p>Some libraries and embedded chipsets do not support the DELETE method in http/1.0 (this method was only added in http/1.1). The ACME CSE therefore supports DELETE requests via the PATCH method, that is available in many http/1.0 implementations.  </p> <p>See also the allowPatchForDelete configuration setting.</p> mqtt <p>The mqtt protocol is supported, including TLS (mqtts) support.</p> <p>This protocol binding requires a separate MQTT broker to be installed and running.</p> <p>Basic username/password authentication with an mqtt broker is supported as well.</p> WebSocket <p>The WebSocket protocol is supported, including TLS (wss) support   </p> <p>Experimental Feature</p> <p>Besides the standard oneM2M WebSocket binding, the ACME CSE supports an experimental extension to better support notifications.</p>"},{"location":"home/Supported/#serialization-types","title":"Serialization Types","text":"<p>The following serialization types for requests and responses are supported. </p> <p>Info</p> <p>The XML serialization is not supported. Though it is part of the oneM2M standard, it is not planned to be implemented in the ACME CSE because XML is only very rarely used in real-world IoT deployments.</p> JSON <p>In addition to the common JSON syntax, C-style and Python-style comments are supported as well:</p> <ul> <li>Block comment:  <code>/* ... */</code></li> <li>End-of-line comment: <code>// ...</code> and <code># ...</code></li> </ul> CBOR <p>CBOR is a binary serialization format. Messages are fairly smaller and faster to process than JSON messages.</p>"},{"location":"home/Supported/#experimental-functionalities","title":"Experimental Functionalities","text":"<p>These features are prove-of-concept implementations of new and currently  discussed oneM2M functionalities. They are not yet part of the oneM2M standard.</p> Enhanced CSR functionality <p>Support for a new R5 eventEvaluationMode to react on missing events.</p> Subscription References <p>Support for subscription references for resource instead of direct subscriptions.</p> Advanced Queries <p>Experimental implementation of a new query language to support enhanced query capabilities.</p> Simplified Time Synchronization <p>Experimental implementation of a simplified time synchronization mechanism.</p> Support for DELETE requests for http/1.0 <p>Using PATCH requests to emulate DELETE requests for http/1.0 clients.</p>"},{"location":"home/SupportedRuntime/","title":"CSE Runtime Features","text":"<p>In addition to the oneM2M standard functionalities,  the ACME CSE implements additional features to help with deployments and to understand and learn about oneM2M.</p>"},{"location":"home/SupportedRuntime/#database-bindings","title":"Database Bindings","text":"<p>The following database bindings are supported:</p> PostgreSQL <p>PostgreSQL is a powerful, open-source object-relational database system.  The ACME CSE can be configured to use a local or remote PostgreSQL database for data storage.</p> TinyDB \"file-based\" <p>TinyDB is a fast and lightweight  document oriented database that is ideal for small installations.</p> TinyDB \"in-memory\" <p>TinyDB can also be used as an in-memory database.  This is useful for testing and small installations.</p> <p>This database binding offers the fastest processing speed and response times. However, it offers no persistence of data between restarts.</p>"},{"location":"home/SupportedRuntime/#additional-cse-runtime-features","title":"Additional CSE Runtime Features","text":"<p>The ACME CSE provides the following additional features:</p> Guided Setup <p>An interactive setup process that guides the user through the initial configuration of the CSE.</p> HTTP Authorization <p>Basic support for basic and bearer (token) authorization.</p> HTTP CORS <p>Support for Cross-Origin Resource Sharing to support http(s) redirects.</p> HTTP WSGI <p>Support for the Python Web Server Gateway Interface to improve integration with a reverse proxy or API gateway, ie. Nginx.</p> Management Interface <p>A management interface that provides several commands to manage the CSE and retrieve information about its operation.  The management interface is disabled by default and can be enabled in the configuration file. See CSE Management for more information.</p> Recording Requests <p>Requests over Mca and Mcc to an from a CSE can be recorded. This may be used to inspect communication sequences between oneM2M entities and to debug requests.</p> Remote Configuration <p>Besides using a local configuration file, the ACME CSE can also use a Apache Zookeeper server to retrieve its configuration.</p> Script Interpreter <p>The CSE includes a Lisp-based script interpreter to extent CSE functionalities,  implement simple AEs, prototypes, tests, and more.</p> Testing: Upper Tester <p>Basic support for the Upper Tester protocol defined in oneM2M's TS-0019, and additional command execution support.</p> Text Console <p>Control and manage the CSE, inspect resources, and run scripts in a text console. The log output is also displayed in the text console.</p> Text UI <p>A text-based user interface to inspect resources and requests, configurations,  stats, manage resources, display diagrams, and more.</p> Web UI <p>A Web UI that displays the oneM2M resource tree and offers a basic REST UI.</p>"},{"location":"home/SupportedRuntime/#runtime-environments","title":"Runtime Environments","text":"<p>The ACME CSE runs at least on the following runtime environments:</p> <ul> <li>Generic Linux     Including Raspberry Pi OS (32bit) on Raspberry Pi.</li> <li>macOS</li> <li>MS Windows</li> <li>Jupyter Notebooks     ACME CSE can be run headless inside a Jupyter Notebook.</li> <li>Docker     ACME CSE can be run in a Docker container.</li> </ul>"},{"location":"home/oneM2M-introduction/","title":"A Short Introduction to oneM2M","text":"<p>oneM2M is a global standard that defines a Common Service Layer for IoT systems. It is designed to be interoperable and to be used in IoT scenarios across domains, including smart cities, smart agriculture, smart homes, and many more. </p> <p>oneM2M is developed by the oneM2M Partnership Project, which was formed by seven of the world's leading ICT standards development organizations (SDOs) and organizations representing ICT service providers. This partnership project defines and publishes the specifications that form the oneM2M standard.</p> <p>This article can only provide a short overview about oneM2M. Further introductions and examples can be found at the oneM2M Recipes site.</p>"},{"location":"home/oneM2M-introduction/#common-service-functions","title":"Common Service Functions","text":"<p>The oneM2M architecture is based on the concept of Common Service Functions (CSF) for IoT applications that are provided by a Common Service Entity (CSE). A CSE can be implemented in many different ways, for example as a cloud service, on a gateway device, or on a capable IoT device. The ACME oneM2M CSE provides a conformant subset implementation of these common service functions.</p> <p> </p> Figure 1: oneM2M Common Service Functions (source: oneM2M) <p>As the name suggests, the Common Service Functions provide a useful function set which can be used by an IoT application. An application may use any of the service functions in order to implement its own specific application functionality. It is important to note that it doesn't matter whether these IoT applications run on a small device, an edge gateway, or in the cloud. But especially for constrained IoT devices it may be important to move some of the IoT-specific application logic to a more capable entity in order to save resources.</p> <p>Examples for some of the common services are:</p> <ul> <li>Data management: A CSE provides a set of services for storing, retrieving, and managing IoT data. This includes services for storing, retrieving and managing IoT data.</li> <li>Device management: Another common service function is the management of IoT devices. This includes services for registering IoT devices and managing IoT devices.</li> <li>Security: An important part is the set of functionalities for securing IoT data and providing access control within a oneM2M system which is provided by a CSE.</li> <li>Communication: A CSE provides a set of services for communicating within a oneM2M system and with IoT devices. This includes services for sending and receiving IoT data, support for polling as well as for subscribe &amp; notify mechanisms, for managing IoT device communication channels, and protocols.</li> <li>Discovery: oneM2M provides services for discovery services for IoT devices and IoT data within a oneM2M system. This includes also Semantic discovery services. </li> </ul>"},{"location":"home/oneM2M-introduction/#architecture","title":"Architecture","text":"<p>Figure 2 shows the basic architecture of oneM2M.  The middle layer (in red) represents the Common Service Entities (CSE) and the Common Service Functions (CSF). The CSEs provide the Common Services for IoT applications called Application Entities (AE, in blue).  At the bottom the Network Service Entity (NSE, in grey) provides network services for the CSEs. The details of the NSE are not part of the oneM2M standard, but it is an important part of the oneM2M architecture. The NSE provides the connectivity services for the CSEs. This includes services for connecting CSEs and IoT devices, to manage network resources as well as to provide network security, AAA and location services, and more.</p> <p> </p> Figure 2: oneM2M Architecture (source: oneM2M)"},{"location":"home/oneM2M-introduction/#entities","title":"Entities","text":"<p>The following table lists the abbreviations used in the oneM2M architecture.</p> Entity Abbreviation Meaning Application Entity AE Provides application logic for the end\u2010to\u2010end M2M solutions. More generally, this is the IoT Application. Common Services Entity CSE Provides the set of \u201cservice functions\" common to the M2M environments.This is the oneM2M IoT Server. Network Services Entity NSE Provides connectivity services to the CSEs besides the pure data transport. Node Logical equivalent of a physical (or possibly virtualized) device.oneM2M distinguishes between a device/node and the application(s), ie. AEs, that run on a device."},{"location":"home/oneM2M-introduction/#reference-points","title":"Reference Points","text":"<p>The oneM2M architecture defines a set of reference points that are used to describe the RESTful interfaces between the different components of a oneM2M system. Figure 2 also shows the reference points of the oneM2M architecture. They start with the letters \"Mc\" and are followed by a letter that indicates the direction of the interface, for example \"Mca\" for the interface between a CSE and an AE.</p> <p>Note</p> <p>An application developer will always use the Mca reference point to communicate with a CSE. Here, protocols like HTTP, CoAP, MQTT or Websockets can be used to communicate with the CSE and to use the Common Service Functions.</p> <p>The following table lists the reference points and their meaning.</p> Reference Point Meaning Mca: CSE - AE Interface between a CSE and an Application Entity Mcc: CSE \u2013 CSE Interface between two CSEs Mcn: CSE - NSE Interface between a CSE and the Network Service Entity Mcc\u2019 Interface between two service providers.This reference point is used to connect multiple servide provider domains or oneM2M systems."},{"location":"howtos/AuthenticationBetweenCSEs/","title":"How to Enable Authentication Between CSEs","text":"<p>For the Mca communication between an AE and a CSE, the CSE supports Basic Authentication and Bearer Token Authentication. These methods are supported for the HTTP and WebSocket bindings. The same authentication methods can be used for the communication between CSEs. </p>"},{"location":"howtos/AuthenticationBetweenCSEs/#authenticating-to-the-registrar-cse","title":"Authenticating to the Registrar CSE","text":"<p>For example, to enable basic authentication to authenticate access to the registrar CSE, one has to set the currect username and password in the acme.ini configuration file of the registrar CSE in the [cse.registrar.security] section, for example</p> Setting the username and password for http basic authentication with the registrar CSE<pre><code>[cse.registrar.security]\nhttpUsername=aUsername\nhttpPassword=aPassword\n</code></pre> <p>The CSE then uses these credentials to authenticate the Mcc communication with the registrar CSE. Of course, the registrar CSE must be configured to accept these credentials. The same applies to the WebSocket binding. A similar configuration can be made for Bearer Token Authentication for the http or WebSocket bindings.</p>"},{"location":"howtos/AuthenticationBetweenCSEs/#authenticating-requests-from-the-registrar-cse","title":"Authenticating Requests from the Registrar CSE","text":"<p>In return it is also possible to provide credentials that the registrar CSE must use for the Mcc communication with this CSE. http and WebSocket requests from the registrar CSE to this registree CSE can be authenticated using the same methods as described above.</p> <p>The configuration for the CSE is done as well in the [cse.registrar.security] section of the acme.ini configuration file:</p> Setting the username and password for http basic authentication to be used by the registrar CSE<pre><code>[cse.registrar.security]\nselfHttpUsername=aUsername\nselfHttpPassword=aPassword\n</code></pre> <p>Currently, only the http and WebSocket bindings support this kind of authentication, and only the basic authentication method is supported.</p> <p>Note</p> <p>This method adds the credentials to the URL in the point of access (PoA) attribute of the remote CSR resource. This is not a secure method and should only be used in a secure and trusted environment. Also, the implementation of the registrar CSE must support this method of authentication.</p>"},{"location":"howtos/Docker/","title":"Docker","text":"<p>This section describes how to create and run a Docker image for the ACME CSE. </p>"},{"location":"howtos/Docker/#running-from-dockerhub","title":"Running from DockerHub","text":"<p>A Docker image with reasonable defaults is available on Docker Hub: https://hub.docker.com/repository/docker/ankraft/acme-onem2m-cse .</p> <p>You can download and run it with the following shell command:</p> Download Image and Run<pre><code>docker run -it -p 8080:8080 --rm --name acme-onem2m-cse ankraft/acme-onem2m-cse\n</code></pre> <p>To adjust the output to the current terminal width run the image with the following command:</p> Run Container with Terminal Width<pre><code>docker run -e COLUMNS=\"`tput cols`\" -e LINES=\"`tput lines`\" -it -p 8080:8080 --rm --name acme-onem2m-cse ankraft/acme-onem2m-cse\n</code></pre>"},{"location":"howtos/Docker/#build-your-own-docker-image","title":"Build Your Own Docker Image","text":"<p>You can adapt (ie. configure a new Docker Hub ID) the build script and Dockerfile in the tools/Docker directory. It might be a good idea, for example, to run the CSE in head-less mode (command line argument <code>--headless</code> or configuration setting [console].headless), which disables screen output. This is the default setting for the provided Docker image.</p> <p>The build script takes all the current scripts, attribute definitions etc. from the ACME module's init directory and includes them in the Docker image. The configuration file for the Docker image's acme.ini file is copied from file acme.docker from the Docker directory. Please make any necessary changes to that file before building the image.</p>"},{"location":"howtos/Docker/#different-cpu-architectures","title":"Different CPU Architectures","text":"<p>The default Docker image is built for the amd64 architecture. If you want to run the CSE on a different architecture and avoid running in emulation mode, you need to build the image on that architecture. The Makefile in the tools/Docker directory provides a targets for building the image on the ARM64 and AMD64 architectures.</p> Build Docker Image for ARM64<pre><code># Build Docker Image for ARM64\nmake build-arm64\n\n# Build Docker Image for AMD64\nmake build-amd64\n</code></pre>"},{"location":"howtos/Docker/#running-the-cse","title":"Running the CSE","text":""},{"location":"howtos/Docker/#mapped-base-directory","title":"Mapped Base Directory","text":"<p>The Docker image uses the /data directory as the base directory for the CSE's runtime data. This directory can be mapped to a directory on the host system. </p> <p>This is useful for persisting data across container restarts and to provide a different configuration file that is then used instead of the default acme.ini file. This directory may also contain a secondary init directory with additional scripts, attribute definitions, etc.</p> <p>For example, to use the directory /host/data on the Docker host as the base directory, run the following command:</p> Run Container with Mapped Base Directory<pre><code>docker run -it -p 8080:8080 -v /host/data:/data --rm --name acme-onem2m-cse ankraft/acme-onem2m-cse\n</code></pre> <p>Important</p> <p>Don't forget to copy a valid acme.ini file to the mapped directory that contains all the configurations for your CSE. The CSE will use this file instead of the default one.</p>"},{"location":"howtos/Docker/#environment-variables","title":"Environment Variables","text":"<p>ACME supports the use of environment variables in the configuration settings. This is useful when running the CSE in a Docker container, where the configuration settings can be set via environment variables. </p> <p>One example is to provide the Docker host's IP address to the CSE as the cseHost configuration settings.</p> <p>The setting for cseHost in the acme.ini file should should be changed to the following:</p> Use Environment Variable to set the Host IP<pre><code>[basic.config]\n...\ncseHost=${DOCKER_HOST_IP}\n...\n</code></pre> <p>The value for this setting can be provided by setting the environment variable DOCKER_HOST_IP to the Docker host's IP address:</p> Run Container with Docker Host IP Environment Variable<pre><code>docker run -it -p 8080:8080 -v /path/to/data:/data -e DOCKER_HOST_IP=`ifconfig en0 | awk '$1 == \"inet\" {print $2}'` -rm --name acme-onem2m-cse ankraft/acme-onem2m-cse\n</code></pre> <p>Values for other setting, such as credentials, can be provided the same way.</p>"},{"location":"howtos/Docker/#exposed-ports","title":"Exposed Ports","text":"<p>The provided Docker image exposes TCP ports 8080 (http) and 8180 (websockets), and UDP port 5683 (CoAP). The ports can be mapped to different ports on the host system. </p> <p>The ports are always exposed even if only the HTTP binding is enabled by default.</p>"},{"location":"howtos/Docker/#headless-mode","title":"Headless Mode","text":"<p>The ACME CSE can be run in headless mode, which means that the console output is not displayed in the terminal. This is useful when running the CSE in a Docker container, where the console output is not needed.</p> <p>To run the CSE in headless mode, use the command line argument <code>--headless</code> or set the configuration setting [console].headless to <code>true</code> in the acme.ini configuration file. </p> <p>Note</p> <p>Headless mode is the default setting for the provided Docker image.</p>"},{"location":"howtos/Docker/#restarting-the-cse","title":"Restarting the CSE","text":"<p>In the provided Docker image, the CSE is run within a loop that restarts it if the CSE is shutdown with the intention to be restarted. This means that the CSE can be restarted without restarting the Docker container. If the CSE shuts down normally, the Docker container will exit. </p>"},{"location":"howtos/EnablingSyntaxHighlighting/","title":"Enabling Syntax Highlighting in the Resource Text Editor","text":"<p>The ACME CSE supports syntax highlighting in the text UI by default, but not for the resource text editor. This feature is provided by the textual[syntax] package. To install it, run the following commands:</p> Install Syntax Highlighting Package<pre><code>python -m pip uninstall textual\npython -m pip install textual[syntax]\n</code></pre> <p>Note</p> <p>The textual[syntax] package is not required for the basic functionality of the ACME CSE. It is only needed if you want to use the syntax highlighting feature in the resource text editor.</p> <p>This package may not be available for all platforms. If you encounter any issues, please use the normal installation without the syntax feature.</p> <p>After installing the package, you can enable syntax highlighting in the resource text editor. To do this, set the configuration setting enableTextEditorSyntaxHighlighting to True in the local acme.ini file:</p> Enable Syntax Highlighting for the resource text editor<pre><code>[textui]\nenableTextEditorSyntaxHighlighting = True\n</code></pre>"},{"location":"howtos/ExperimentalWebSocketBinding/","title":"Experimental WebSocket Binding","text":"<p>In release 2024.03 the ACME CSE got support for the WebSocket protocol. This protocol offers an always-on connection between a client and a server for fast data transfer. The performance gain comes mostly from the fact that with WebSockets it is not necessary to establish new network connections, opening sockets etc. every time when a request is sent.</p> <p>This binding is especially useful for CSE-to-CSE connections when two CSEs are constantly exchanging requests and responses. However, it is not really suited for devices (ADN) to use this protocol binding because the drawback is that computing and network resources are kept constantly assigned by both parties. It may make sense, though, to support this binding on an ADN whenever the use case is bulk and high frequency transfer of requests, such in the case of time series data.</p>"},{"location":"howtos/ExperimentalWebSocketBinding/#websocket-and-originators","title":"WebSocket and Originators","text":"<p>The technical specification is published in oneM2M's TS-0020 and available on the specification page . Unfortunately, there is a small issue in the specification when it comes to send notifications from, for example, a CSE to a connected AE or another CSE. </p> <p>The specification states that an established WebSocket connection must be used when sending notifications to a client (an AE or CSE). In normal cases, this is not a problem. However, there could be a situation that a client establishes a WebSocket connection but doesn't send a request immediately. This is normal behavior, but without a oneM2M request the CSE cannot associate that specific WebSocket connection with an originator. If in this case the CSE needs to send a notification to a client (ie. an originator) it does not know whether there is an established WebSocket connection, even if, technically, there is one.</p> <p>The solution for this is that a client needs to add an additional header when opening a WebSocket connection. This is similar to the <code>X-M2M-Origin</code> header in the oneM2M HTTP binding, and in fact the experimental feature proposes that this header must be present when a WebSocket connection is opened. </p> Example Python Code<pre><code>websocket = connect(cseUrl, \n                    subprotocols=['oneM2M.json'],\n                    additional_headers={ 'X-M2M-Origin': anOriginator })\n</code></pre> <p>The only exception is when registering an AE. In this case, again similar to the HTTP binding, this header may be absent. </p>"},{"location":"howtos/ExperimentalWebSocketBinding/#establishing-websocket-connections","title":"Establishing WebSocket Connections","text":"<p>Another experimental feature is that WebSockets may be established from AEs as well as CSEs (or registrees and registrars in oneM2M terms). The original (current) specification states that WebSockets must only be established by a registree, but this is very limiting and may force small ADN devices to implement multiple oneM2M bindings technologies when they want to be able to receive notifications even when no WebSocket connection has been established. Also, it is not clearly specified how to store requests from a registrar to a registree in case a connection is not available at the moment.</p> <p>The implemented experimental feature now adds the following procedure and a special URL schema for the poa (point of access) attribute for WebSocket connections:</p> <ul> <li>If there is an established WebSocket connection for a request originator then send the request over this connection.</li> <li>If there is no established WebSocket connection:</li> <li>If there is a URL in the poa attribute with the value <code>ws://default</code> then don't open a new WebSocket connection (because only the default one should be used). Continue with step iii.</li> <li>If there is a \"normal\" WebSocket URL then establish a WebSocket connection to that URL and send the request and await the response. Afterwards the connection may be closed.</li> <li>Otherwise follow the usual procedure for poa handling, ie. look for other means to reach the originator.</li> </ul> <p>To support this feature, of course, a registree must implement a WebSocket server as well.</p>"},{"location":"howtos/ExperimentalWebSocketBinding/#changes-to-onem2ms-ts-0020-websocket-binding-specification","title":"Changes to oneM2M's TS-0020 WebSocket Binding Specification","text":"<p>These changes were submitted as a Change Request SDS-2024-0021 to TS-0020 (March 2024) and will be discussed in oneM2M's SDS working group.</p>"},{"location":"howtos/ExportResources/","title":"How to Export Resources","text":"<p>Sometimes it could be useful to export resources, for example to backup a part of the resource tree or to save the state of the resource tree for demonstration and experiments.</p>"},{"location":"howtos/ExportResources/#exporting-resources","title":"Exporting Resources","text":"<p>The ACME CSE offers a simple and portable way to export single resources or a whole part of the resource tree. In the text UI when clicking on a resource a tab Services contains the service \"Export Resource\". When clicking on the \"Export\" button a resource and (depending on the \"child resource\" checkbox) its child resources are exported to a directory as a shell script with the current date and time. The directory is the tmp directory under the CSE's root directory.</p> <p> </p> Text UI - Exporting Resources <p>The generated script contains the necessary commands to send Mca CREATE requests using curl commands over http for the exported resources.</p> <p>One is free to make modifications to the exported resources as necessary, or to combine various resource scripts into a single script.</p>"},{"location":"howtos/ExportResources/#importing-resources","title":"Importing Resources","text":"<p>The generated shell script contains three sections:</p> <ul> <li>The variable <code>cseURL</code> that is set to the URL of a CSE where the resources will be imported again. This should be set to appropriate address when targeting another CSE.</li> <li>Shell functions that construct the CREATE requests and send it using the curl command line tool.</li> <li>At the bottom are the shell function calls with the originator, resource type, and resource representations. </li> </ul> <p>Import</p> <p>The resource representations can only contain the resource attributes that can be present in CREATE requests. This means, for example, that the resourceID of a resource is not present.  This also means, unfortunately, that references between resource may be incomplete after an export and need to be set manually afterwards.</p> <p>To import the resources in an export script just run the script in a (bash) shell:</p> Run the export script<pre><code>$ sh export-20240316T131612.sh\n</code></pre>"},{"location":"howtos/ExportResources/#example-script","title":"Example Script","text":"<p>The following is an example of an export script that exports a container with two content instances and a subscription:</p> Example export script<pre><code>#!/bin/bash\n# Exported cnt6834189228603991262 from id-in at 20240316T131612,894875\n\ncseURL=http://localhost:8080  # (1)!\n\nfunction uniqueNumber() { # (2)!\n    unique_number=\"\"\n    for i in {1..10}\n    do\n        unique_number+=$RANDOM\n    done\n    unique_number=${unique_number:0:10}\n    echo \"$unique_number\"\n}\n\nfunction createResource() { # (3)!\n    printf '\\nCreating child resource under %s\\n' $cseURL/$4\n    printf 'Result: '         \n    curl -X POST -H \"X-M2M-Origin: $1\" -H \"X-M2M-RVI: 4\" -H \"X-M2M-RI: $(uniqueNumber)\" -H \"Content-Type: application/json;ty=$2\" -d \"$3\" $cseURL/$4\n    printf '\\n'\n}\n\n# (4)!\n\ncreateResource CDemoLightswitch 3 '{\"m2m:cnt\": {\"rn\": \"switchContainer\", \"mni\": 10, \"acpi\": [\"acp3542208976028337519\"]}}' 'cse-in/CDemoLightswitch'\ncreateResource CDemoLightswitch 23 '{\"m2m:sub\": {\"rn\": \"switchSubscription\", \"nu\": [\"cse-in/CDemoLightbulb\"], \"enc\": {\"net\": [3]}, \"nct\": 1}}' 'cse-in/CDemoLightswitch/switchContainer'\ncreateResource CDemoLightswitch 4 '{\"m2m:cin\": {\"con\": \"off\", \"rn\": \"cin_KJyrTD7INf\"}}' 'cse-in/CDemoLightswitch/switchContainer'\ncreateResource CDemoLightswitch 4 '{\"m2m:cin\": {\"con\": \"off\", \"rn\": \"cin_MQ5AK9WRbs\"}}' 'cse-in/CDemoLightswitch/switchContainer'\n</code></pre> <ol> <li>The variable <code>cseURL</code> is set to the URL of the CSE where the resources will be imported again. This should be set to the appropriate address when targeting another CSE.</li> <li>This function generates a unique number that is used for various identifiers. </li> <li>This function creates a resource in the CSE using the curl command line tool. The function takes four arguments: the originator, the resource type, the resource representation, and the parent resource's URL.</li> <li>From here on the script creates the resources. The <code>createResource</code> function is called with the originator, the resource type, the resource representation, and the parent resource's URL.</li> </ol>"},{"location":"howtos/ExportResources/#exporting-contentinstances","title":"Exporting ContentInstances","text":"<p>Similar to exporting other resources, content instances from &lt;container&gt; and &lt;timeSeries&gt; resources can be exported via the text UI as a CSV<sup>1</sup> file or copied as CSV data to the clipboard. This may be useful for backing up content or exporting data for further analysis. </p> <p>Note</p> <p>Exporting data from &lt;flexContainerInstances&gt; is not supported at the moment.</p> <p>When selecting a &lt;container&gt; or &lt;timeSeries&gt; resource in the text UI the tab Services offers the service \"Export Instances\". When clicking on the \"Export CSV\" button a CSV file with the content and other information is exported to a file in the tmp directory under the CSE's root directory. When clicking on the \"Copy CSV\" button the CSV data is copied to the clipboard.</p> <ol> <li> <p>Comma-separated values\u00a0\u21a9</p> </li> </ol>"},{"location":"howtos/HowTo-pyenv/","title":"How to Install pyenv","text":"<p>This guide shortly describes how to install the pyenv virtual environment manager. In addition, we will install pyenv-virtualenv. This is a pyenv plugin for creating and managing virtual Python environments. </p> <p>pyenv is only officially supported on Linux/MacOS systems, so we will focus on these OS environments.</p>"},{"location":"howtos/HowTo-pyenv/#prerequisites","title":"Prerequisites","text":""},{"location":"howtos/HowTo-pyenv/#homebrew","title":"Homebrew","text":"<p>This guide assumes that you have installed the homebrew package manager.</p>"},{"location":"howtos/HowTo-pyenv/#macos-xcode-dependencies","title":"MacOS: Xcode dependencies","text":"<p>If not done yet, we need to install the Xcode dependencies:</p> Install Xcode dependencies<pre><code>Xcode-select --install\n</code></pre>"},{"location":"howtos/HowTo-pyenv/#installing-pyenv","title":"Installing pyenv","text":"<p>Install pyenv using homebrew:</p> Install pyenv<pre><code>brew upgrade\nbrew install pyenv\n</code></pre> <p>Install extra libraries:</p> Install extra libraries<pre><code>brew install readline xz\n</code></pre> <p>Install virtualenv using homebrew:</p> Install pyenv-virtualenv<pre><code>brew install pyenv-virtualenv\n</code></pre>"},{"location":"howtos/HowTo-pyenv/#getting-started","title":"Getting Started","text":"<p>We can now use pyenv and pyenv-virtualenv. We start with installing a Python version.</p> <p>The following command installs Python 3.11.7 in pyenv:</p> Install a Python Version<pre><code>pyenv install 3.11.7\n</code></pre> <p>Since we want to keep the installed base Python version \"clean2, we will create a new virtual environment, e.g. taking version 3.11.7 as a base version. The following command will create a virtual environment acme-3.11 that can be used later on:</p> Create a Virtual Environment<pre><code>pyenv virtualenv 3.11.7 acme-3.11\n</code></pre> <p>We can now enable a virtual environment for the local directory:</p> Enable a virtual environment for the local directory<pre><code>pyenv local acme-3.11\n</code></pre>"},{"location":"howtos/HowTos/","title":"HowTos","text":"<p>This section provides a growing collection of HowTos for the ACME oneM2M CSE.</p> <p>Further help can be found in the FAQ section.</p>"},{"location":"howtos/RaspberryPi/","title":"Installing ACME on a Raspberry Pi","text":"<p>Doing installations on a Raspberry Pi, especially on older versions, could be a small challenge, because some of the external Python packages require extra libraries that are not necessarily available on an old Raspberry Pi.</p> <p>This guide presents the necessary steps to install Python 3.11, the external Python packages and ACME on an older Raspberry Pi 3B with Raspberry Pi OS (32 bit).</p>"},{"location":"howtos/RaspberryPi/#installation-for-raspberry-pi-os-bookworm-or-newer","title":"Installation for Raspberry Pi OS \"Bookworm\" or newer","text":"<p>Newer Raspberry Pi OS versions come already with a Python 3.11.x version installed. It is still recommended to install pyenv(target=new} or another virtual environment to keep the system installation clean.</p>"},{"location":"howtos/RaspberryPi/#installing-pyenv","title":"Installing pyenv","text":"<p>The easiest way to install pyenv is to run the automatic installer as described here:</p> pyenv Automatic Installation<pre><code>curl https://pyenv.run | bash\n</code></pre> <p>After this installation is finished it is recommended to follow the on-screen instructions to update the .bashrc file to always use and initialize the virtual environments.</p>"},{"location":"howtos/RaspberryPi/#installing-a-different-python-version","title":"Installing a Different Python Version","text":"<p>PyEnv can be used to install a different Python version. This usually requires a couple of system libraries that need to be installed before.</p> <p>See also How to Install pyenv for further details.</p>"},{"location":"howtos/RaspberryPi/#installing-extra-libraries-and-components","title":"Installing Extra Libraries and Components","text":"Install Extra Components and Libraries<pre><code>sudo apt update\nsudo apt-get install -y build-essential tk-dev libncurses5-dev libncursesw5-dev libreadline6-dev libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev libffi-dev libatlas-base-dev libgeos-dev gfortran git cmake libpq-dev\n</code></pre>"},{"location":"howtos/RaspberryPi/#next-steps","title":"Next Steps","text":"<p>One can now continue with the installation and activation of a different Python version in the virtual environment and the installation of ACME itself.</p>"},{"location":"howtos/RaspberryPi/#installation-for-older-raspberry-pi-os-versions","title":"Installation for older Raspberry Pi OS Versions","text":"<p>This section describes the installation process on older (also 32bit) versions of the Raspberry PI OS (or Raspbian).</p>"},{"location":"howtos/RaspberryPi/#installing-python-and-tools","title":"Installing Python and Tools","text":"<p>First, we need to install a newer Python 3 runtime on our Raspberry Pi.</p>"},{"location":"howtos/RaspberryPi/#downloading-python-source","title":"Downloading Python Source","text":"<p>The following download gets the source code from the official Python repository. It could be a newer version of Python as well, of course.</p> Download Python<pre><code>wget https://www.python.org/ftp/python/3.11.4/Python-3.11.4.tgz\n</code></pre>"},{"location":"howtos/RaspberryPi/#installing-extra-libraries-and-components_1","title":"Installing Extra Libraries and Components","text":"<p>The following commands install the necessary system libraries and other tools to compile Python on the Raspberry Pi. :</p> Install Extra Components and Libraries<pre><code>sudo apt update\nsudo apt-get install -y build-essential tk-dev libncurses5-dev libncursesw5-dev libreadline6-dev libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev libffi-dev libatlas-base-dev libgeos-dev gfortran git cmake libpq-dev\n</code></pre>"},{"location":"howtos/RaspberryPi/#compile-python","title":"Compile Python","text":"<p>The next step is to unpack and to unpack, configure, make and install the Python runtime.</p> Compile Python<pre><code>tar -xzvf Python-3.11.4.tgz \ncd Python-3.11.4/\n./configure --enable-optimizations\nsudo make -j 4\nsudo make altinstall\ncd ..\n</code></pre>"},{"location":"howtos/RaspberryPi/#install-configure-and-run-acme","title":"Install, Configure, and Run ACME","text":"<p>Next, we will install the ACME CSE. </p> <p>You can now follow the instructions in the Installation guide to install the ACME CSE on your Raspberry Pi.</p>"},{"location":"howtos/ServiceProviderRegistration/","title":"How to Interconnect Service Providers","text":"<p>A normal oneM2M deployment consists of a set of oneM2M nodes that are connected to each other in a tree-like structure, consisting of a root infrastructure node (IN-CSE) and several child nodes that can be either middle nodes (MN-CSE), application service nodes (ASN-CSE), or application dedicated nodes (ADN-CSE).</p>"},{"location":"howtos/ServiceProviderRegistration/#service-provider-registrations","title":"Service Provider Registrations","text":"<p>oneM2M defines a mechanism to interconnect different oneM2M deployment trees. This is done by registering an IN-CSE of one service provider deployment with an IN-CSE of another service provider deployment. This can be done multiple times, allowing a node to connect to multiple other nodes.</p> <p>The following figure illustrates this concept.</p> <p></p> oneM2M Registrations <p>The CSEs of a single service provider can register with each other via the Mcc reference point (the blue connections in the figure). The top-level IN-CSE of each service provider can then regiser itself with the IN-CSE of another service provider via the Mcc'<sup>1</sup> reference point (the orange connections in the figure).</p> <p>Registrations are uni-directional</p> <p>A registration between the IN-CSEs of different service providers is a uni-directional process. This means that the registration from one service provider to another only happens in one direction. The other service provider's IN-CSE must not register with the first service provider's IN-CSE.</p> <p>After the registration is successful, the two IN-CSEs can exchange information about their CSEs and resources. This allows the CSEs of one service provider to access resources of the other service provider's CSEs, as long as the remote CSEs allow this via their access control policies.</p>"},{"location":"howtos/ServiceProviderRegistration/#configuration","title":"Configuration","text":"<p>The configuration of the service provider registration is done in a similar way as a configuration to a normal registrar CSE within a single oneM2M deployment. </p> <p>The difference is that one needs to specify one or two sections in the configuration file. The name of each section is important, as it is used to distinguish the different service provider registrations. The section names must start with <code>cse.sp.registrar.</code> followed by a unique identifier for that particular service provider registration.</p> <p>In the examples below, we use \"Service Provider 1\" as the local service provider, and \"Service Provider 2\" as the remote service provider that we want to register with. Remember, the second service provider's IN-CSE must not register with the first service provider's IN-CSE.</p> <p>More details about these configuration settings can be found in the configuration documentation for Service Provider Registrations and Service Provider Security.</p>"},{"location":"howtos/ServiceProviderRegistration/#service-provider-section","title":"Service Provider Section","text":"<p>There must be at least one configuration section for the service provider registration itself, which contains the information about the remote IN-CSE. </p> <p>A minimum configuration section for a service provider registration could look like this:</p> Example Service Provider Registration Configuration<pre><code>[cse.sp.registrar.exampleProvider1]\n\n; The remote IN-CSE's service provider ID, address, CSE ID, resource name and serialization format\nspID = //provider-2.example.com\naddress = https://provider-2.example.com:8080\ncseID = /id-in-sp2\nresourceName = cse-in-sp2\nserialization = json\n</code></pre>"},{"location":"howtos/ServiceProviderRegistration/#security-section","title":"Security Section","text":"<p>Optionally, a second section can be provided to specify security information for connecting to the remote IN-CSE, such as the security scheme and credentials.</p> <p>An example security section for the service provider connection specified above that uses HTTPS with a self-signed certificate and basic authentication could look like this:</p> Example Service Provider Security Configuration<pre><code>[cse.sp.registrar.exampleProvider-2.security]\n\n; This is our user name and password that we use to authenticate with the remote IN-CSE\nhttpUsername = sp-1-User\nhttpPassword = hashedPassword-1\n\n; This is the user name and password that the remote IN-CSE uses to authenticate with us\nselfHttpUsername = spUser1-2\nselfHttpPassword = hashedPassword-2\n</code></pre>"},{"location":"howtos/ServiceProviderRegistration/#authorize-service-provider-registrations","title":"Authorize Service Provider Registrations","text":"<p>As with every registration, the registering CSE (Service Provider 1) must be authorized to register with the remote IN-CSE (Service Provider 2). This is done by adding the CSE's ID of Service Provider 1 to the allowedCSROriginators setting in the [cse.registration] section of Service Provider 2's configuration file:</p> Example Service Provider Registration Authorization for Service Provider 2<pre><code>[cse.registration]\nallowedCSROriginators=//provider-1.example.com/id-in-sp1\n</code></pre> <p>allowedCSROriginators is a list of CSE IDs, and may contain multiple entries, separated by commas. Each entry must be a valid CSE ID in absolute or SP-relative form.</p> <p>What about the registrar CSE's ID?</p> <p>The registrar CSE's (Service Provider 2) ID does not need to be added to the local CSE's (Service Provider 1) allowedCSROriginators setting. This ID is added implicitly when the registration is successful.</p> <ol> <li> <p>Mcc' is pronounced \"Mcc prime\"\u00a0\u21a9</p> </li> </ol>"},{"location":"howtos/StandAloneWebUI/","title":"Running the ACME Web UI as a Stand-Alone Application","text":"<p>The web UI can also be run as an independent application.  Since it communicates with the CSE via the Mca interfave it should be possible to use it with other CSE implementations as well as long as those third party CSEs follow the oneM2M http binding specification. It only supports the resource types that the ACME CSE supports, but at least it will present all other resource types as unknown.</p> <p>You can start the stand-alone web UI in a terminal like this (in the sub-directory acme/webui):</p> Start the Web UI as a stand-alone application<pre><code>python3 webUI.py\n</code></pre> <p>It starts with defaults, which can be set via command line arguments:</p> Command Line Argument Description -h, --help Show a help message and exit. --ip HOSTIP Specify the web UI's local IP address to bind to. Default: 127.0.0.1  (only localhost) --port HOSTPORT Specify the web UI's local port. Default: 8000 --cseurl TARGETURL The target CSE's base URL. This is where the actual CSE can be reached.Default: http://127.0.0.1:8080/ --ri TARGETRI The target CSE's default base RI.Default: id-in --originator TARGETORIGINATOR The target CSE's default originator. Default: CAdmin https/tls --tls Enable TLS (https) for the web UI.It is disabled by default. --certfile CERTFILE Path to the certificate file for TLS.Required for --tls.Default: None. --keyfile KEYFILE Path to the private key file.Required for --tls.Default: None. OAuth --oauth Enable OAuth2 authentication for CSE access.Default: False. --oauth-server-url OAUTHSERVERURL The OAuth2 server URL from which to retrieve the authentication token.Default: None.Automatic token retrieval and renewal is supported for keycloak. --client-id CLIENTID The OAuth2 client ID.Default: None. --client-secret CLIENTSECRET The OAuth2 client secret.Default: None. Misc --logging Enable logging to console.Default: False --no-open Disable opening a web browser on startup. Default: False"},{"location":"howtos/StandAloneWebUI/#example","title":"Example","text":"<p>The following command starts the web UI's proxy server with the following parameters:</p> <ul> <li>The proxy binds to the local IP interface (127.0.0.1) on port 8000 (both the defaults).</li> <li>The proxy proxy serves the web UI via http (the default, no TLS is enabled).</li> <li>The remote CSE is reachable at https://example.com/cse/ and has the resource ID incse.</li> <li>The remote CSE requires OAuth2 authentication, the client ID is aClientID, the client secret is aClientSecret, and the token is retrieved and renewed from https://example.com/token.</li> <li>Logging is enabled. </li> </ul> Start the Web UI as a stand-alone application with OAuth2<pre><code>python3 webUI.py --cseurl https://example.com/cse/ --logging --ri incse --oauth --client-id aClientID --client-secret aClientSecret --oauth-server-url https://example.com/token\n</code></pre>"},{"location":"setup/Certificates/","title":"Certificates","text":"<p>The ACME CSE supports the secure protocol version of HTTP, MQTT, and WebSockets. This means that you can use the CSE with HTTPS, MQTT over TLS, and WSS.</p> <p>To enable, for example, https you have to set various settings under the security configuration http.security, and provide a certificate and a key file. The other protocols are configured in a similar way.</p> <p>See also</p> <p>HTTP Security Settings MQTT Security Settings WebSocket Security Settings</p>"},{"location":"setup/Certificates/#self-signed-certificates","title":"Self-Signed Certificates","text":"<p>One way to create those files is the openssl tool that may already be installed on your OS. The following example shows how to create a self-signed certificate:</p> Create a self-signed certificate<pre><code>openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -nodes -days 1000\n</code></pre> <p>This will create the self-signed certificate and private key without password protection (-nodes), and stores them in the files cert.pem and key.pem respectively. openssl will prompt you with questions for Country Name etc, but you can just hit Enter and accept the defaults. The -days parameter affects the certificate's expiration date.</p> <p>Please also consult the openssl manual for further instructions. </p> <p>After you generated these files you can move them to a separate directory (for example you may create a new directory named cert under ACME's runtime base directory) and set the caCertificateFile and caPrivateKeyFile configuration parameters in the acme.ini configuration file under the appropriate security section(s) accordingly.</p>"},{"location":"setup/Certificates/#http-authentication","title":"HTTP Authentication","text":"<p>The ACME CSE supports the following HTTP authentication methods.</p> <p>Warning</p> <p>Note that the credentials are partly stored as plain text (ie. user names) and in hashed form (ie. passwords and tokens) in the respective credential files. Make sure to protect these files accordingly.</p>"},{"location":"setup/Certificates/#basic-authentication","title":"Basic Authentication","text":"<p>The ACME CSE supports basic authentication. To enable it, you have to set the [http.security].enableBasicAuth configuration parameter in the acme.ini configuration file to True .</p> <p>In addition, you have to set the [http.security].basicAuthFile configuration parameter to the path of a file that contains the user credentials. The file must be in the format username:password, and comments are allowed. The password is not as plain text but as a hashed password. You can use the hashcreds tool to create a hashed password.</p> <p>Example:</p> <pre><code># This is a comment\nuser1:hashedPassword1\nuser2:hashedPassword2\n</code></pre> <p>To access the CSE, you have to provide the credentials in the HTTP request header in the form of <code>Authorization: Basic &lt;credentials&gt;</code>, where &lt;credentials&gt; is the Base64 encoding of a username and (unhashed) password joined by a single colon.</p>"},{"location":"setup/Certificates/#bearer-token-authentication","title":"Bearer Token Authentication","text":"<p>The ACME CSE also supports a simple form of bearer token authentication. To enable it, you have to set the [http.security].enableTokenAuth configuration parameter in the acme.ini configuration file to True .</p> <p>In addition, you have to set the [http.security].tokenAuthFile configuration parameter to the path of a file that contains the bearer token. The file must contain lines with each token on a separate line. Comments (lines starting with #) are allowed. The token is not stored as plain text but as a hashed token. You can use the hashcreds tool to create a hashed token.</p> <p>Example:</p> <pre><code># This is a comment\nhashedToken1\nhashedToken2\n</code></pre> <p>In this case to access the CSE, you have to provide the (unhashed) bearer token in the HTTP request header in the form of <code>Authorization: Bearer &lt;token&gt;</code>.</p>"},{"location":"setup/Certificates/#websocket-authentication","title":"WebSocket Authentication","text":"<p>The ACME CSE supports the same authentication methods for the WebSocket binding as for the HTTP binding. To enable basic or token authentication for the WebSocket binding, you have to set the [websocket.security].enableBasicAuth or [websocket.security].enableTokenAuth configuration parameter in the acme.ini configuration file to True .</p> <p>The configuration parameters are the same as for the HTTP binding. See HTTP Authentication for further details on how to configure the authentication files.</p>"},{"location":"setup/Configuration-basic/","title":"Configuration - Basic Settings","text":"<p>The CSE is configured using the configuration file <code>acme.ini</code>. This file contains all necessary settings for the CSE to run.  These settings are used throughout the configuration settings using interpolation.</p> <p>When creating the configuration file, it is recommended to use the interactive procedure to generate a file with basic configuration settings. <sup>1</sup></p>"},{"location":"setup/Configuration-basic/#basic-configuration","title":"Basic Configuration","text":"<p>Section: <code>[basic.config]</code></p> <p>These are the general settings for the CSE. Some settings are mandatory, others are optional. This depends on the type of CSE to run.</p> <p>These basic settings are used in the default configuration file and  can be set by using the interactive procedure or by editing the configuration file directly.</p> Setting Description Optional Default cseType The type of CSE to run.Allowed values: <code>IN</code>, <code>MN</code>, <code>ASN</code> No cseID The CSE-ID of the CSE. This is a unique identifier for the CSE.This ID provided here must not start with <code>/</code> and must not contain a further <code>/</code> or white space. No serviceProviderID The ID of the service provider for the CSE.This is a unique identifier for the service provider.This ID provided here must not start with <code>//</code> and must not contain a further <code>/</code> or white space. yes acme.example.com cseName The resource name of the CSE. No adminID The ID for the CSE's admin originator. No networkInterface The network interface to use. Yes 0.0.0.0 cseHost The IP address of the CSE. No httpPort The port for the HTTP server. No registrarCseID The CSE-ID of the registrar CSE.This setting is mandatory for cseType = MN and ASN. No<sup>2</sup> registrarCseName The name of the registrar CSE.This setting is mandatory for cseType = MN and ASN. No<sup>2</sup> registrarCseHost The IP address of the registrar CSE.This setting is mandatory for cseType = MN and ASN.. Yes ${hostIPAddress} registrarCsePort The port of the registrar CSE.This setting is mandatory for cseType = MN and ASN. No<sup>2</sup> databaseType The type of database to use.Allowed values: <code>memory</code>, <code>tinydb</code>, <code>postgresql</code> No logLevel The log level for the CSE.Allowed values: <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code>, <code>off</code> Yes debug consoleTheme The theme for the console and text UI.Allowed values: <code>light</code>, <code>dark</code> Yes dark secret The secret for the CSE.This is used for seeding hash functions and encryption.The default value is 'acme'. Yes acme <p>In addition to the settings in this table, the built-in configuration settings  and environment variables can be used in the configuration.</p> <ol> <li> <p>You can add further configurations if necessary by copying sections and settings from acme.ini.default.\u00a0\u21a9</p> </li> <li> <p>This setting is mandatory for cseType = MN and ASN, and it is not required for cseType = IN.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"setup/Configuration-coap/","title":"Configuration - CoAP Binding Settings","text":"<p>The CSE supports CoAP communication via the CoAP binding. The CoAP binding is disabled by default and must be enabled in the configuration file under <code>[coap].enable</code> .</p>"},{"location":"setup/Configuration-coap/#general-settings","title":"General Settings","text":"<p>Section: <code>[coap]</code></p> <p>These are the general CoAP client settings.</p> Setting Description Default enable Enable the CoAP binding. False port Set the listening port for the CoAP server. 5683 listenIF Interface to listen to. Use 0.0.0.0 for \"all\" interfaces. ${basic.config:networkInterface} timeout Timeout when sending CoAP requests and waiting for responses. 10.0 seconds clientConnectionCacheSize The maximum number of client connections that can be cached. When the limit is reached, the oldest connection is closed and removed from the cache. A value of 0 means no caching. 100 address Own address. Should be a local/public reachable address. coap://${basic.config:cseHost}:${port}"},{"location":"setup/Configuration-coap/#security","title":"Security","text":"<p>Section: <code>[coap.security]</code></p> <p>These are the security settings for the CoAP binding.</p> <p>Attention</p> <p>Security for the CoAP binding is currently not implemented. The settings are reserved for future use.</p> Setting Description Default useTLS Enable TLS for CoAP communications. False dtlsVersion TLS version to be used in connections. Allowed versions: <code>TLS1.1</code>, <code>TLS1.2</code>, <code>auto</code> . Use <code>auto</code> to allow client-server certificate version negotiation. auto verifyCertificate Verify certificates in requests. Set to False when using self-signed certificates. False caCertificateFile Path and filename of the certificate file. empty string caPrivateKeyFile Path and filename of the private key file. empty string"},{"location":"setup/Configuration-cse/","title":"Configuration - CSE Settings","text":"<p>The CSE settings are used to configure the CSE's general behavior, security settings, and statistics collection. </p>"},{"location":"setup/Configuration-cse/#general-settings","title":"General Settings","text":"<p>Section: <code>[cse]</code></p> <p>These settings are used to configure basic settings and the general behavior of the CSE.</p> Setting Description Default asyncSubscriptionNotifications Enable or disable asynchronous notification for normal runtime subscription notifications. True checkExpirationsInterval Interval to check for expired resources. 0 means \"no checking\". 60 seconds cseID The CSE ID.A CSE-ID must start with a <code>/</code>, and must not contain a further <code>/</code> or white space. /${basic.config:cseID} defaultSerialization Indicate the serialization format if none was given in a request and cannot be determined otherwise.Allowed values: json, cbor. json enableRemoteCSE Enable remote CSE registration and checking.See also command line arguments \u2013-remote-cse and -\u2013no-remote-cse. True enableResourceExpiration Enable resource expiration. If disabled resources will not be expired when the \"expirationTimestamp\" is reached. True enableSubscriptionVerificationRequests Enable or disable verification requests when creating a new subscription. True flexBlockingPreference Indicate the preference for flexBlocking response types. Allowed values: \"blocking\", \"nonblocking\". blocking idLength This setting specifies the length of resource IDs generated by the CSE.This value can be increased or decreased as needed. A greater length increases the uniqueness of the resource ID, but also increases its size. This could be be relevant for the overall size of requests and responses. 10 maxExpirationDelta Default and maximum expirationTime allowed for resources in seconds. 60*60*24*365*5 = 157680000 seconds = 5 years originator Admin originator for the CSE. CAdmin poa Set the CSE's point-of-access. This is a comma-separated list of URLs. The configured HTTP server's address. releaseVersion The release version indicator for requests. Allowed values: see setting of supportedReleaseVersions. 5 requestExpirationDelta Expiration time for requests sent by the CSE in seconds. 10.0 seconds resourceID The \\ resource's resource ID. This should be the same value as cseID without the leading <code>/</code>. id-in resourceName The CSE's resource name or CSE-Name. ${basic.config:cseName} resourcesPath Directory of the CSE's init directory that hosts resources, policies, and other settings to import.See also command line argument \u2013-init-directory. ${basic.config:initDirectory} sendToFromInResponses Indicate whether the optional \"to\" and \"from\" parameters shall be sent in responses. True serviceProviderID The CSE's service provider ID.It must start with <code>//</code>, and must not contain a further <code>/</code> or white space. ///${basic.config:serviceProviderID} sortDiscoveredResources Enable alphabetical sorting of discovery results. True supportedReleaseVersions A comma-separated list of supported release versions. This list can contain a single or multiple values. 2a,3,4,5 type The CSE type. Allowed values: IN, MN, ASN. ${basic.config:cseType}"},{"location":"setup/Configuration-cse/#operation-jobs","title":"Operation - Jobs","text":"<p>Section: <code>[cse.operation.jobs]</code></p> <p>These settings are used to configure the CSE's job and thread management. Jobs are used to handle asynchronous tasks like resource expiration, resource announcements, and other tasks.</p> Setting Description Default balanceTarget Thread Pool Management: Target balance between paused and running jobs (n paused for 1 running threads). 3.0 balanceLatency Thread Pool Management: Number of get / create requests for a new thread before performing a balance check. A latency of 0 disables the thread pool balancing. 1000 balanceReduceFactor Thread Pool Management: The factor to reduce the paused jobs (number of paused / balanceReduceFactor) in a balance check.Example: a factor of 2.0 reduces the number of paused threads by half in a single balance check. 2.0"},{"location":"setup/Configuration-cse/#operation-requests","title":"Operation - Requests","text":"<p>Section: <code>[cse.operation.requests]</code></p> <p>These settings are used to configure the CSE's internal request recording.</p> Setting Description Default enable Enable request recording. False size Maximum number of requests to be stored. Oldest requests will be deleted when this threshold is reached. Note, that a large number of requests might take a moment to be displayed in the console or UIs. 250"},{"location":"setup/Configuration-cse/#general-security","title":"General Security","text":"<p>Section: <code>[cse.security]</code></p> <p>These settings are used to configure the CSE's security settings.</p> Setting Description Default secret The main secret key used for seeding hash functions and encryption. ${basic.config:secret} enableACPChecks Enable access control checks. True fullAccessAdmin Always grant the admin originator full access (bypass access checks). True"},{"location":"setup/Configuration-cse/#statistics","title":"Statistics","text":"<p>Section: <code>[cse.statistics]</code></p> <p>These settings are used to configure the CSE's internal statistics collection and reporting.</p> Setting Description Default enable This setting enables or disables the CSE's statistics collection and reporting. True writeInterval This setting specifies the pause, in seconds, between writing the collected statistics to the database. 60 seconds"},{"location":"setup/Configuration-cse/#registration-configurarions","title":"Registration Configurarions","text":""},{"location":"setup/Configuration-cse/#cse-registration","title":"CSE Registration","text":"<p>Section: <code>[cse.registration]</code></p> <p>These settings are used to configure the CSE's internal registration behaviour, but also set the allowed originators for AE and CSR registrations.</p> Setting Description Default allowedAEOriginators List of AE originators that can register. This is a comma-separated list of originators. Wildcards (* and ?) are supported. C*, S* allowedCSROriginators List of CSR originators that can register. This is a comma-separated list of originators. Wildcards (* and ?) are supported.Note: CSE-IDs must be in absolute or SP-relative form. empty list checkLiveliness Check the liveliness of the registrations to the registrar CSE and also from the registree CSEs. True checkInterval This setting specifies the pause in seconds between tries to connect to the configured registrar CSE. This value is also used to check the connectivity to the registrar CSE after a successful registration. 60 seconds"},{"location":"setup/Configuration-cse/#registrar-cse-access","title":"Registrar CSE Access","text":"<p>Section: <code>[cse.registrar]</code></p> <p>These settings are used to configure the address, access and general behavior to a Registrar CSE.</p> Setting Description Default address URL of the Registrar CSE. http://${basic.config:registrarCseHost}:${basic.config:registrarCsePort} root Registrar CSE root path. Never provide a trailing <code>/</code>. empty string cseID CSE-ID of the Registrar CSE.A CSE-ID must start with a <code>/</code>, and must not contain a further <code>/</code> or white space. /${basic.config:registrarCseID} resourceName The Registrar CSE's resource name. ${basic.config:registrarCseName} INCSEcseID The CSE-ID of the Infrastructure CSE at the top of the deployment tree. /id-in serialization Specify the serialization type that must be used for the registration to the registrar CSE.Allowed values: json, cbor json excludeCSRAttributes Comma separated list of attributes that are excluded when creating a registrar CSR. empty list originator The originator used for the registration to the registrar CSE. The CSE's CSE ID"},{"location":"setup/Configuration-cse/#registrar-cse-security-settings","title":"Registrar CSE Security Settings","text":"<p>Section: <code>[cse.registrar.security]</code></p> Setting Description Default httpUsername The username used for the Registrar CSE authentication via http if basic authentication is enabled for the Registrar CSE. empty string httpPassword The password used for the Registrar CSE authentication via http if basic authentication is enabled for the Registrar CSE. empty string httpBearerToken The authentication token used for the Registrar CSE authentication via http if bearer token authentication is enabled for the Registrar CSE. empty string wsUsername The username used for the Registrar CSE authentication via WebSocket if basic authentication is enabled for the Registrar CSE. empty string wsPassword The password used for the Registrar CSE authentication via WebSocket if basic authentication is enabled for the Registrar CSE. empty string wsBearerToken The authentication token used for the Registrar CSE authentication via WebSocket if bearer token authentication is enabled for the Registrar CSE. empty string selfHttpUsername The own CSE's username used for the Registrar CSE authentication via http if basic authentication is enabled for the Registrar CSE. empty string selfHttpPassword The own CSE's password used for the Registrar CSE authentication via http if basic authentication is enabled for the Registrar CSE. empty string selfWsUsername The own CSE's username used for the Registrar CSE authentication via WebSocket if basic authentication is enabled for the Registrar CSE. empty string selfWsPassword The own CSE's password used for the Registrar CSE authentication via WebSocket if basic authentication is enabled for the Registrar CSE. empty string"},{"location":"setup/Configuration-cse/#service-provider-registrations","title":"Service Provider Registrations","text":"<p>Section: <code>[cse.sp.registrar.{SP Name}]</code></p> <p>These settings are used to configure the behavior when registering to another service provider's Infrastructure CSE.  If one wants to register to more than one service provider, one must create a separate section for each service provider  with a name or identifier for the service provider as part of the section name.</p> <p>The section name has a fixed prefix of <code>cse.sp.registrar.</code> followed by a unique identifier for that particular service provider registration. This identifier is also used in the optional security settings section for that service provider registration.</p> Setting Description Default spID The oneM2M Service Provider ID (SP-ID) of the service provider to regiser to.It must start with <code>//</code>, and must not contain a further <code>/</code> or white space. none address URL of the other service provider's IN-CSE. none root The service provider's IN-CSE root path. Never provide a trailing <code>/</code>. empty string cseID CSE-ID of the service provider's IN-CSE.A CSE-ID must start with a <code>/</code>, and must not contain a further <code>/</code> or white space. no default excludeCSRAttributes Comma separated list of attributes that are excluded when creating a registrar CSR. empty list resourceName The service provider's IN-CSE's resource name. no default INCSEcseID The CSE-ID of the Infrastructure CSE at the top of the deployment tree. /id-in serialization Specify the serialization type that must be used for the registration to the service provider's IN-CSE.Allowed values: json, cbor json originator The originator used for the registration to the service provider's IN-CSE. The CSE's CSE ID"},{"location":"setup/Configuration-cse/#service-provider-security-settings","title":"Service Provider Security Settings","text":"<p>Section: <code>[cse.sp.registrar.security.{SP Name}]</code></p> <p>These settings are used to configure the security settings when registering to another service provider's Infrastructure CSE.  If one wants to register to more than one service provider, one must create a separate section for each service provider with a name or identifier for the service provider as part of the section name.</p> <p>The section name must match the section name of the service provider's registration settings, i.e.</p> Example of a service provider's registration section, including security settings<pre><code>[cse.sp.registrar.MySP]\n...\n\n[cse.sp.registrar.security.MySP]\n... \n</code></pre> Setting Description Default httpUsername The username used for the service provider's IN-CSE authentication via http if basic authentication is enabled for the service provider's IN-CSE. empty string httpPassword The password used for the service provider's IN-CSE authentication via http if basic authentication is enabled for the service provider's IN-CSE. empty string httpBearerToken The authentication token used for the service provider's IN-CSE authentication via http if bearer token authentication is enabled for the service provider's IN-CSE. empty string wsUsername The username used for the service provider's IN-CSE authentication via WebSocket if basic authentication is enabled for the Registrar CSE. empty string wsPassword The password used for the service provider's IN-CSE authentication via WebSocket if basic authentication is enabled for the Registrar CSE. empty string wsBearerToken The authentication token used for the service provider's IN-CSE authentication via WebSocket if bearer token authentication is enabled for the service provider's IN-CSE. empty string selfHttpUsername The own CSE's username used for the service provider's IN-CSE authentication via http if basic authentication is enabled for the service provider's IN-CSE. empty string selfHttpPassword The own CSE's password used for the service provider's IN-CSE authentication via http if basic authentication is enabled for the service provider's IN-CSE. empty string selfWsUsername The own CSE's username used for the service provider's IN-CSE authentication via WebSocket if basic authentication is enabled for the service provider's IN-CSE. empty string selfWsPassword The own CSE's password used for the service provider's IN-CSE authentication via WebSocket if basic authentication is enabled for the service provider's IN-CSE. empty string"},{"location":"setup/Configuration-cse/#resource-announcements","title":"Resource Announcements","text":"<p>Section: <code>[cse.announcements]</code></p> <p>These settings are used to configure the behavior of resource announcements. They control mainly internal CSE behaviour and are not directly related to the oneM2M standard.</p> Setting Description Default checkInterval Wait n seconds between tries to announce resources to registered remote CSE. 10 seconds allowAnnouncementsToHostingCSE Allow resource announcements to the own hosting CSE. True delayAfterRegistration Specify a short delay in seconds before starting announcing resources after a remote CSE has registered at the hosting CSE. 3 seconds"},{"location":"setup/Configuration-database/","title":"Configuration - Database Settings","text":"<p>The CSE supports different types of databases. The database settings are configured in the configuration file under the section <code>[database]</code> and its subsections.</p>"},{"location":"setup/Configuration-database/#general-settings","title":"General Settings","text":"<p>Section: <code>[database]</code></p> <p>These are the general database settings.</p> Setting Description Default backupPath The directory for a backup of the database files.Database backups are not supported for the in-memory database and postgreSQL. ${basic.config:baseDirectory}/data/backup resetOnStartup Reset the databases at startup.See also command line argument --db-reset. False type The type of database to use.See also command line argument --db-type.Allowed values: tinydb, postgresql, memory tinydb"},{"location":"setup/Configuration-database/#tinydb","title":"TinyDB","text":"<p>Section: <code>[database.tinydb]</code></p> <p>These are the settings for the TinyDB database. The cacheSize and writeDelay settings are only used if the database type is set to tinydb (ie. in file-based mode). They have a major impact on the performance of the database.</p> Setting Description Default cacheSize Cache size in bytes, or 0 to disable caching. 0 path Directory for the database files. ${basic.config:baseDirectory}/data writeDelay Delay in seconds before new data is written to disk to avoid trashing. Must be full seconds. 1 second"},{"location":"setup/Configuration-database/#postgresql","title":"PostgreSQL","text":"<p>Section: <code>[database.postgresql]</code></p> <p>These are the settings for the PostgreSQL database. </p> Setting Description Default database Name of the database. ${basic.config:cseID} host Hostname of the PostgreSQL server. localhost password Password for the database. not set port Port of the PostgreSQL server. 5432 schema Name of the schema.Default: acmecse acmecse role Login/Username for the database. ${basic.config:cseID}"},{"location":"setup/Configuration-http/","title":"Configuration - HTTP Binding Settings","text":"<p>The CSE supports HTTP binding for communication with clients and other CSEs. The HTTP binding is always enabled and its settings are configured in the configuration file under the section <code>[http]</code> and its subsections.</p>"},{"location":"setup/Configuration-http/#general-settings","title":"General Settings","text":"<p>Section: <code>[http]</code></p> <p>These are the general settings for the HTTP binding.</p> Setting Description Default port Port to listen to. ${basic.config:httpPort} listenIF Interface to listen to. Use 0.0.0.0 for \"all\" interfaces. ${basic.config:networkInterface} address Own address. Should be a local/public reachable address. http://${basic.config:cseHost}:${basic.config:httpPort} root CSE Server root. Never provide a trailing <code>/</code>. empty string enableManagementEndpoint Enable the management interface for the CSE. This allows to manage the CSE and retrieve information about its operation via HTTP requests.ATTENTION: Enabling this feature may expose sensitive information. It may also lead to a total loss of data.See also CSE Management. False enableStructureEndpoint Enable an endpoint for getting a structured overview about a CSE's resource tree and deployment infrastructure (remote CSE's).ATTENTION: Enabling this feature exposes various potentially sensitive information.See also the [console].hideResources setting to hide resources from the tree.See also Infrastructure Diagrams. False enableUpperTesterEndpoint Enable an endpoint for supporting Upper Tester commands to the CSE. This is to support certain testing and certification systems. See oneM2M's TS-0019 for further details.ATTENTION: Enabling this feature may lead to a total loss of data.See also Upper Tester Support for more information. False allowPatchForDelete Allow the http PATCH method to be used as a replacement for the DELETE method. This is useful for constraint devices that only support http/1.0, which doesn't specify the DELETE method.ATTENTION: This is an enhanced feature of the ACME CSE, and not part of the oneM2M HTTP protocol binding specification. False timeout Timeout when sending http requests and waiting for responses. 10 seconds"},{"location":"setup/Configuration-http/#security","title":"Security","text":"<p>Section: <code>[http.security]</code></p> <p>These are the security settings for the HTTP binding.</p> <p>See also</p> <p>HTTP Authentication</p> Setting Description Default useTLS Enable TLS for communications.This can be overridden by the command line arguments --http and --https.See oneM2M TS-0003 Clause 8.2.1 \"Overview on Security Association Establishment Frameworks\". False tlsVersion TLS version to be used in connections. Allowed versions: <code>TLS1.1</code>, <code>TLS1.2</code>, <code>auto</code> . Use <code>auto</code> to allow client-server certificate version negotiation. auto verifyCertificate Verify certificates in requests. Set to False when using self-signed certificates. False caCertificateFile Path and filename of the certificate file. empty string caPrivateKeyFile Path and filename of the private key file. empty string enableBasicAuth Enable basic authentication for the HTTP binding. See HTTP Basic Authentication. False enableTokenAuth Enable token authentication for the HTTP binding. See HTTP Token Authentication. False basicAuthFile Path and filename of the http basic authentication file.The file must contain lines in the format \"username:hashed-password\". Lines starting with a # character are treated as comments. The passwords are stored in hashed form (see Hashing Credentials). ${basic.config:baseDirectory}/certs/http_basic_auth.txt tokenAuthFile Path and filename of the http bearer token authentication file.The file must contain lines in the format \"hashed-token\". Lines starting with a # character are treated as comments. The tokens are stored in hashed form (see Hashing Credentials) ${basic.config:baseDirectory}/certs/http_token_auth.txt"},{"location":"setup/Configuration-http/#cors","title":"CORS","text":"<p>Section: <code>[http.cors]</code></p> <p>These are the CORS (Cross-Origin Resource Sharing) settings for the HTTP binding.</p> Setting Description Default enable Enable CORS support for the HTTP binding. False resources A comma separated list of allowed resource paths. The list elements could be regular expressions. \"/*\" , ie. all resources under the HTTP server's root."},{"location":"setup/Configuration-http/#wsgi","title":"WSGI","text":"<p>Section: <code>[http.wsgi]</code></p> <p>These are the settings for the WSGI (Web Server Gateway Interface) support.</p> Setting Description Default enable Enable WSGI support for the HTTP binding. False threadPoolSize The number of threads used to process requests. This number should be of similar size as the connectionLimit setting. 100 connectionLimit The number of possible parallel connections that can be accepted by the WSGI server. Note: One connection uses one system file descriptor. 100"},{"location":"setup/Configuration-introduction/","title":"Configuration - Introduction","text":"<p>The CSE is highly configurable and can be adapted to different environments and requirements. This article describes the configuration settings and how to change them.</p>"},{"location":"setup/Configuration-introduction/#introduction","title":"Introduction","text":"<p>Configuration of CSE parameters is primarily done through a configuration file. This file contains all configurable and customizable settings for the CSE. Configurations are mostly optional, and settings in this file overwrite the CSE's default values.</p> <p>The configuration file follows the Windows INI file format with sections, setting and values. A configuration file may include comments, prefixed with the characters <code>#</code> or <code>;</code> .</p>"},{"location":"setup/Configuration-introduction/#command-line-arguments","title":"Command Line Arguments","text":"<p>Also, some settings can be applied via the command line when starting the CSE. These command line arguments overwrite the settings in the configuration file.</p>"},{"location":"setup/Configuration-introduction/#the-acmeini-configuration-file","title":"The acme.ini Configuration File","text":"<p>Warning</p> <p>Changes should only be done to a copy of the default configuration file.</p> <p>A default configuration is provided with the file acme.ini.default. The settings in this file are the default values for the CSE and can be overwritten by local configuration file. Don't make changes to the default configuration file, but rather copy relevant configuration setting to a new file named, for example, acme.ini, which is the default configuration file name. You can use another filename, but must then specify it with the <code>--config</code> command line argument when running the (see Running the CSE).</p> <p>It is sufficient to only add the settings to the configuration file that are different from the default settings. All other settings are read from the default config file acme.ini.default.</p> <p> </p> Figure 1: Steps when reading a configuration from the acme.ini file <p>If the configuration file acme.ini could not be found at the specified location then an interactive procedure is started to generate a file with basic configuration settings. You can add further configurations if necessary by copying sections and settings from acme.ini.default.</p> <p>Info</p> <p>It is highly recommended to use this interactive procedure to create the configuration file. This ensures that all necessary settings are present and that the file is correctly formatted.</p>"},{"location":"setup/Configuration-introduction/#using-apache-zookeeper-for-configuration","title":"Using Apache Zookeeper for Configuration","text":"<p>The CSE can also be configured using Apache Zookeeper. This allows for a more dynamic configuration and is especially useful in distributed environments. The configuration settings are stored in Zookeeper and can be accessed by the CSE at runtime.</p> <p> </p> Figure 2: Steps when reading a configuration from Apache Zookeeper <p>In this case, a local configuration file (e.g. acme.ini) is not used, and the CSE is started with the command line arguments --config-zk-host and --config-zk-root to specify the Zookeeper server and the root configuration node. The CSE will then read the configuration settings from Zookeeper. </p> <p>Info</p> <p>Similar to using the acme.ini configuration file, it is sufficient to only add the settings to the Zookeeper configuration that are different from the default settings. All other settings are read from the default config file acme.ini.default.</p> <p>One can create a Zookeeper-based configuration using the Zookeeper Tool. First, create a configuration file using either the onboarding tool or do it manually. Then, use the Zookeeper Tool to upload the configuration to Zookeeper. The Zookeeper Tool will create the necessary nodes and set the configuration settings in Zookeeper.</p> <p>Info</p> <p>Zookeeper-based configurations are stored in a hierarchical structure. The root node of this structure must be unique for each CSE and is specified with the <code>--config-zk-root</code> command line argument. It is recommended to use the CSE-ID as the root node name, e.g. <code>/cse/cseID</code>.</p>"},{"location":"setup/Configuration-introduction/#example-starting-the-cse-with-zookeeper-configuration","title":"Example: Starting the CSE with Zookeeper Configuration","text":"<p>The following command starts the CSE with a Zookeeper configuration using the host <code>localhost</code> and the root node <code>id-in</code>. The default Zookeeper port <code>2181</code> is used implicitly.</p> Starting the CSE with Zookeeper configuration<pre><code>acmecse --config-zk-host localhost --config-zk-root id-in\n</code></pre>"},{"location":"setup/Configuration-introduction/#settings-interpolation","title":"Settings Interpolation","text":"<p>In addition to assigning individual or fixed values for configurations settings you can use settings interpolation which allows you to reference settings from the same or from other sections. The syntax to denote a value from a section is <code>${section:option}</code>.</p>"},{"location":"setup/Configuration-introduction/#built-in-settings","title":"Built-in Settings","text":"<p>There are some built-in configuration settings that can be used in the configuration file. These settings are provided by the CSE and can be used to reference directories or other values.</p> ${basic.config:baseDirectory} ${baseDirectory} Two built-in configuration settings that point to the base-directory of the CSE's data directory. These settings contain  either the current working directory or the directory that is specified with the command line argument <code>--base-directory</code> or <code>-dir</code>. Both settings are equivalent and can be used interchangeably. ${configfile} Configuration setting that contains the name of the configuration file in the baseDirectory. ${hostIPAddress} Built-in configuration setting that contains the current IP address of the CSE host. ${basic.config:initDirectory} ${initDirectory} <p>Two built-in configuration settings that point to acme's main init directory. Both settings are equivalent and can be used interchangeably.</p> Use built-in settings<pre><code>[cse]\nresourcesPath=${basic.config:initDirectory}\n</code></pre> ${basic.config:moduleDirectory} ${moduleDirectory} Two built-in configuration settings that point to acme's module directory. Both settings are equivalent and can be used interchangeably. ${secret} Built-in configuration setting that contains the main secret key for the CSE. This key is used, for example, to seed passwords for hashing. The default for this setting is <code>acme</code>, and it is highly recommended to change it to a unique value. It is also possible to use the environment variable ACME_SECURITY_SECRET to set this value."},{"location":"setup/Configuration-introduction/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables in the configuration file. The syntax to get their values is also <code>${ENVIRONMEMNT_VARIABLE_NAME}</code>.</p> <p>Environment variables can be used in the configuration file to provide sensitive information like passwords or API keys, or to provide a more flexible way to set configuration settings.</p>"},{"location":"setup/Configuration-introduction/#hiding-sensitive-information","title":"Hiding Sensitive Information","text":"<p>Sensitive information like passwords or API keys should not be stored in the configuration file in plain text. Instead, you can use environment variables to store this information and reference them in the configuration file.</p> <p>The following environment variables are supported by default for configurations and don't need to be defined separately in the configuration file:</p> Environment Variable Description Configuration Setting ACME_SECURITY_SECRET The main secret key for the CSE. This key is used, for example, so seed passwords for hashing. [cse.security].secret ACME_DATABASE_POSTGRESQL_PASSWORD Password to authenticate with the PostgreSQL database [database.postgresql].password ACME_MQTT_SECURITY_PASSWORD Password to authenticate with the MQTT broker [mqtt.security].password ACME_MQTT_SECURITY_USERNAME Username to authenticate with the MQTT broker [mqtt.security].username ACME_CSE_REGISTRAR_SECURITY_HTTPUSERNAME Username for HTTP Basic Authentication with the registrar CSE [cse.registrar.security].httpUsername ACME_CSE_REGISTRAR_SECURITY_HTTPPASSWORD Password for HTTP Basic Authentication with the registrar CSE [cse.registrar.security].httpPassword ACME_CSE_REGISTRAR_SECURITY_HTTPBEARERTOKEN Bearer token for HTTP Bearer Token Authentication with the registrar CSE [cse.registrar.security].httpBearerToken ACME_CSE_REGISTRAR_SECURITY_WSUSERNAME Username for WebSocket Basic Authentication with the registrar CSE [cse.registrar.security].wsUsername ACME_CSE_REGISTRAR_SECURITY_WSPASSWORD Password for WebSocket Basic Authentication with the registrar CSE [cse.registrar.security].wsPassword ACME_CSE_REGISTRAR_SECURITY_WSBEARERTOKEN Bearer token for WebSocket Bearer Token Authentication with the registrar CSE [cse.registrar.security].wsBearerToken ACME_CSE_REGISTRAR_SECURITY_SELFHTTPUSERNAME The CSE's own wsername for HTTP Basic Authentication with the CSE by a registrar CSE.See also Authentication Between CSEs [cse.security].httpUsername ACME_CSE_REGISTRAR_SECURITY_SELFHTTPPASSWORD The CSE's own password for HTTP Basic Authentication with the CSE by a registrar CSE.See also Authentication Between CSEs [cse.security].httpPassword ACME_CSE_REGISTRAR_SECURITY_SELFWSUSERNAME The CSE's own username for WebSocket Basic Authentication with the CSE by a registrar CSE.See also Authentication Between CSEs [cse.security].wsUsername ACME_CSE_REGISTRAR_SECURITY_SELFWSPASSWORD The CSE's own password for WebSocket Basic Authentication with the CSE by a registrar CSE.See also Authentication Between CSEs [cse.security].wsPassword"},{"location":"setup/Configuration-introduction/#docker-host-ip","title":"Docker Host IP","text":"<p>Another useful application is to provide the IP address of a Docker host to the CSE. This can be done, for example, by setting the environment variable <code>DOCKER_HOST_IP</code> and using it in the configuration file.</p> Use Environment Variable to set the Host IP<pre><code>[basic.config]\ncseHost=${DOCKER_HOST_IP}\n</code></pre>"},{"location":"setup/Configuration-introduction/#dot-notation","title":"Dot Notation","text":"<p>Configuration settings can be accessed and updated from scripts, for example with the get-config function. For this, the section and setting names are concatenated using dot notation. The full section name is followed by a dot and then the setting name.</p> <p>For example:</p> <ul> <li>The cseID setting in the [cse] section may be accessed by the name <code>cse.cseID</code></li> <li>The host setting in the [database.postgresql] section may be accessed by the name <code>database.postgresql.host</code></li> </ul>"},{"location":"setup/Configuration-logging/","title":"Configuration - Logging","text":"<p>The CSE supports logging to the screen and to a file. </p> <p>By default, logging to the screen is enabled and logging to a file is disabled. If logging to a file is enabled, the log files are rotated when they reach a certain size or number of files. </p>"},{"location":"setup/Configuration-logging/#general-settings","title":"General Settings","text":"<p>Section: <code>[logging]</code></p> <p>These are the general logging settings.</p> Setting Description Default count Number of files for log rotation. 10 enableBindingsLogging Enable logging of low-level HTTP &amp; MQTT client events. False enableFileLogging Enable logging to file. false enableScreenLogging Enable logging to the screen. true enableUTCTimezone Enable UTC timezone for screen and file logging. If disabled then the local time is used. False filter List of component names to exclude from logging. werkzeug,markdown_it,asyncio level Loglevel. Allowed values: <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code>, <code>off</code>.See also command line argument \u2013log-level. debug maxLogMessageLength Maximum length of a log message. Longer messages will be truncated. A value of 0 means no truncation. 1000 characters path Pathname for log files. ${basic.config:baseDirectory}/logs queueSize Number of log entries that can be added to the asynchronous queue before blocking. A queue size of 0 means disabling the queue. 5000 entries size Size per log file. 100.000 bytes stackTraceOnError Print a stack trace when logging an 'error' level message. True"},{"location":"setup/Configuration-mqtt/","title":"Configuration - MQTT Binding Settings","text":"<p>The CSE supports MQTT communication via the MQTT binding. The MQTT binding is disabled by default and must be enabled in the configuration file under <code>[mqtt].enable</code> .</p>"},{"location":"setup/Configuration-mqtt/#general-settings","title":"General Settings","text":"<p>Section: <code>[mqtt]</code></p> <p>These are the general MQTT client settings.</p> Setting Description Default enable Enable the MQTT binding. False address The hostname of the MQTT broker. 127.0.0.1 port Set the port for the MQTT broker. 1883, or 8883 for TLS listenIF Interface to listen to. Use 0.0.0.0 for \"all\" interfaces. 0.0.0.0 keepalive Value for the MQTT connection's keep-alive parameter in seconds. 60 seconds topicPrefix Optional prefix for topics. empty string timeout Timeout when sending MQTT requests and waiting for responses. 10.0 seconds"},{"location":"setup/Configuration-mqtt/#security","title":"Security","text":"<p>Section: <code>[mqtt.security]</code></p> <p>These are the security settings for the MQTT binding.</p> Setting Description Default useTLS Enable TLS for communications with the MQTT broker. False username The username for MQTT broker authentication if required by the broker. empty string password The password for MQTT broker authentication. empty string verifyCertificate Verify certificates in requests. Set to False when using self-signed certificates. False caCertificateFile Path and filename of the certificate file. empty string allowedCredentialIDs List of credential-IDs that can be used to register an AE via MQTT. If this list is empty then all credential IDs are allowed.This is a comma-separated list. Wildcards (* and ?) are supported. empty list"},{"location":"setup/Configuration-resources/","title":"Configuration - oneM2M Resources","text":"<p>The configuration file contains settings for the default values or configurable behaviour of oneM2M resources. These settings are used when creating resources and, if allowed, can be overridden by the values in the request.</p>"},{"location":"setup/Configuration-resources/#acp","title":"ACP","text":"<p>Section: <code>[resource.acp]</code></p> <p>The default values for Access Control Policies (ACP) resources.</p> Setting Description Default selfPermission Default selfPermission when creating an ACP resource. This is the decimal representation of the permissions bitfield. 51"},{"location":"setup/Configuration-resources/#action","title":"Action","text":"<p>Section: <code>[resource.actr]</code></p> <p>The default values for Action resources.</p> Setting Description Default ecpContinuous Default for the evalControlParam attribute, when the evalMode is <code>continuous</code>. The unit is number. 1.000 ecpPeriodic Default for the evalControlParam attribute, when the evalMode is <code>periodic</code>. The unit is milliseconds. 10.000 ms = 10 seconds"},{"location":"setup/Configuration-resources/#container","title":"Container","text":"<p>Section: <code>[resource.cnt]</code></p> <p>The default values for Container resources.</p> Setting Description Default enableLimits Enable/disable the default limits. False mbs Default for maxByteSize. 10.000 bytes mia Default for maxInstanceAge. cse.maxExpirationDelta seconds mni Default for maxNrOfInstances. 10"},{"location":"setup/Configuration-resources/#flexcontainer","title":"FlexContainer","text":"<p>Section: <code>[resource.fcnt]</code></p> <p>The default values for FlexContainer resources.</p> Setting Description Default enableLimits Enable/disable the default limits. False mbs Default for maxByteSize. 10.000 bytes mia Default for maxInstanceAge. cse.maxExpirationDelta seconds mni Default for maxNrOfInstances. 10"},{"location":"setup/Configuration-resources/#group","title":"Group","text":"<p>Section: <code>[resource.grp]</code></p> <p>The default values for Group resources.</p> Setting Description Default resultExpirationTime Set the time for aggregating the results of a group request before interrupting. This is the CSE default and can be overwritten by a request. The format is the time in ms. A value of 0 ms means no timeout. 0 ms"},{"location":"setup/Configuration-resources/#locationpolicy","title":"LocationPolicy","text":"<p>Section: <code>[resource.lcp]</code></p> <p>The default values for the Container of a LocationPolicy resources.</p> Setting Description Default mni Default for maxNrOfInstances for the LocationPolicy's container. 10 mbs Default for maxByteSize for the LocationPolicy's container. 10.000 bytes"},{"location":"setup/Configuration-resources/#request","title":"Request","text":"<p>Section: <code>[resource.req]</code></p> <p>The default values for Request resources.</p> Setting Description Default expirationTime A &lt;request&gt; resource's  expiration time in seconds. Must be &gt;0. 60 seconds"},{"location":"setup/Configuration-resources/#subscription","title":"Subscription","text":"<p>Section: <code>[resource.sub]</code></p> <p>The default values for Subscription resources.</p> Setting Description Default batchNotifyDuration Default for the batchNotify/duration in seconds. Must be &gt;0. 60 sec"},{"location":"setup/Configuration-resources/#timeseries","title":"TimeSeries","text":"<p>Section: <code>[resource.ts]</code></p> <p>The default values for TimeSeries resources.</p> Setting Description Default enableLimits Enable/disable the default limits. False mbs Default for maxByteSize. 10.000 bytes mdn Default for missingDataMaxNr. 10 mia Default for maxInstanceAge. cse.maxExpirationDelta seconds mni Default for maxNrOfInstances. 10"},{"location":"setup/Configuration-resources/#timesyncbeacon","title":"TimeSyncBeacon","text":"<p>Section: <code>[resource.tsb]</code></p> <p>The default values for TimeSyncBeacon resources.</p> Setting Description Default bcni Default timeSyncBeacon interval. This is the duration between to beacon notifications sent by the CSE to an AE or CSE.T he format must be an ISO8601 duration. \"PT1H\" = 1 hour bcnt Default timeSyncBeacon threshold. When this time threshold is passed then a beacon notifications is sent to an AE or CSE. 10 seconds"},{"location":"setup/Configuration-scripting/","title":"Configuration - Scripting","text":"<p>The ACME CSE supports scripting using a Lisp-like scripting language. Scripts can be used to extend the functionality of the CSE, for example, to implement custom logic, writing small applications or to interact with external systems.</p>"},{"location":"setup/Configuration-scripting/#scripting","title":"Scripting","text":"<p>Section: <code>[scripting]</code></p> <p>These are the settings for the scripting engine.</p> Setting Description Default scriptDirectories Add one or multiple directory paths to look for scripts, in addition to the ones in the system or runtime <code>init</code> directory. Must be a comma-separated list. not set verbose Enable debug output during script execution, such as the current executed line. False fileMonitoringInterval Set the interval to check for new files in the script directories.0 means disable monitoring. Must be &gt;= 0.0. 2.0 seconds maxRuntime Set the timeout for script execution in seconds. 0.0 seconds means no timeout.Must be &gt;= 0.0. 60.0 seconds"},{"location":"setup/Configuration-uis/","title":"Configuration - User Interfaces","text":"<p>The CSE provides different user interfaces (UIs) to interact with the CSE. </p>"},{"location":"setup/Configuration-uis/#console","title":"Console","text":"<p>Section: <code>[console]</code></p> <p>These are the settings for the console.</p> Setting Description Default confirmQuit Quitting the console needs to be confirmed.This may not work under Windows, so it is switched off by default. False headless Run the CSE in headless mode, i.e. without a console and without screen logging. False hideResources Hide certain resources from display in the console. This is a list of resource identifiers. Wildcards are allowed. empty list refreshInterval Interval for continuously refreshing information displays.Must be &gt; 0.0. 2.0 seconds theme Set the color theme for the console. Allowed values are \"dark\" and \"light\". ${basic.config:consoleTheme} treeIncludeVirtualResources Show virtual resources in the console's and structure endpoint's tree view. False treeMode Set the mode how resources and their content are presented in the console's and structure endpoint's tree view.Allowed values: <code>normal</code>, <code>compact</code>, <code>content</code>, `contentOnly' normal"},{"location":"setup/Configuration-uis/#text-ui","title":"Text UI","text":"<p>Section: <code>[textui]</code></p> <p>These are the settings for the text UI.</p> Setting Description Default enableTextEditorSyntaxHighlighting Enable syntax highlighting in the resource text editor. This setting is only available when the package \"textual[syntax]\" is installed. False maxRequestSize Max size of a request or response in bytes to display. Requests or responses larger than this threshold will not be displayed. 10.000 notificationTimeout Timeout for text UI notifications in seconds. 2.0 refreshInterval Interval for refreshing various views in the text UI. 2.0 startWithTUI Show the text UI after startup.See also command line argument \u2013-textui. False theme Set the color theme for the text UI. Allowed values are <code>dark</code> and <code>light</code>. ${console:theme}"},{"location":"setup/Configuration-uis/#web-ui","title":"Web UI","text":"<p>Section: <code>[webui]</code></p> <p>These are the settings for the web UI.</p> Setting Description Default root Root path of the web UI. /webui"},{"location":"setup/Configuration-ws/","title":"Configuration - WebSocket Binding Settings","text":"<p>The CSE supports WebSocket communication via the WebSocket binding. The WebSocket binding is disabled by default and must be enabled in the configuration file under <code>[websocket].enable</code>.</p>"},{"location":"setup/Configuration-ws/#general-settings","title":"General Settings","text":"<p>Section: <code>[websocket]</code></p> <p>These are the general WebSocket settings.</p> Setting Description Default enable Enable the WebSocket binding. False port Set the port for the WebSocket server. 8180 listenIF Interface to listen to. Use 0.0.0.0 for \"all\" interfaces. ${basic.config:networkInterface} address Own address. Should be a local/public reachable address. ws://${basic.config:cseHost}:${port} loglevel Loglevel for the WebSocket server. Allowed values: <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code>, <code>off</code>. ${basic.config:logLevel} timeout Timeout when sending websocket requests and waiting for responses. ${cse:requestExpirationDelta}"},{"location":"setup/Configuration-ws/#security","title":"Security","text":"<p>Section: <code>[websocket.security]</code></p> <p>These are the security settings for the WebSocket binding.</p> <p>See also</p> <p>WebSocket Authentication</p> Setting Description Default useTLS Enable TLS for websocket communications. False tlsVersion TLS version to be used in connections. Allowed versions: <code>TLS1.1</code>, <code>TLS1.2</code>, <code>auto</code> . Use <code>auto</code> to allow client-server certificate version negotiation. auto verifyCertificate Verify certificates in requests. Set to False when using self-signed certificates. False caCertificateFile Path and filename of the certificate file. empty string caPrivateKeyFile Path and filename of the private key file. empty string enableBasicAuth Enable basic authentication for the WebSocket binding. False enableTokenAuth Enable token authentication for the WebSocket binding. False basicAuthFile Path and filename of the WebSocket basic authentication file.The file must contain lines in the format \"username:hashed-password\". Lines starting with a # character are treated as comments. The passwords are stored in hashed form (see Hashing Credentials). ${basic.config:baseDirectory}/certs/ws_basic_auth.txt tokenAuthFile Path and filename of the WebSocket bearer token authentication file.The file must contain lines in the format \"hashed-token\". Lines starting with a # character are treated as comments. The tokens are stored in hashed form (see Hashing Credentials) ${basic.config:baseDirectory}/certs/ws_token_auth.txt"},{"location":"setup/Console/","title":"Command Console","text":"<p>The CSE has a command console interface to show logging information, to execute build-in commands, to inspect resources, to show statistics, to plot graphs, and many more. The console is started automatically when the CSE is started. It can be accessed via the terminal where the CSE is running.</p>"},{"location":"setup/Console/#console-commands","title":"Console Commands","text":"<p>The following commands are available:</p> Key Description <code>=</code> Print a separator line to the log <code>A</code> About <code>c</code> Show configuration <code>C</code> Clear the console screen <code>D</code> Delete resource <code>E</code> Export resource tree to data directory <code>G</code>, <code>CTRL-G</code> Plot graph once / continously (only for container) <code>h</code>, <code>?</code> This help <code>I</code> Inspect resource and child resources <code>i</code>, <code>CTRL-K</code> Inspect resource once / continously <code>k</code>, Catalog of scripts <code>l</code> Toggle screen logging on/off <code>L</code> Toggle through log levels <code>Q</code>, <code>CTRL-C</code> Shutdown CSE <code>r</code> Show CSE registrations <code>s</code>, <code>CTRLS</code> Show statistics once / continously <code>t</code> Show resource tree <code>T</code>, <code>CTRL-T</code> Show child resource tree once / continously <code>u</code> Open web UI <code>w</code> Show workers and threads status <code>Z</code> Reset and restart the CSE <p>Example The CSE's resource tree can be shown by pressing the <code>t</code> key:</p> <p>,</p> ACME CSE's resource tree in the console <p>In addition to the build-in commands, the console shows the Script commands with a configured key binding.</p>"},{"location":"setup/Console/#exporting-resources","title":"Exporting Resources","text":"<p>With the console command <code>E</code> (export resource tree to data directory) one can export a resource and its child resources to the current data directory as a shell script. The shell script runs curl commands to create the resources in the same or another. It can be used to backup resources or to move resources from one CSE to another.</p> <p>Warning</p> <p>The exported shell script is not a backup of the CSE's database. It only contains the specified resources.</p> <p>The shell script does not contain any information about the CSE's configuration or the CSE's registrations at other CSEs.</p> <p>It is also possible that the shell script does not work for all resources, e.g. if referenced resources are missing or have other resource identifiers.</p>"},{"location":"setup/Console/#hiding-resources-in-the-consoles-tree","title":"Hiding Resources in the Console's Tree","text":"<p>Sometimes it could be useful in demonstrations if one would be able to hide resources from the console's resource tree. That can be accomplished by listing these resources in the setting [cse.console].hideResources.  Simple wildcards are allowed in this setting.</p> <p>Example to hide all resources with resource identifiers starting with 'acp':</p> Hide Resources<pre><code>[cse.console]\nhideResources=acp*\n</code></pre>"},{"location":"setup/Console/#supported-function-keys","title":"Supported Function Keys","text":"<p>The consoles and their emulations of different operating systems support different sets of function key bindings. The following table lists the names that can be used, e.g. in scripts.</p> POSIX (Linux, Mac OS)MS Windows Supported (Function) Keys Modifiers <code>A</code> - <code>Z</code> <code>CTRL</code>, <code>SHIFT</code> <code>F1</code> - <code>F12</code> <code>SHIFT</code> <code>UP</code>, <code>DOWN</code>, <code>LEFT</code>, <code>RIGHT</code>, <code>HOME</code>, <code>END</code> <code>SHIFT</code>, <code>CTRL</code>, <code>ALT</code>, <code>SHIFT_ALT</code>, <code>SHIFT_CTRL</code>, <code>SHIFT_CTRL_ALT</code> <code>PAGE_UP</code>, <code>PAGE_DOWN</code> <code>ALT</code> <code>INSERT</code>, <code>DEL</code>, <code>BACKSPACE</code>, <code>LF</code>, <code>CR</code>, <code>SPACE</code> <code>TAB</code> <code>SHIFT</code> Supported (Function) Keys Modifiers <code>A</code> - <code>Z</code> <code>CTRL</code>, <code>SHIFT</code> <code>F1</code> - <code>F12</code> <code>SHIFT</code>, <code>CTRL</code>, <code>ALT</code> <code>UP</code>, <code>DOWN</code>, <code>LEFT</code>, <code>RIGHT</code>, <code>HOME</code>, <code>END</code> <code>CTRL</code>, <code>ALT</code> <code>PAGE_UP</code>, <code>PAGE_DOWN</code> <code>CTRL</code>, <code>ALT</code> <code>INSERT</code>, <code>DEL</code>, <code>LF</code>, <code>CR</code>, <code>SPACE</code> <code>BACKSPACE</code>, <code>TAB</code> <code>CTRL</code> <p>Note, that modifiers are prepend to key names with an underline, e.g. <code>SHIFT_CTRL_UP</code>.</p>"},{"location":"setup/Database/","title":"Database Setup","text":"<p>The ACME CSE uses a database to store resources and other runtime data. You have the choice between a memory-based datatabase, a simple file-based database and a PostgreSQL database.</p>"},{"location":"setup/Database/#tinydb-file-based","title":"TinyDB File-Based","text":"<p>The default database is a simple but fast file-based database using the TinyDB library. By default, it requires no additional setup.</p> <p>The database files are stored by default in the directory {baseDirectory}/data (which can be changed by a configuration setting). The filenames in that directory have unique filenemes that are derived from the database type, Service Provider ID, and CSE ID. For example, the file for the resources of the CSE with ID id-in and Service Provider ID acme.example.com would be named resources-acme.example.com-id-in.json.</p> <p>You enable the TinyDB file-based database by setting the databaseType setting in the [basic.config] section to tinydb:</p> Enable TinyDB as database<pre><code>[basic.config]\ndatabaseType=tinydb\n</code></pre>"},{"location":"setup/Database/#tinydb-in-memory","title":"TinyDB In-Memory","text":"<p>TinyDB also provides a memory-based database that might be useful for testing and development purposes, or if you want to start with a clean database each time you start the CSE.</p> <p>You enable the in-memory database by setting the databaseType setting in the [basic.config] section to memory:</p> Enable in-memory database<pre><code>[basic.config]\ndatabaseType=memory\n</code></pre>"},{"location":"setup/Database/#postgresql","title":"PostgreSQL","text":"<p>An alternative to the file-based database is to use a PostgreSQL database. This requires a running PostgreSQL server to which the CSE can connect. The PostgreSQL connection settings are configured in the acme.ini configuration file.</p> <p>The following steps describe how to set up a PostgreSQL database for the ACME CSE:</p> <ol> <li>Optional: Install PostgreSQL on your system. You can download the installer from the PostgreSQL website.</li> <li>Create a new database and user for the CSE. It is recommended to use the CSE-ID as the database name and as the role name. For example, you can use the following commands to create a new database named id-in and a role named id-in with the password acme:</li> </ol> Create database and role<pre><code>psql -c \"CREATE DATABASE \\\"id-in\\\";\"\npsql -c \"CREATE USER \\\"id-in\\\" WITH PASSWORD 'acme';\"\npsql -c \"GRANT ALL PRIVILEGES ON DATABASE \\\"id-in\\\" TO \\\"id-in\\\";\"\n</code></pre> <ol> <li> <p>If not done during the setup procedure above: Edit the acme.ini configuration file and the following settings under the [database.postgresql] section:</p> PostgreSQL database settings<pre><code>    [database.postgresql]\n    password = acme\n</code></pre> <p>All other settings are optional and can be left at their default values. The database and role settings are set to the CSE-ID by default. If you used different names for the database and role, you have to adjust these settings accordingly. Also the host and port settings are set to localhost and 5432 by default. If your PostgreSQL server is running on a different host or port, you have to adjust these settings as well. You also need to enable the PostgreSQL database by setting the databaseType setting in the [basic.config] section to postgresql:</p> Enable postgreSQL database<pre><code>    [basic.config]\n    databaseType=postgresql\n</code></pre> </li> <li> <p>Run the CSE. The database schema, tables and other structures are created automatically by the CSE when it starts and connects for the first time. </p> </li> </ol>"},{"location":"setup/Database/#disabling-postgresql-support","title":"Disabling PostgreSQL Support","text":"<p>Sometimes it may not be possible or desirable to use a PostgreSQL database, for example, when running the CSE on a system where PostgreSQL is not available or when you want to use the CSE in a simple test environment.</p> <p>In this case, you can disable the PostgreSQL database by setting the databaseType setting in the [basic.config] section to tinydb or memory:</p> Disable PostgreSQL database<pre><code>[basic.config]\ndatabaseType=tinydb\n</code></pre> <p>In order to prevent the PostgreSQL Python modules (i.e. psycopg2) to be loaded you can also set the <code>ACME_NO_PGSQL</code> environment variable to any value before running the CSE:</p> Disable PostgreSQL Database Support in Environment<pre><code>export ACME_NO_PGSQL=1\n</code></pre>"},{"location":"setup/Installation/","title":"Installation","text":""},{"location":"setup/Installation/#pre-requisites","title":"Pre-Requisites","text":"<p>ACME requires Python 3.10 or newer. ACME has not been tested with the upcoming Python 3.13 yet. Install it with your favorite package manager or as part of a virtual environment.</p>"},{"location":"setup/Installation/#installation-and-first-setup","title":"Installation and First Setup","text":""},{"location":"setup/Installation/#installation_1","title":"Installation","text":"<p>There are two ways to install the ACME CSE: using pip or by doing a manual installation.</p> Using pip (Package Installation)Manual Installation <p>Run pip to install the ACME CSE from the Python Package Index (PyPI):</p> Installing ACME CSE<pre><code>python -m pip install acmecse\n</code></pre> <p>This will install the latest version of the ACME CSE and all required dependencies. </p> <p>You can also upgrade to the latest version by running:</p> Upgrading ACME CSE<pre><code>python -m pip install --upgrade acmecse\n</code></pre> <ol> <li> <p>Install the ACME CSE by cloning the repository, or by downloading the latest release package, unpacking it, and copying the whole distribution to a new directory.  </p> Clone the Repository<pre><code>git clone https://github.com/ankraft/ACME-oneM2M-CSE.git\ncd ACME-oneM2M-CSE\n</code></pre> </li> <li> <p>It is recommend to install the required packages by running the following command:</p> Installing Required Packages<pre><code>python3 -m pip install -r requirements.txt\n</code></pre> <p>You may also install the packages manually, but make sure to install the exact versions as specified in the requirements.txt file.</p> <p>An alternative is to let ACME handle the installation automatically when running it for the first time (see below).</p> </li> </ol>"},{"location":"setup/Installation/#guided-onboarding","title":"Guided Onboarding","text":"<p>The ACME CSE can be configured by an interactive onboarding process when it is started for the first time. This process will create a configuration file that can be edited later.</p> <ol> <li> <p>Run the CSE for the first time. You can start the CSE by simply running it from the command line:</p> For Package Installation For Manual Installation <p>Run the following command from the command line of your terminal program from within any directory that uses the Python environment where you installed the package:</p> Running the ACME CSE<pre><code>acmecse\n</code></pre> <p>Run the following command from the command line from within the directory where you installed the CSE:</p> Running the ACME CSE as a module<pre><code>python3 -m acme\n</code></pre> <p>Please refer to the Running documentation for more detailed instructions how to start and run the ACME CSE.</p> <p>If you have not installed the required packages during the installation ACME will ask you to install them now. This can be done by ACME automatically, or you can do it manually (see above).</p> <p>If no configuration file is found in the base directory then an interactive configuration process is started. The configuration is saved to a configuration file. e.g. acme.ini by default. </p> <p>The base directory by default is the directory where the CSE is started from. This directory can be changed by the --base-directory (or -dir) command line argument to a different directory. </p> <p> ACME CSE Guided Configuration </p> <p>After the configuration is saved, the CSE is started. with this configuration.</p> </li> <li> <p>After terminating the CSE again you can edit that configuration file and add more settings if necessary.     There are a lot of individual settings to configure here. Mostly, the defaults should be sufficient, but individual settings can be applied to each of the sections.     See the Configuration documentation for further details, and the default configuration file acme.ini.default.</p> </li> </ol>"},{"location":"setup/Installation/#stand-alone-configuration-creation","title":"Stand-Alone Configuration Creation","text":"<p>If you want to configure the CSE without starting it, you can use the following command:</p> For Package Installation For Manual Installation <p>Run the following command from the command line of your terminal program from within any directory that uses the Python environment where you installed the package:</p> Running the onboarding tool<pre><code>acmecse-onboarding acme.ini\n</code></pre> <p>Run the following command from the command line from within the directory where you installed the CSE:</p> Running the onboarding tool as a module<pre><code>python3 -m acme.onboarding acme.ini\n</code></pre> <p>This will start the configuration process and save the configuration to the specified file. The configuration file can be edited later as described before.</p>"},{"location":"setup/Installation/#guided-onboarding-with-a-zookeeper-configuration-service","title":"Guided Onboarding with a Zookeeper Configuration Service","text":"<p>If you want to use a Zookeeper configuration service instead of a local configuration file to manage the configuration of the CSE, you can create a configuration that is stored in Zookeeper. This can be done by passing the --zookeeper-host (and optionally --zookeeper-port) command line arguments to the onboarding tool:</p> For Package InstallationFor Manual Installation Running the onboarding tool with Zookeeper<pre><code>acmecse-onboarding --zookeeper-host &lt;host&gt;\n</code></pre> Running the onboarding tool with Zookeeper as a module<pre><code>python3 -m acme.onboarding --zookeeper-host &lt;host&gt;\n</code></pre> <p>This will start the configuration process as before, but the configuration will be stored in Zookeeper instead of a local file.</p> <p>Storing the configuration in Zookeeper is also possible when running the CSE for the first time. When you run the CSE with the --config-zk-host command line argument, the CSE will start the onboarding process and store the configuration in Zookeeper.</p>"},{"location":"setup/Installation/#installing-the-development-version","title":"Installing the Development Version","text":"<p>If you want to install the development version of the ACME CSE, you can either clone the repository and check-out the development branch, or you can install the current stable development version from the Python Package Index (PyPI): </p> Installing the ACME CSE Development Version<pre><code>python -m pip install acmecse-dev\n</code></pre> <p>This command will install the latest development version of the ACME CSE and all required dependencies. It can be run in the same way as the stable version.</p> <p>Development Version</p> <p>The development version contains the latest changes, features, and bug fixes, but it is not stable and may contain bugs or incomplete features. It is not recommended for production use.</p>"},{"location":"setup/Operation-diagrams/","title":"Operation - Infrastructure Diagrams","text":""},{"location":"setup/Operation-diagrams/#resource-tree-and-deployment-infrastructure-diagram","title":"Resource Tree and Deployment Infrastructure Diagram","text":"<p>The CSE can generate a diagram with an overview about the hosted resource tree and the current deployment infrastructure of remote CSEs. This is available by sending a GET request as follows:</p> GET request to retrieve the diagram script<pre><code>curl localhost:8080/__structure__\n</code></pre> <p>This returns a PlantUML diagram script that can be rendered with the PlantUML tool. The diagram shows the resource tree and the deployment infrastructure of remote CSEs. The diagram can be used to get an overview of the current deployment and to identify potential issues.</p> <p> </p> Example Deployment Diagram <p>An optional argument lvl=&lt;int&gt; can be provided to the URL to limit the number if levels of the resource tree in the diagram.</p> <p>This feature must be enabled in the configuration file under <code>[server.http].enableStructureEndpoint</code>. </p> <p>Attention</p> <p>Enabling this feature might reveal sensitive data. It should be disabled if not used.</p> <p>When enabled the http server creates an additional endpoint /__structure__. A GET request to that endpoint returns a diagram description in PlantUML format that can be transformed in images with various tools (for example, with the online editor on the PlantUML website). </p> <p>A similar text representation of the resource tree only can be retrieved from the endpoint /__structure__/text .</p> GET Request to retrieve the text representation of the resource tree<pre><code>curl localhost:8080/__structure__/text\n...\n\ncse-in -&gt; m2m:cb (csi=/id-in) | ri=id-in\n\u251c\u2500\u2500 acpCreateACPs -&gt; m2m:acp | ri=acpCreateACPs\n\u251c\u2500\u2500 CAdmin -&gt; m2m:ae | ri=CAdmin\n...\n</code></pre>"},{"location":"setup/Operation-management/","title":"Operation - CSE Management API","text":"<p>If enabled, the CSE provides a management API that allows to retrieve configuration and status information, stream logs and requests as well as to reset, shutdown and restart the CSE. This API is intended for operational tasks and monitoring of the CSE.</p> <p>Management commands can be sent to the CSE via HTTP requests.</p>"},{"location":"setup/Operation-management/#enabling-cse-management","title":"Enabling CSE Management","text":"<p>The CSE management API is disabled by default. To enable it, set the enableManagementEndpoint setting in the configuration file to <code>true</code>:</p> Enable CSE Management<pre><code>[http]\nenableManagementEndpoint = true\n</code></pre>"},{"location":"setup/Operation-management/#management-commands","title":"Management Commands","text":"<p>The CSE management interface provides several commands that can be used to manage the CSE and retrieve information about its operation. The commands are sent as HTTP requests to the management endpoint, which is  located at <code>/__mgmt__</code> of the CSE's HTTP server.</p> Command Description help Show a list of available management commands. config Get the current configuration of the CSE in JSON format. log Stream the live log output of the CSE. The log will continue to stream until the connection is closed. loglevel Get or set the log level of the CSE. The log level can be set to <code>info</code>, <code>debug</code>, <code>warn</code>, <code>error</code>, or <code>off</code>. registrations Get the current registrations of the CSE in JSON format. This includes the registrations to remote CSEs, service providers and the registrations of local AEs.Also, initiate a manual registration refresh. requests Stream a live output of the current requests of the CSE in JSON format as well as enable, disable and get the status of request recording. reset Reset the CSE to its initial state. This will clear all resources from the CSE. restart Shutdown the CSE to restart it. The CSE will not restart internally, but it will exit with an exit code 82. See also the example below. shutdown Shutdown the CSE normally. The CSE will exit with an exit code 0. status Get the current status of the CSE in JSON format. This includes information about the CSE resources, operational parameters and requests."},{"location":"setup/Operation-management/#examples","title":"Examples","text":"<p>The following examples show how to use the management commands via <code>curl</code>.</p>"},{"location":"setup/Operation-management/#get-the-cses-configuration","title":"Get the CSE's Configuration","text":"Get CSE Configuration<pre><code>curl -X GET http://localhost:8080/__mgmt__/config\n</code></pre> <p>This will return the current configuration of the CSE in JSON format. </p>"},{"location":"setup/Operation-management/#get-the-cses-log-output","title":"Get the CSE's Log Output","text":"Get CSE Log Output<pre><code>curl -X GET http://localhost:8080/__mgmt__/log\n</code></pre> <p>This will stream the live log output of the CSE. The log will continue to stream until the connection is closed, e.g. by pressing <code>Ctrl+C</code> in the terminal.</p>"},{"location":"setup/Operation-management/#get-the-cses-log-level","title":"Get the CSE's Log Level","text":"Get CSE Log Level<pre><code>curl -X GET http://localhost:8080/__mgmt__/loglevel\n</code></pre>"},{"location":"setup/Operation-management/#set-the-cses-log-level","title":"Set the CSE's Log Level","text":"Set CSE Log Level to Debug<pre><code>curl -X GET http://localhost:8080/__mgmt__/loglevel/debug\n</code></pre> Disable CSE Log Output<pre><code>curl -X GET http://localhost:8080/__mgmt__/logloglevel/off\n</code></pre>"},{"location":"setup/Operation-management/#shutdown-the-cse","title":"Shutdown the CSE","text":"Shutdown CSE<pre><code>curl -X GET http://localhost:8080/__mgmt__/shutdown\n</code></pre>"},{"location":"setup/Operation-management/#restart-the-cse","title":"Restart the CSE","text":"<p>Restart CSE<pre><code>curl -X GET http://localhost:8080/__mgmt__/restart\n</code></pre> This will shutdown the CSE and exit with an exit code 82. </p> <p>The CSE will not restart automatically. To support this one needs to check the exit code of the CSE and restart it manually or via a script.</p> <p>The following example code shows how to restart the CSE automatically using a shell script:</p> Bash ShellFish Shell Restart CSE with Bash Shell<pre><code>while true; do\n    python -m acme\n    if [ $? -ne 82 ]; then\n        break\n    fi\n    echo \"Restarting ACME CSE...\"\ndone\n</code></pre> Restart CSE with Fish Shell<pre><code>while true\n    python -m acme\n    if test $status -ne 82\n        break\n    end\n    echo \"Restarting ACME CSE...\"\nend\n</code></pre>"},{"location":"setup/Operation-management/#stream-cse-requests","title":"Stream CSE Requests","text":"Stream CSE Requests<pre><code>curl -X GET http://localhost:8080/__mgmt__/requests\n</code></pre>"},{"location":"setup/Operation-management/#enable-request-recording","title":"Enable Request Recording","text":"Enable Request Recording<pre><code>curl -X GET http://localhost:8080/__mgmt__/requests/enable\n</code></pre>"},{"location":"setup/Operation-management/#disable-request-recording","title":"Disable Request Recording","text":"Disable Request Recording<pre><code>curl -X GET http://localhost:8080/__mgmt__/requests/disable\n</code></pre>"},{"location":"setup/Operation-management/#get-the-request-recording-status","title":"Get the Request Recording Status","text":"Get Request Recording Status<pre><code>curl -X GET http://localhost:8080/__mgmt__/requests/recording/status\n</code></pre>"},{"location":"setup/Operation-management/#get-the-cses-registrations","title":"Get the CSE's Registrations","text":"Get CSE Registrations<pre><code>curl -X GET http://localhost:8080/__mgmt__/registrations\n</code></pre>"},{"location":"setup/Operation-management/#refresh-cse-registrations","title":"Refresh CSE Registrations","text":"Refresh CSE Registrations<pre><code>curl -X GET http://localhost:8080/__mgmt__/registrations/refresh\n</code></pre>"},{"location":"setup/Operation-mqtt/","title":"Operation - MQTT Broker","text":"<p>ACME supports Mca, Mcc and Mcc' communication via MQTT. This binding must be enabled in the configuration file with the <code>[client.mqtt].enable</code> setting. The address and optionally the port of the MQTT broker must be configured as well.</p> MQTT Configuration Example<pre><code>[mqtt]\nenable = True\naddress = mqtt://mqtt.example.org\nport = 1883\n</code></pre> <p>ACME does not bring an own MQTT broker. Instead any MQTT broker that supports at least MQTT version 3.1.x can be used. This can be either be an own operated or a public broker installation (see, for example, https://test.mosquitto.org). The connection details need to be configured in the <code>[client.mqtt]</code>   section as well.</p>"},{"location":"setup/Operation-uppertester/","title":"Upper Tester Support","text":"<p>The CSE has limited support for the Upper Tester (UT) test protocol. This protocol is used to trigger a System Under  Test (SUT), ie. a CSE, to perform certain oneM2M operations and other actions. See oneM2M's TS-0019 \"Abstract Test Suite and Implementation eXtra Information for Test\" specification for further details.</p> <p>To support this feature an additional endpoint <code>__UT__</code> is available under the HTTP server's root path. It can be enabled by setting the configuration <code>[http].enenableUpperTesterEndpoint</code> in the configuration file to <code>True</code>.</p> <p>Warning</p> <p>Only use this feature in a controlled environment. Enabling it may lead to a total loss of data because several internal functions and resources are exposed or can be managed without added security.</p>"},{"location":"setup/Operation-uppertester/#supported-functions","title":"Supported Functions","text":"<p>The Upper Tester endpoint currently only supports a limited set of the functionality specified in TS-0019, but offers additional functionality, such as sending commands with arguments and receiving return values. </p> <p>The following sections present an overview.</p>"},{"location":"setup/Operation-uppertester/#http-header-x-m2m-utcmd-run-cse-commands","title":"HTTP Header X-M2M-UTCMD : Run CSE Commands","text":"<p>The <code>X-M2M-UTCMD</code> http header field is used to run a command internally by the CSE. The ACME CSE implements these commands  as scripts that have the meta tag @uppertester set.</p> <p>The following commands are available by default, but other can be added. Some of these commands are used to reconfigure the CSE when running test cases.</p> UT Functionality Description reset Resets the CSE to its initial state. No other function or operation present in the request is executed. status Returns the CSE running status in the response header field <code>X-M2M-UTRSP</code>. disableShortRequestExpiration For running test cases: Disables short request expiration. disableShortResourceExpiration For running test cases: Disables short resource expiration. enableShortRequestExpiration For running test cases: Enables short request expiration. enableShortResourceExpiration For running test cases: Enables short resource expiration."},{"location":"setup/Operation-uppertester/#header-x-m2m-utrsp-return-cse-command-result","title":"Header X-M2M-UTRSP : Return CSE Command Result","text":"<p>In case a command returns a result then it is available in the header field <code>X-M2M-UTRSP</code> of the HTTP response to the Uper Tester's request.</p>"},{"location":"setup/Operation-uppertester/#examples","title":"Examples","text":""},{"location":"setup/Operation-uppertester/#resetting-the-cse","title":"Resetting the CSE","text":"<p>This example initiates a reset of the CSE. The successful execution is indicated by the Response Status Code header X-M2M-RSC: 2000 </p> Resetting the CSE<pre><code>$ curl -X POST -H \"X-M2M-UTCMD:Reset\" http://localhost:8080/__ut__\n...\n&lt; HTTP/1.1 200 OK\n&lt; Server: Werkzeug/3.0.2 Python/3.11.7\n&lt; Date: Sun, 05 May 2024 11:09:33 GMT\n&lt; Server: ACME 2024.DEV\n&lt; X-M2M-RSC: 2000\n&lt; X-M2M-UTRSP: false\n&lt; Content-Type: text/plain; charset=utf-8\n&lt; Content-Length: 0\n&lt; Connection: close\n...\n</code></pre>"},{"location":"setup/Operation-uppertester/#get-the-cse-status","title":"Get the CSE Status","text":"<p>This example requests the CSE status. It is returned in the <code>X-M2M-UTRSP</code> header.</p> Get the CSE Status<pre><code>$ curl -v -X POST -H \"X-M2M-UTCMD:Status\" http://localhost:8080/__ut__\n...\n&lt; HTTP/1.1 200 OK\n&lt; Server: Werkzeug/3.0.2 Python/3.11.7\n&lt; Date: Sun, 05 May 2024 11:02:47 GMT\n&lt; Server: ACME 2024.04\n&lt; X-M2M-RSC: 2000\n&lt; X-M2M-UTRSP: RUNNING\n&lt; Content-Type: text/plain; charset=utf-8\n&lt; Content-Length: 0\n&lt; Connection: close\n...\n</code></pre>"},{"location":"setup/Running/","title":"Running","text":"<p>This article describes how to start and stop the CSE, and how to use the command console interface.</p>"},{"location":"setup/Running/#running-the-cse","title":"Running the CSE","text":"<p>You can start the CSE by running it from the command line. This is the simplest way to start the ACME CSE.</p> Package installationManual Installation Starting the ACME CSE<pre><code>acmecse\n</code></pre> Starting the ACME CSE as a module<pre><code>python3 -m acme\n</code></pre> <p>The current working directory is used as the base directory for the CSE and the acme.ini configuration file must be in the same directory. An interactive configuration process is started if the configuration file is not found.</p>"},{"location":"setup/Running/#different-configuration-file","title":"Different Configuration File","text":"<p>The CSE can also be started with a different configuration file:</p> Package InstallationManual Installation Starting the ACME CSE with a different configuration file<pre><code>acmecse --config &lt;filename&gt;\n</code></pre> Starting the ACME CSE with a different configuration file<pre><code>python3 -m acme --config &lt;filename&gt;\n</code></pre> <p>The current working directory is still the base directory for the CSE and the configuration file is still expected to be located in this directory.</p>"},{"location":"setup/Running/#different-base-directory","title":"Different Base Directory","text":"<p>The CSE can also be started with a different base directory:</p> Package InstallationManual Installation Starting the ACME CSE with a different base directory<pre><code>acmecse -dir &lt;directory&gt;\n</code></pre> Starting the ACME CSE with a different base directory<pre><code>python3 -m acme -dir &lt;directory&gt;\n</code></pre> <p>This will use the specified directory as the root directory for runtime data such as data, logs, and temporary files. The configuration file acme.iniis expected to be in the specified directory, or it will be created there if it does not exist.</p>"},{"location":"setup/Running/#secondary-init-directory","title":"Secondary init Directory","text":"<p>A base directory may also host a secondary init directory that is used for importing further resources such as attribute definitions and scripts. Resources in this directory are automatically imported when the CSE starts, and processed after the resources in the primary init directory have been imported and processed.</p>"},{"location":"setup/Running/#command-line-arguments","title":"Command Line Arguments","text":"<p>The ACME CSE provides a number of command line arguments that will override the respective settings from the configuration file. They can be used to change certain CSE behaviours without changing the configuration file.</p> Command Line Argument Description -h, --help Show a help message and exit. --coap, --no-coap Enable or disable the CoAP binding.This overrides the coap.enable configuration setting. --config &lt;filename&gt; Specify a configuration file that is used instead of the default (acme.ini) one. --config-zk-host  Specify the Zookeeper host name.This together with the <code>--config-zk-root</code> option is used to enable the CSE to use Zookeeper for remote configuration. --config-zk-port  Specify the Zookeeper port (default: 2181) --config-zk-root  Specify the Zookeeper root node (default: None). This should be unique, for example the the CSE ID --base-directory &lt;directory&gt;,-dir &lt;directory&gt; Specify the root directory for runtime data such as data, logs, and temporary files. --dark, --light Enable dark or light theme for the console and text UI. --db-directory &lt;directory&gt; Specify the directory where the CSE's data base files are stored. --db-reset Reset and clear the database when starting the CSE. --db-type Specify the DB's storage type.This overrides the database.type configuration setting. --headless Operate the CSE in headless mode.This disables almost all screen output and also the build-in console interface. --http, --https Run the CSE with http or https server.This overrides the useTLS configuration setting. --http-wsgi Run CSE with http WSGI support.This overrides the http.wsgi.enable configuration setting. --http-address &lt;server URL&gt; Specify the CSE's http server URL.This overrides the address configuration setting. --http-port &lt;http port&gt; Specify the CSE's http server port.This overrides the address configuration setting. --init-directory &lt;directory&gt; Specify the import directory.This overrides the resourcesPath configuration setting. --log-level Set the log level, or turn logging off.This overrides the level configuration setting. --mqtt, --no-mqtt Enable or disable the MQTT binding.This overrides the mqtt.enable configuration setting. --network-interface &lt;ip address Specify the network interface/IP address to bind to.This overrides the listenIF configuration setting. --print-config, -pc Print the configuration during startup to the \"info\" level log. --remote-cse, --no-remote-cse Enable or disable remote CSE connections and checking.This overrides the enableRemoteCSE configuration setting. --statistics, --no-statistics Enable or disable collecting CSE statistics.This overrides the enable configuration setting. --textui Run the CSE's text UI after startup. --ws, --no-ws Enable or disable the WebSocket binding.This overrides the websocket.enable configuration setting."},{"location":"setup/Running/#reading-command-line-arguments-from-a-file","title":"Reading Command Line Arguments from a File","text":"<p>Command line arguments can also be read from a file. This is useful when you have a large number of arguments that you want to pass to the CSE. The file should contain one argument per line. Empty lines and lines starting with a hash sign (<code>#</code>) are ignored.</p> <p>Example:</p> argsfile.txtRuning the CSE with arguments from an arguments file The content of the arguments file 'argsfile.txt'<pre><code>--db-type memory\n\n# enable the http server\n--http\n\n# enable the mqtt server\n--mqtt\n\n# set the log level to debug\n--log-level debug\n</code></pre> Runing the CSE with arguments from an arguments file<pre><code>acmecse @argsfile.txt\n</code></pre>"},{"location":"setup/Running/#stopping-the-cse","title":"Stopping the CSE","text":"<p>The CSE can be stopped by pressing pressing the uppercase Q key or CTRL-C once on the command line.<sup>1</sup></p> <p>Please note, that the shutdown might take a moment (e.g. gracefully terminating background processes, writing database caches, sending notifications etc). </p> <p>Warning</p> <p>Being impatient and hitting CTRL-C twice might lead to data corruption.</p> <ol> <li> <p>You can configure this behavior with the [cse.console].confirmQuit configuration setting.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/TextUI/","title":"Text UI","text":"<p>The Text UI is a text-based terminal UI that is enabled by default. It offers a nice way to explore the CSE and its resources, and to perform basic operations. It is also a good way to learn about the CSE's resources and their attributes.</p> <p>Depending on the terminal it can be operated with the mouse or with the keyboard.</p> <p> </p> Text UI of the ACME CSE"},{"location":"setup/TextUI/#starting-the-text-ui","title":"Starting the Text UI","text":"<p>One can switch between the normal console and the text UI by pressing the <code>#</code> key.</p> <p>The text UI is started automatically in some configuration modes when the CSE is started.</p> <p>You can also start the text UI directly by providing the <code>--textui</code> command line argument when starting the CSE.</p>"},{"location":"setup/TextUI/#ui-sections","title":"UI Sections","text":"<p>The different sections of the text UI are described below. They can be selected by going to the corresponding tab.</p> Resources This tab shows the resources in the CSE. When you select a resource, the resource's attributes are shown in the right pane.  Here, you also have the option to see the request and response messages that were targeted at the selected resource. This is useful to see what happened in the background when you performed an operation on the resource. You may also Delete a resource and its children, or export a resource. Requests This tab shows the requests that were sent to the CSE or were sent by the CSE. You can select a request to see its details and the response. Registrations This tab shows the registrations of AEs and CSEs that were created in the CSE or at a remote CSE. Tools This tab contains some tools that can be used to perform operations on the CSE, or run applications as scrips.  See the ACMEScript meta-tags for more information. Infos This tab shows the current number of resources, requests, and other statistics and useful information. Configurations This tab gives a detailed overview about the current configuration of the CSE. Though, it is currently not possible to change the configuration here, each setting is expained in detail. About This tab shows some information about the CSE, including the version number and the license."},{"location":"setup/TextUI/#usage","title":"Usage","text":"<p>Most of the functions in the text UI should be self-explanatory. Here are some tips and tricks to help you get started.</p> General <ul> <li>You can navigate the text UI with your mouse or with the keyboard.</li> <li>The clock in the top right corner shows the time and date. It is UTC-based in order to help when comparing oneM2M timestamps.</li> </ul> Resource View <ul> <li>When clicking on a resource representation in the resource view, then the resource is copied to the clipboard.</li> <li>When clicking on a section at the top or bottom of the resource view, then the resource name, resource type, structured or unstructured resource ID are copied to the clipboard, respectively.</li> </ul> Requests View <ul> <li>When clicking on a request or response in the requests view then the request or response is copied to the clipboard.</li> </ul>"},{"location":"setup/WebUI/","title":"Web UI","text":"<p>The Web UI by default is enabled and reachable under the (configurable) web path &lt;host&gt;/webui.</p> <ul> <li>To login you need to specify a valid originator. The default \"admin\" originator is CAdmin.</li> <li>Beside of the default CSEBase resource you can specify a different resource identifier as the root of the resource tree.</li> <li>You can navigate the resource tree with arrow keys.</li> <li>You can switch between short and long attribute names (press CTRL-H).</li> <li>The web UI communicates via the Mca interface over http or https with the CSE. It doesn't use any special API calls.</li> </ul>"},{"location":"setup/WebUI/#rest-ui","title":"REST UI","text":"<p>The web UI also provides a REST UI where you can send REST requests directed at resources on the CSE.</p> <p></p> ACME CSE Web UI with REST Interface"}]}